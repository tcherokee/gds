---
export const prerender = true;

// First Party and Third Party Plugins
import qs from "qs";

// Types and TypeGuards
import type { GetStaticPaths } from "astro";
import type { CategoryPageItem } from "../../../interfaces/category-page";
import type {
  BreadcrumbData,
  Faqs,
  GameFilters,
  TProviderAttributesOnly,
} from "../../../interfaces/common/types";

// Layouts
import MainLayout from "../../layouts/MainLayout.astro";

// Stores

// Queries
import { categoryPagesQs } from "../../../qs/categoryPages";
import { getBreadcrumbs } from "../../../stores/breadcrumbs";

// Components
import ContentBlock from "../../components/blocks/contentBlock.astro";
import FaqListBlock from "../../components/blocks/faqListBlock.astro";
import GameListBlock from "../../components/blocks/gameListBlock.svelte";
import CasinoSidebar from "../../components/casino/casinoSidebar.astro";
import IntroWithImage from "../../components/general/introWithImage.astro";

// Helpers
import type { TUserGame, TUserGameProvider } from "../../../interfaces/games";
import fetchApi from "../../../lib/strapi";
import { gamesQs } from "../../../qs/games";
import { urlTranslate } from "../../../utils/data-store.util";
import Quicklinks from "../../components/helpers/quicklinks.astro";
import Breadcrumbs from "../../components/layout/breadcrumbs.astro";

import {
  slotProviders as slotProvidersResponse,
  getTranslations as translationResponse,
} from "../../../utils/api-requests";

const translationStore = await translationResponse();
const slotProviders = await slotProvidersResponse();
// Fetch Game Providers Filter
const gameProviders = await fetchApi<{
  id: number;
  attributes: {
    filterProviders: {
      data: TProviderAttributesOnly[];
    };
  };
}>({
  endpoint: "layout",
  wrappedByKey: "data",
  query: `?fields[0]=id&populate[filterProviders][fields][0]=slug&populate[filterProviders][populate][images][fields][0]=url`,
});

export const getStaticPaths = (async () => {
  // Import the QS Query string for custom slugs and prepare it for the API fetch
  const query = qs.stringify(categoryPagesQs(), { encodeValuesOnly: true });

  // Request to the Fetch Function to get the custom page slugs from the API
  const categoryPage = await fetchApi<CategoryPageItem[]>({
    endpoint: "slot-categories",
    wrappedByKey: "data",
    query: `?${query}`,
  });

  // // Get Category Slugs
  // const categorySlugs = data?.gameCategories.map(
  //   (game: any) => game.slotCategories.data.attributes.slug
  // );

  let gamesQueryObj: GameFilters = {
    limit: 18,
    sort: "views:desc",
    page: 1,
    providers: [],
    categories: [],
    author: "",
  };

  let slotCategories: TUserGameProvider[] = [];

  let prerenderPath: any[] = [];

  for (let i = 0; i < categoryPage.length; i++) {
    const slug = categoryPage[i]?.attributes?.slug;
    slotCategories.push({ title: categoryPage[i]?.attributes?.slug, slug });
    gamesQueryObj = {
      ...gamesQueryObj,
      categories: [slug],
    };
    const gamesQuery = qs.stringify(gamesQs(gamesQueryObj), {
      encodeValuesOnly: true,
    });

    const slotCategoriesGames = await fetchApi<any[]>({
      endpoint: "games",
      wrappedByKey: "data",
      query: `?${gamesQuery}`,
    });

    const modifiedGames: TUserGame[] = slotCategoriesGames.map((elem) => {
      return {
        id: elem.id,
        ...elem.attributes,
        images: {
          url: elem.attributes.images.data.attributes.url,
        },
        provider: {
          slug: elem.attributes.provider.data.attributes.slug,
          title: elem.attributes.provider.data.attributes.title,
        },
      };
    });

    prerenderPath.push({
      params: { slug },
      props: {
        page: categoryPage[i],
        modifiedGames,
        slotCategories,
      },
    });
  }

  return prerenderPath;
  // return categoryPage.map((page) => {
  //   return {
  //     params: { slug: page?.attributes?.slug },
  //     props: { page },
  //   };
  // });
}) satisfies GetStaticPaths;

const { page, modifiedGames, slotCategories } = Astro.props;
const { slug } = Astro.params;

// const translationStore: TranslationData = getTranslations.get();

// Setting SITE ID
const SITE_ID = import.meta.env.SITE_ID;

// Create block variable for GameList Component
const introBlock = {
  heading: page?.attributes?.IntroductionWithImage?.heading,
  introduction: page?.attributes?.IntroductionWithImage?.introduction,
  image: page?.attributes?.IntroductionWithImage?.image,
};

const gameBlock = {
  numberOfGames: 18,
  sortBy: "Most Popular",
  showGameFilterPanel: true,
  showGameMoreButton: true,
  gameCategories: [
    {
      slotCategories: {
        data: {
          attributes: {
            slug: slug,
          },
        },
      },
    },
  ],
  gameProviders: [],
};
const siteID = `${import.meta.env.SITE_ID}`;

// SEO Object
const seo = {
  pageTitle: page?.attributes?.seo?.metaTitle,
  metaDescription: page?.attributes?.seo?.metaDescription,
  url: `${import.meta.env.FULL_URL}${urlTranslate[SITE_ID as keyof typeof urlTranslate]["category-pages"]}/${slug}`,
};

let pageSchema = [];

let pageBreadcrum: BreadcrumbData[] = [
  {
    breadCrumbText: page?.attributes?.title,
    breadCrumbUrl: "",
  },
];

//Breadcrum Schema
const breadcrumStore: any = await getBreadcrumbs.get();
if (breadcrumStore && breadcrumStore["categoriesBreadcrumbs"]) {
  pageBreadcrum.unshift(...breadcrumStore?.["categoriesBreadcrumbs"]);
}
const breadSchema = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  itemListElement: pageBreadcrum.map((bread, i) => {
    return {
      "@type": "ListItem",
      position: i + 1,
      name: bread?.breadCrumbText,
      ...(bread?.breadCrumbUrl && { item: bread?.breadCrumbUrl }),
    };
  }),
};
pageSchema.push(breadSchema);

// FAQ Schema
const faqSchema = {
  "@context": "https://schema.org",
  "@type": "FAQPage",
  mainEntity: (page?.attributes?.faqs as Faqs[]).map(({ answer, question }) => {
    return {
      "@type": "Question",
      name: `${question}`,
      acceptedAnswer: {
        "@type": "Answer",
        text: `${answer}`,
      },
    };
  }),
};
pageSchema.push(faqSchema);
---

<MainLayout seoData={seo} schemaData={pageSchema}>
  <Breadcrumbs
    breadcrumbs={[
      { breadCrumbText: page?.attributes?.title, breadCrumbUrl: null },
    ]}
    breadcrumbKey="categoriesBreadcrumbs"
  />
  <div class="featured-background curve">
    <IntroWithImage
      data={introBlock}
      timeDate={page?.attributes?.updatedAt}
      authorData={undefined}
      {translationStore}
    />
    <GameListBlock
      data={gameBlock}
      initialGames={modifiedGames}
      gameProviders={gameProviders.attributes.filterProviders
        ? gameProviders.attributes.filterProviders.data
        : []}
      {slotCategories}
      translations={translationStore}
      {slotProviders}
      client:load
    />
  </div>
  <div class="relative xl:container px-2">
    <div class="flex flex-col gap-x-8 mt-10 md:flex-row">
      <div class="slot-machine-content order-last md:order-first">
        <Quicklinks data={page} {translationStore} />
        {
          page?.attributes?.content1 && (
            <ContentBlock pageContent={page?.attributes?.content1} />
          )
        }
        {
          page?.attributes?.content2 && (
            <ContentBlock pageContent={page?.attributes?.content2} />
          )
        }

        {
          page?.attributes?.content3 && (
            <ContentBlock pageContent={page?.attributes?.content3} />
          )
        }
        {
          page?.attributes?.faqs.length > 0 && (
            <div class="content">
              <h2 class="mb-4">{translationStore?.faq}</h2>

              {page?.attributes?.faqs.map((faq: Faqs) => (
                <FaqListBlock data={faq} />
              ))}
            </div>
          )
        }
      </div>
      <div class="basis-[315px] shrink-0 order-first mb-5 order-last">
        <CasinoSidebar {translationStore} />
      </div>
    </div>
  </div>
</MainLayout>
