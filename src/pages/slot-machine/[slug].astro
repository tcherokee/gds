---
// First Party and Third Party Plugins
import qs from "qs";

// Types and TypeGuards
import type { GetStaticPaths } from "astro";
import type { CategoryPageItem } from "../../../interfaces/category-page";
import type {
  BreadcrumbData,
  Faqs,
  GameFilters,
  TProviderAttributesOnly,
  UserCountry,
} from "../../../interfaces/common/types";

// Layouts
import MainLayout from "../../layouts/MainLayout.astro";

// Stores

// Queries
import { categoryPagesQs } from "../../../qs/categoryPages";

// Components
import ContentBlock from "../../components/blocks/contentBlock.astro";
import FaqListBlock from "../../components/blocks/faqListBlock.astro";
import GameListBlock from "../../components/blocks/gameListBlock.svelte";
import CasinoSidebar from "../../components/casino/casinoSidebar.astro";
import IntroWithImage from "../../components/general/introWithImage.astro";

// Helpers
import type { TUserGame, TUserGameProvider } from "../../../interfaces/games";
import fetchApi from "../../../lib/strapi";
import { gamesQs } from "../../../qs/games";
import { urlTranslate } from "../../../utils/data-store.util";
import Quicklinks from "../../components/helpers/quicklinks.svelte";
import Breadcrumbs from "../../components/layout/breadcrumbs.astro";

import {
  slotProviders as slotProvidersResponse,
  getTranslations as translationResponse,
} from "../../../utils/api-requests";
import { layoutQs } from "../../../qs/layout";
import type { LayoutData } from "../../../interfaces/layout";
import { getUserCountry, userCountryHandler } from "../../../utils/ip-request";

const userCountry = await getUserCountry();
const country =
  userCountry !== null
    ? await userCountryHandler(
        userCountry?.location?.country.toLowerCase() || ""
      )
    : null;

const casinoCountry = country !== null ? country?.sc || "" : null;

const slug = Astro.params.slug as string;

const translationStore = await translationResponse();
const slotProviders = await slotProvidersResponse();

// Fetch Game Providers Filter
const gameProviders = await fetchApi<{
  id: number;
  attributes: {
    filterProviders: {
      data: TProviderAttributesOnly[];
    };
  };
}>({
  endpoint: "layout",
  wrappedByKey: "data",
  query: `?fields[0]=id&populate[filterProviders][fields][0]=slug&populate[filterProviders][populate][images][fields][0]=url`,
});

const query = qs.stringify(categoryPagesQs(slug), { encodeValuesOnly: true });

let gamesQueryObj: GameFilters = {
  limit: 18,
  sort: "views:desc",
  page: 1,
  providers: [],
  categories: [],
  author: "",
};

// Request to the Fetch Function to get the custom page slugs from the API
const categoryPage = await fetchApi<CategoryPageItem[]>({
  endpoint: "slot-categories",
  wrappedByKey: "data",
  query: `?${query}`,
});

let slotCategories: TUserGameProvider[] = [];

slotCategories.push({ title: categoryPage[0]?.attributes?.slug, slug });

gamesQueryObj = {
  ...gamesQueryObj,
  categories: [slug],
};

const gamesQuery = qs.stringify(gamesQs(gamesQueryObj), {
  encodeValuesOnly: true,
});

const slotCategoriesGames = await fetchApi<any[]>({
  endpoint: "games",
  wrappedByKey: "data",
  query: `?${gamesQuery}`,
});

const modifiedGames: TUserGame[] = slotCategoriesGames.map((elem) => {
  return {
    id: elem.id,
    ...elem.attributes,
    images: {
      url: elem.attributes.images.data.attributes.url,
    },
    provider: {
      slug: elem.attributes.provider.data.attributes.slug,
      title: elem.attributes.provider.data.attributes.title,
    },
  };
});

let combinedSchema = [];

// FAQs Schema
if (
  categoryPage[0]?.attributes?.faqs &&
  categoryPage[0]?.attributes?.faqs.length > 0
) {
  const faqSchema = {
    "@context": "https://schema.org",
    "@type": "FAQPage",
    mainEntityOfPage: {
      "@type": "WebPage",
      url: `${import.meta.env.FULL_URL}${urlTranslate[import.meta.env.SITE_ID as keyof typeof urlTranslate]["category-pages"]}/${slug}`,
      "@id": `${import.meta.env.FULL_URL}${urlTranslate[import.meta.env.SITE_ID as keyof typeof urlTranslate]["category-pages"]}/${slug}`,
    },
    mainEntity: categoryPage[0]?.attributes?.faqs?.map(
      ({ answer, question }) => {
        return {
          "@type": "Question",
          name: `${question}`,
          acceptedAnswer: {
            "@type": "Answer",
            text: `${answer}`,
          },
        };
      }
    ),
  };
  combinedSchema.push(faqSchema);
}

// Create block variable for GameList Component
const introBlock = {
  heading: categoryPage[0]?.attributes?.IntroductionWithImage?.heading,
  introduction:
    categoryPage[0]?.attributes?.IntroductionWithImage?.introduction,
  image: categoryPage[0]?.attributes?.IntroductionWithImage?.image,
};

const gameBlock = {
  numberOfGames: 18,
  sortBy: "Most Popular",
  showGameFilterPanel: true,
  showGameMoreButton: true,
  gameCategories: [
    {
      slotCategories: {
        data: {
          attributes: {
            slug: slug,
          },
        },
      },
    },
  ],
  gameProviders: [],
};

// SEO Object
const seo = {
  pageTitle: categoryPage[0]?.attributes?.seo?.metaTitle,
  metaDescription: categoryPage[0]?.attributes?.seo?.metaDescription,
  url: `${import.meta.env.FULL_URL}${urlTranslate[import.meta.env.SITE_ID as keyof typeof urlTranslate]["category-pages"]}/${slug}`,
};

// Caching System
const surrogateKeys = [];

// Page-specific tags
surrogateKeys.push("page:category");
surrogateKeys.push(`category:${slug}`);

// Content-type tags
surrogateKeys.push("type:categorypage");

// Add content-specific tags based on content sections
if (categoryPage[0]?.attributes?.content1) {
  surrogateKeys.push("content:section1");
}
if (categoryPage[0]?.attributes?.content2) {
  surrogateKeys.push("content:section2");
}
if (categoryPage[0]?.attributes?.content3) {
  surrogateKeys.push("content:section3");
}

// Add FAQ tag if page has FAQs
if (
  categoryPage[0]?.attributes?.faqs &&
  categoryPage[0]?.attributes?.faqs.length > 0
) {
  surrogateKeys.push("content:faqs");
}

// Add game count tag to invalidate when the number of games changes substantially
if (modifiedGames && modifiedGames.length > 0) {
  surrogateKeys.push("content:games");
  surrogateKeys.push(`gamecount:${Math.floor(modifiedGames.length / 5) * 5}`); // Round to nearest 5

  // Track providers represented in this category
  const providersInCategory = [
    ...new Set(
      modifiedGames.map((game) => game.provider?.slug).filter(Boolean)
    ),
  ];

  if (providersInCategory.length > 0) {
    providersInCategory.forEach((providerSlug) => {
      if (providerSlug) {
        surrogateKeys.push(`provider:${providerSlug}`);
      }
    });
  }
}

// Add country-specific tag if applicable
if (casinoCountry) {
  surrogateKeys.push(`country:${casinoCountry}`);
}

// Add version or timestamp tag to allow for complete cache refresh when needed
const contentTimestamp = categoryPage[0]?.attributes?.updatedAt || Date.now();
surrogateKeys.push(`version:${contentTimestamp}`);

// Set Surrogate-Key header for GCP CDN cache invalidation
Astro.response.headers.set("Surrogate-Key", surrogateKeys.join(" ")); // Space-separated list

// Generate a proper ETag based on content
// Create a content signature from key data that would trigger a cache refresh when changed
const contentSignature = JSON.stringify({
  // Include critical content identifiers that should trigger cache invalidation
  slug: slug,
  title: categoryPage[0]?.attributes?.title,
  updatedAt: contentTimestamp,
  gameCount: modifiedGames?.length || 0,
  faqsCount: categoryPage[0]?.attributes?.faqs?.length || 0,
  hasContent1: !!categoryPage[0]?.attributes?.content1,
  hasContent2: !!categoryPage[0]?.attributes?.content2,
  hasContent3: !!categoryPage[0]?.attributes?.content3,
  countryCode: casinoCountry || "default",
  seo: {
    title: categoryPage[0]?.attributes?.seo?.metaTitle,
    description: categoryPage[0]?.attributes?.seo?.metaDescription,
  },
});

// Generate a hash of the content signature for the ETag
// In a production environment, you might want to use a more sophisticated hashing function
const contentHash = Array.from(
  new Uint8Array(new TextEncoder().encode(contentSignature))
)
  .reduce((hash, byte) => ((hash << 5) - hash + byte) | 0, 0)
  .toString(36);

// Create and set a proper ETag (weak validator with W/ prefix is appropriate for HTML content)
const etagValue = `W/"${contentHash}"`;
Astro.response.headers.set("ETag", etagValue);

// Check for If-None-Match header to enable 304 responses
const ifNoneMatch = Astro.request.headers.get("If-None-Match");
if (ifNoneMatch === etagValue) {
  return new Response(null, {
    status: 304,
    headers: {
      ETag: etagValue,
      "Cache-Control":
        "public, max-age=86400, s-maxage=604800, stale-while-revalidate=3600, stale-if-error=259200",
      "Surrogate-Key": surrogateKeys.join(" "),
      "Surrogate-Control": "max-age=604800",
      "Last-Modified": new Date(contentTimestamp).toUTCString(),
    },
  });
}

// Set aggressive caching
// Browser cache: 1 day
// CDN cache: 7 days (via s-maxage)
// Stale-while-revalidate: 1 hour
// Stale-if-error: 3 days
Astro.response.headers.set(
  "Cache-Control",
  "public, max-age=86400, s-maxage=604800, stale-while-revalidate=3600, stale-if-error=259200"
);

// Optional: Add Surrogate-Control header (might be useful for other CDNs)
Astro.response.headers.set("Surrogate-Control", "max-age=604800");

// Optional: Set cache validation headers
const lastModifiedDate = new Date(contentTimestamp).toUTCString();
Astro.response.headers.set("Last-Modified", lastModifiedDate);

---

<MainLayout
  seoData={seo}
  crumbLocation="categories"
  crumbTitle={categoryPage[0]?.attributes?.title}
  crumbUrl={`${import.meta.env.FULL_URL}${urlTranslate[import.meta.env.SITE_ID as keyof typeof urlTranslate]["category-pages"]}/${slug}`}
  otherSchema={combinedSchema}
>
  <Breadcrumbs
    breadcrumbs={[
      {
        breadCrumbText: categoryPage[0]?.attributes?.title,
        breadCrumbUrl: null,
      },
    ]}
    breadcrumbKey="categoriesBreadcrumbs"
  />
  <div class="featured-background curve">
    <IntroWithImage
      data={introBlock}
      timeDate={categoryPage[0]?.attributes?.updatedAt}
      authorData={undefined}
      {translationStore}
    />
    <GameListBlock
      data={gameBlock}
      initialGames={modifiedGames}
      gameProviders={gameProviders.attributes.filterProviders
        ? gameProviders.attributes.filterProviders.data
        : []}
      {slotCategories}
      translations={translationStore}
      {slotProviders}
      client:load
    />
  </div>
  <div class="relative xl:container px-2">
    <div class="flex flex-col gap-x-8 mt-10 md:flex-row">
      <div class="slot-machine-content order-last md:order-first">
        <Quicklinks data={categoryPage[0]} {translationStore} client:load />
        {
          categoryPage[0]?.attributes?.content1 && (
            <ContentBlock pageContent={categoryPage[0]?.attributes?.content1} />
          )
        }
        {
          categoryPage[0]?.attributes?.content2 && (
            <ContentBlock pageContent={categoryPage[0]?.attributes?.content2} />
          )
        }

        {
          categoryPage[0]?.attributes?.content3 && (
            <ContentBlock pageContent={categoryPage[0]?.attributes?.content3} />
          )
        }
        {
          categoryPage[0]?.attributes?.faqs.length > 0 && (
            <div class="content">
              <h2 class="mb-4">{translationStore?.faq}</h2>

              {categoryPage[0]?.attributes?.faqs.map((faq: Faqs) => (
                <FaqListBlock data={faq} />
              ))}
            </div>
          )
        }
      </div>
      <div class="basis-[315px] shrink-0 order-first mb-5 order-last">
        <CasinoSidebar {casinoCountry} {translationStore} />
      </div>
    </div>
  </div>
</MainLayout>
