---
import qs from "qs";

import { sortOptions } from "../../../stores/sortFilters";

import CustomPage from "../../components/general/customPage.astro";

// Helpers
import fetchApi from "../../../lib/strapi";

// Query Strings
import { customPageQs } from "../../../qs/customPages";
import { gamesQs } from "../../../qs/games.ts";

import {
  getLocalisation,
  slotCategories as slotCategoriesResponse,
  slotProviders as slotProvidersResponse,
  getTranslations as translationResponse,
} from "../../../utils/api-requests";

//types and typeguards
import type {
  Block,
  BreadcrumbData,
  CustomGameList,
  Faqs,
  GameFilters,
  HowToGroup,
  TProviderAttributesOnly,
} from "../../../interfaces/common/types.ts";
import type { CustomPageItem } from "../../../interfaces/custom-pages";

// Import Svelte Components

// Astro Layouts & Components
import type { TUserGame } from "../../../interfaces/games";
import { urlTranslate } from "../../../utils/data-store.util";
import { getUserCountry, userCountryHandler } from "../../../utils/ip-request";

const siteID = import.meta.env.SITE_ID;
const path =
  urlTranslate[siteID as keyof typeof urlTranslate]["new-games-page"].slice(1);
// Constructing SiteURL
const siteURL: string = `${import.meta.env.FULL_URL}/${path}`;

let initialGames: TUserGame[] = [];
let combinedSchema: any[] = [];

const localisation = await getLocalisation();
const userCountry = await getUserCountry();
const country =
  userCountry !== null
    ? await userCountryHandler(
        userCountry?.location?.country.toLowerCase() || ""
      )
    : null;

const casinoCountry = country !== null ? country?.sc || "" : "";

const translationStore = await translationResponse();
const slotProviders = await slotProvidersResponse();
const slotCategories = await slotCategoriesResponse();

// Fetch Game Providers Filter
const gameProviders = await fetchApi<{
  id: number;
  attributes: {
    filterProviders: {
      data: TProviderAttributesOnly[];
    };
  };
}>({
  endpoint: "layout",
  wrappedByKey: "data",
  query: `?fields[0]=id&populate[filterProviders][fields][0]=slug&populate[filterProviders][populate][images][fields][0]=url`,
});

const query = qs.stringify(customPageQs(path, casinoCountry, localisation), {
  encodeValuesOnly: true,
});

let gamesQueryObj: GameFilters = {
  limit: 18,
  sort: "views:desc",
  page: 1,
  providers: [],
  categories: [],
  author: "",
};

// Request to the Fetch Function to get the custom page slugs from the API
const customPageData = await fetchApi<CustomPageItem[]>({
  endpoint: "custom-pages",
  wrappedByKey: "data",
  query: `?${query}`,
});
const customPage = customPageData[0];

const gameQuery = customPage?.attributes?.blocks?.find(
  (block) => block.__component === "games.games-carousel"
) as CustomGameList;

if (gameQuery) {
  gamesQueryObj = {
    ...gamesQueryObj,
    limit: gameQuery.numberOfGames,
    sort: sortOptions.get()[gameQuery.sortBy],
  };

  const gamesQuery = qs.stringify(gamesQs(gamesQueryObj), {
    encodeValuesOnly: true,
  });

  const customPageGames = await fetchApi<any[]>({
    endpoint: "games",
    wrappedByKey: "data",
    query: `?${gamesQuery}`,
  });

  initialGames = customPageGames.map((elem) => {
    return {
      id: elem.id,
      ...elem.attributes,
      images: {
        url: elem.attributes.images.data.attributes.url,
      },
      categories: elem.attributes.categories.data,
      provider: {
        slug: elem.attributes.provider.data?.attributes.slug,
        title: elem.attributes.provider.data?.attributes.title,
      },
    };
  });
}

// FAQs Schema
const allFAQs = customPage?.attributes?.blocks.filter(
  (block: Block) => block.__component === "shared.faqs"
) as Faqs[];

if (allFAQs && allFAQs.length > 0) {
  const faqSchema = {
    "@context": "https://schema.org",
    "@type": "FAQPage",
    mainEntityOfPage: {
      "@type": "WebPage",
      url: `${siteURL}`,
      "@id": `${siteURL}`,
    },
    mainEntity: allFAQs?.map(({ answer, question }) => {
      return {
        "@type": "Question",
        name: `${question}`,
        acceptedAnswer: {
          "@type": "Answer",
          text: `${answer}`,
        },
      };
    }),
  };
  combinedSchema.push(faqSchema);
}

const allHowTos = customPage?.attributes?.blocks.filter(
  (block: Block) => block.__component === "shared.how-to-group"
) as unknown as HowToGroup[];

if (allHowTos && allHowTos.length > 0) {
  const howToSchema = allHowTos?.map(({ title, howToGroup }) => {
    return {
      "@context": "https://schema.org",
      "@type": "HowTo",
      mainEntityOfPage: {
        "@type": "WebPage",
        url: `${siteURL}`,
        "@id": `${siteURL}`,
      },
      name: `${title}`,
      totalTime: "PT15M",
      description: `${title}`,
      tool: [
        {
          "@type": "HowToTool",
          name: "smartphone, PC, tablet, metodo di pagamento",
        },
      ],
      step: howToGroup?.map(({ heading, copy, image }, i: number) => {
        return {
          "@type": "HowToStep",
          url: `${customPage?.attributes?.urlPath}#step0${i + 1}`,
          name: heading,
          itemListElement: {
            "@type": "HowToDirection",
            text: copy,
          },
          ...(image?.data?.attributes && {
            image: {
              "@type": "ImageObject",
              url: image?.data?.attributes.url,
            },
          }),
        };
      }),
    };
  });

  combinedSchema.push(...howToSchema);
}

// Breadcrumb Schema
const breadSchema = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  mainEntityOfPage: {
    "@type": "WebPage",
    url: `${siteURL}`,
    "@id": `${siteURL}`,
  },
  itemListElement: (
    [...customPage?.attributes?.breadcrumbs] as BreadcrumbData[]
  )
    .filter((elem) => elem.breadCrumbText.toLowerCase() !== "home")
    .map((bread, i) => {
      return {
        "@type": "ListItem",
        position: i + 1,
        name: bread?.breadCrumbText,
        ...(bread?.breadCrumbUrl && { item: bread?.breadCrumbUrl }),
      };
    }),
};
combinedSchema.push(breadSchema);

// SEO Object
const seo = {
  pageTitle: customPage.attributes?.seo?.metaTitle,
  metaDescription: customPage.attributes?.seo?.metaDescription,
  url: `${import.meta.env.FULL_URL}/${path}`,
};

// ============= CACHE IMPLEMENTATION START =============
// Set up cache tags (using Surrogate-Key)
const surrogateKeys: string[] = [];

// --- Core Page & Content Type Tags ---
// Path-based tag (Likely the most reliable key for Strapi to invalidate)
if (customPage?.attributes?.urlPath) {
  surrogateKeys.push(`path:${customPage.attributes.urlPath}`);
} else {
  surrogateKeys.push(`path:${path}`);
}

// Content-type tag (Useful for invalidating all pages of this type)
surrogateKeys.push("type:custompage");

// --- Related Entity Tags ---
// Add country-specific tag if applicable
if (casinoCountry) {
  surrogateKeys.push(`country:${casinoCountry}`);
}

// --- Versioning Tag ---
// Add version or timestamp tag based on the main entry's update time
const contentTimestamp = customPage?.attributes?.updatedAt || Date.now();
surrogateKeys.push(`version:${contentTimestamp}`);

// --- Set Headers ---
// Set Surrogate-Key header for CDN cache invalidation (e.g., GCP CDN)
// Space-separated list
Astro.response.headers.set("Surrogate-Key", surrogateKeys.join(" "));

// --- ETag Generation (Essential for Conditional Requests / 304 Responses) ---
// Create a content signature from key data that would trigger cache invalidation when changed.
const contentSignature = JSON.stringify({
  urlPath: customPage?.attributes?.urlPath || path,
  updatedAt: contentTimestamp,
  blocks: customPage?.attributes?.blocks.map((block: any) => ({
    component: block.__component,
    id: block.id,
  })),
  countryCode: casinoCountry || null,
  seo: {
    title: seo?.pageTitle,
    description: seo?.metaDescription,
  },
});

// --- Generate SHA-256 hash for ETag using Web Crypto API ---
const encoder = new TextEncoder();
const data = encoder.encode(contentSignature);
// Hash the data using SHA-256 (ensure this code runs in an async context)
const hashBuffer = await crypto.subtle.digest("SHA-256", data);
// Convert the ArrayBuffer to a hex string
const hashArray = Array.from(new Uint8Array(hashBuffer));
const contentHash = hashArray
  .map((b) => b.toString(16).padStart(2, "0"))
  .join("");
// --- End SHA-256 Hashing ---

// Create and set a proper ETag (weak validator W/ prefix is appropriate for HTML content)
const etagValue = `W/"${contentHash}"`; // Using the SHA-256 hash
Astro.response.headers.set("ETag", etagValue);

// --- Conditional Request Handling (304 Not Modified) ---
// Check for If-None-Match header to enable 304 responses
const ifNoneMatch = Astro.request.headers.get("If-None-Match");
if (ifNoneMatch === etagValue) {
  // Content hasn't changed, send back 304 Not Modified
  return new Response(null, {
    status: 304,
    headers: {
      ETag: etagValue,
      "Cache-Control":
        "public, max-age=86400, s-maxage=604800, stale-while-revalidate=3600, stale-if-error=259200",
      "Surrogate-Key": surrogateKeys.join(" "), // Resend keys for intermediate caches
      "Surrogate-Control": "max-age=604800",
      "Last-Modified": new Date(contentTimestamp).toUTCString(),
    },
  });
}

// --- Caching Directives for New Responses (200 OK) ---
// Set aggressive caching directives
// Browser cache: 1 day (max-age)
// CDN cache: 7 days (s-maxage)
// Stale-while-revalidate: 1 hour (allow serving stale while revalidating)
// Stale-if-error: 3 days (allow serving stale if origin error)
Astro.response.headers.set(
  "Cache-Control",
  "public, max-age=86400, s-maxage=604800, stale-while-revalidate=3600, stale-if-error=259200"
);

// Optional: Add Surrogate-Control header (might be useful for other CDNs like Fastly)
Astro.response.headers.set("Surrogate-Control", "max-age=604800");

// Set cache validation headers
const lastModifiedDate = new Date(contentTimestamp).toUTCString();
Astro.response.headers.set("Last-Modified", lastModifiedDate);
---

<CustomPage
  seoData={seo}
  otherSchema={combinedSchema}
  breadcrumbs={customPage.attributes?.breadcrumbs}
  customPage={customPage}
  {translationStore}
  {slotProviders}
  {casinoCountry}
  {localisation}
  {gameProviders}
  {slotCategories}
  {initialGames}
/>
