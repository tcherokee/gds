---
export const prerender = true;
import type { GetStaticPaths } from "astro";
import qs from 'qs'
import fetchApi from '../../../lib/strapi';
import MainLayout from '../../layouts/MainLayout.astro';
import { urlTranslate } from '../../../utils/data-store.util'
import { get } from 'svelte/store';
import { getTranslations } from '../../../stores/addTranslations';
import { slotProvidersQs } from "../../../qs/ssm-games"
import type { Slotprovider } from "../../../interfaces/slot-provider"
import Breadcrumb from '../../components/layout/breadcrumbs.astro'
import IntroBlock from '../../components/general/introWithImage.astro';
import SlotProviderGames from '../../components/games/slotProviderGames.astro';
import ContentBlock from '../../components/blocks/contentBlock.astro';
import CasinoSideBar from '../../components/casino/casinoSidebar.astro';
import CasinoComparison from '../../components/casino/casinoComparison.astro';
import Faqs from "../../components/general/faqs.astro";

export const getStaticPaths = (async () => {
    // Import the QS Query string for custom slugs and prepare it for the API fetch
    const slotProvidersQuery = qs.stringify(slotProvidersQs(), {encodeValuesOnly: true})
    // Request to the Fetch Function to get page data from API
	const slotProviders = await fetchApi<Slotprovider[]>({
		endpoint: 'slot-providers',
		wrappedByKey: 'data',
		query: `?${slotProvidersQuery}`
	})

    return slotProviders.map((page) => {
        return {
            params: {slug: page?.attributes?.slug},
            props: { page }
        }
    });
}) satisfies GetStaticPaths;

const { page } = Astro.props;
const { slug } = Astro.params;

const translationStore:any = get(getTranslations);

let siteID = import.meta.env.SITE_ID
let siteURL = import.meta.env.FULL_URL
let canonical = `${siteURL}${urlTranslate[siteID as keyof typeof urlTranslate]['provider-pages']}/${slug}`

const seo = {
    pageTitle: page?.attributes?.seo?.metaTitle,
    metaDescription: page?.attributes?.seo?.metaDescription,
    url: canonical
}

---
<script define:vars={{page}}>
    console.log(page)
</script>
<MainLayout seoData={seo}>

    <Breadcrumb breadcrumbs={[{ breadCrumbText: page?.attributes?.title, breadCrumbUrl: null }]} breadcrumbKey="providersBreadcrumbs" />
    <div class="featured-background pb-5">
        <IntroBlock
            data={page?.attributes?.IntroductionWithImage}
            timeDate={page?.attributes?.dateCreated}
            authorData={page?.attributes?.author}
        />

        <div class="d-flex flex-wrap">
            <SlotProviderGames slug={slug}/>
        </div>
    </div>
    <div class="relative xl:container px-2 mt-5">
        <div class="flex flex-col md:flex-row gap-x-8">
            <div class="order-last md:order-first mt-5 md:mt-0">
                {page?.attributes?.content1 &&
					<div class="content-1">
						<ContentBlock
							pageContent={page?.attributes?.content1}
						/>
					</div>
				}

				{page?.attributes?.content2 &&
					<div class="content-2">
						<ContentBlock
							pageContent={page?.attributes?.content2}
						/>
					</div>
				}

                {page?.attributes?.relatedCasinos?.data.length > 0 &&
					<CasinoComparison data={page?.attributes?.relatedCasinos?.data.slice(0, 3)} />
				}

				{page?.attributes?.content3 &&
					<div class="content-3">
						<ContentBlock
							pageContent={page?.attributes?.content3}
						/>
					</div>
				}

                {page?.attributes?.faqs.length > 0 &&
					<div class="content mt-4">
						<h2 class="mb-4">{translationStore.faq}</h2>

						 {page?.attributes?.faqs.map(faq => 
                                <Faqs data={faq} />
                        )}
					</div>
				}
            </div>
            <div class="basis-[315px] shrink-0 order-first order-last">
				<CasinoSideBar />
			</div>
        </div>
    </div>
</MainLayout> 