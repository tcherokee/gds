---
// First and Third Party Plugins
import qs from "qs";

// Types
import type { GetStaticPaths } from "astro";
import type {
  BreadcrumbData,
  Faqs,
  GameFilters,
  TProviderAttributesOnly,
  UserCountry,
} from "../../../interfaces/common/types";
import type { Slotprovider } from "../../../interfaces/slot-provider";

// Stores

// Queries
import { gamesQs, slotProvidersQs } from "../../../qs/ssm-games";

// Helpers
import fetchApi from "../../../lib/strapi";
import { urlTranslate } from "../../../utils/data-store.util";

// Components
import type { TUserGameProvider } from "../../../interfaces/games";
import ContentBlock from "../../components/blocks/contentBlock.astro";
import CasinoComparison from "../../components/casino/casinoComparison.astro";
import CasinoSideBar from "../../components/casino/casinoSidebar.astro";
import SlotProviderGames from "../../components/games/slotProviderGames.astro";
import FaqsComponent from "../../components/general/faqs.astro";
import IntroBlock from "../../components/general/introWithImage.astro";
import Breadcrumb from "../../components/layout/breadcrumbs.astro";
import MainLayout from "../../layouts/MainLayout.astro";
import { layoutQs } from "../../../qs/layout";
import type { LayoutData } from "../../../interfaces/layout";

import {
  slotCategories as slotCategoriesResponse,
  slotProviders as slotProvidersResponse,
  getTranslations,
  getLocalisation,
} from "../../../utils/api-requests";

import { getUserCountry, userCountryHandler } from "../../../utils/ip-request";

const localisation = await getLocalisation();

const userCountry = await getUserCountry();
const country =
  userCountry !== null
    ? await userCountryHandler(
        userCountry?.location?.country.toLowerCase() || ""
      )
    : null;

const casinoCountry = country !== null ? country?.sc || "" : "";

const slug = Astro.params.slug as string;

const strippedSlug = slug.replace(/\/p\d+$/, "");

const translationStore = await getTranslations();
const slotCategories = await slotCategoriesResponse();
const slotProviders = await slotProvidersResponse();

// Fetch Game Providers Filter
const gameProviders = await fetchApi<{
  id: number;
  attributes: {
    filterProviders: {
      data: TProviderAttributesOnly[];
    };
  };
}>({
  endpoint: "layout",
  wrappedByKey: "data",
  query: `?fields[0]=id&populate[filterProviders][fields][0]=slug&populate[filterProviders][populate][images][fields][0]=url`,
});

const query = qs.stringify(
  slotProvidersQs(strippedSlug, casinoCountry, localisation),
  {
    encodeValuesOnly: true,
  }
);

// let gamesQueryObj: GameFilters = {
//   limit: 18,
//   sort: "views:desc",
//   page: 1,
//   providers: [],
//   categories: [],
//   author: "",
// };

// Request to the Fetch Function to get the custom page slugs from the API
const slotProvider = await fetchApi<Slotprovider[]>({
  endpoint: "slot-providers",
  wrappedByKey: "data",
  query: `?${query}`,
});

const providerQuery = qs.stringify(gamesQs(slug, "views:desc", 1), {
  encodeValuesOnly: true,
});

const games = await fetchApi<any>({
  endpoint: "games",
  isPaginated: true,
  query: `?${providerQuery}`,
});

let combinedSchema = [];

// FAQs Schema
if (
  slotProvider[0]?.attributes?.faqs &&
  slotProvider[0]?.attributes?.faqs.length > 0
) {
  const faqSchema = {
    "@context": "https://schema.org",
    "@type": "FAQPage",
    mainEntityOfPage: {
      "@type": "WebPage",
      url: `${import.meta.env.FULL_URL}${urlTranslate[import.meta.env.SITE_ID as keyof typeof urlTranslate]["provider-pages"]}/${slug}`,
      "@id": `${import.meta.env.FULL_URL}${urlTranslate[import.meta.env.SITE_ID as keyof typeof urlTranslate]["provider-pages"]}/${slug}`,
    },
    mainEntity: slotProvider[0]?.attributes?.faqs?.map(
      ({ answer, question }) => {
        return {
          "@type": "Question",
          name: `${question}`,
          acceptedAnswer: {
            "@type": "Answer",
            text: `${answer}`,
          },
        };
      }
    ),
  };
  combinedSchema.push(faqSchema);
}

// SEO Object
const seo = {
  pageTitle: slotProvider[0]?.attributes?.seo?.metaTitle,
  metaDescription: slotProvider[0]?.attributes?.seo?.metaDescription,
  url: `${import.meta.env.FULL_URL}${urlTranslate[import.meta.env.SITE_ID as keyof typeof urlTranslate]["provider-pages"]}/${slug}`,
};

// ============= CACHE IMPLEMENTATION START =============
// Set up cache tags (using Surrogate-Key)
const surrogateKeys: string[] = [];

// --- Core Page & Content Type Tags ---
// Path-based tag (Provider-specific path tags)
surrogateKeys.push("page:provider");
surrogateKeys.push(`provider:${slug}`);
surrogateKeys.push(`provider:${strippedSlug}`);

// Content-type tag (Useful for invalidating all pages of this type)
surrogateKeys.push("type:slotprovider");

// --- Content Dependency Tags ---
// Add content-type specific tags if they exist in the page
if (games && games.data && games.data.length > 0) {
  surrogateKeys.push("content:games");
}

// --- Content Block Tags ---
// Add content block tags if present
if (slotProvider[0]?.attributes?.content1) {
  surrogateKeys.push("block:content1");
}
if (slotProvider[0]?.attributes?.content2) {
  surrogateKeys.push("block:content2");
}
if (slotProvider[0]?.attributes?.content3) {
  surrogateKeys.push("block:content3");
}

// --- Related Entity Tags ---
// Add country-specific tag if applicable
if (casinoCountry) {
  surrogateKeys.push(`country:${casinoCountry}`);
}

// --- Versioning Tag ---
// Add version or timestamp tag based on the main entry's update time
const contentTimestamp = slotProvider[0]?.attributes?.updatedAt || Date.now();
surrogateKeys.push(`version:${contentTimestamp}`);

// --- Set Headers ---
// Set Surrogate-Key header for CDN cache invalidation (e.g., GCP CDN)
// Space-separated list
Astro.response.headers.set("Surrogate-Key", surrogateKeys.join(" "));

// --- ETag Generation (Essential for Conditional Requests / 304 Responses) ---
// Create a content signature from key data that would trigger cache invalidation when changed.
const contentSignature = JSON.stringify({
  slug: slug,
  strippedSlug: strippedSlug,
  updatedAt: contentTimestamp,
  gameCount: games?.meta?.pagination?.total || 0,
  faqsCount: slotProvider[0]?.attributes?.faqs?.length || 0,
  relatedCasinosCount:
    slotProvider[0]?.attributes?.relatedCasinos?.data?.length || 0,
  countryCode: casinoCountry || "default",
  seo: {
    title: slotProvider[0]?.attributes?.seo?.metaTitle,
    description: slotProvider[0]?.attributes?.seo?.metaDescription,
  },
});

// --- Generate SHA-256 hash for ETag using Web Crypto API ---
const encoder = new TextEncoder();
const data = encoder.encode(contentSignature);
// Hash the data using SHA-256 (ensure this code runs in an async context)
const hashBuffer = await crypto.subtle.digest("SHA-256", data);
// Convert the ArrayBuffer to a hex string
const hashArray = Array.from(new Uint8Array(hashBuffer));
const contentHash = hashArray
  .map((b) => b.toString(16).padStart(2, "0"))
  .join("");
// --- End SHA-256 Hashing ---

// Create and set a proper ETag (weak validator W/ prefix is appropriate for HTML content)
const etagValue = `W/"${contentHash}"`; // Using the SHA-256 hash
Astro.response.headers.set("ETag", etagValue);

// --- Conditional Request Handling (304 Not Modified) ---
// Check for If-None-Match header to enable 304 responses
const ifNoneMatch = Astro.request.headers.get("If-None-Match");
if (ifNoneMatch === etagValue) {
  // Content hasn't changed, send back 304 Not Modified
  return new Response(null, {
    status: 304,
    headers: {
      ETag: etagValue,
      "Cache-Control":
        "public, max-age=86400, s-maxage=604800, stale-while-revalidate=3600, stale-if-error=259200",
      "Surrogate-Key": surrogateKeys.join(" "), // Resend keys for intermediate caches
      "Surrogate-Control": "max-age=604800",
      "Last-Modified": new Date(contentTimestamp).toUTCString(),
    },
  });
}

// --- Caching Directives for New Responses (200 OK) ---
// Set aggressive caching directives
// Browser cache: 1 day (max-age)
// CDN cache: 7 days (s-maxage)
// Stale-while-revalidate: 1 hour (allow serving stale while revalidating)
// Stale-if-error: 3 days (allow serving stale if origin error)
Astro.response.headers.set(
  "Cache-Control",
  "public, max-age=86400, s-maxage=604800, stale-while-revalidate=3600, stale-if-error=259200"
);

// Optional: Add Surrogate-Control header (might be useful for other CDNs like Fastly)
Astro.response.headers.set("Surrogate-Control", "max-age=604800");

// Set cache validation headers
const lastModifiedDate = new Date(contentTimestamp).toUTCString();
Astro.response.headers.set("Last-Modified", lastModifiedDate);
---

<MainLayout
  seoData={seo}
  crumbLocation="providers"
  crumbTitle={slotProvider[0]?.attributes?.title}
  crumbUrl={`${import.meta.env.FULL_URL}${urlTranslate[import.meta.env.SITE_ID as keyof typeof urlTranslate]["provider-pages"]}/${slug}`}
  otherSchema={combinedSchema}
>
  <Breadcrumb
    breadcrumbs={[
      {
        breadCrumbText: slotProvider[0]?.attributes?.title,
        breadCrumbUrl: null,
      },
    ]}
    breadcrumbKey="providersBreadcrumbs"
  />
  <div class="featured-background curve pb-5">
    <IntroBlock
      data={slotProvider[0]?.attributes?.IntroductionWithImage}
      timeDate={slotProvider[0]?.attributes?.dateCreated}
      authorData={slotProvider[0]?.attributes?.author}
      {translationStore}
    />

    <div class="d-flex flex-wrap relative z-10">
      <SlotProviderGames
        slug={slug}
        {slotCategories}
        gameProviders={gameProviders.attributes.filterProviders
          ? gameProviders.attributes.filterProviders.data
          : []}
        {translationStore}
        {slotProviders}
      />
    </div>
  </div>
  <div class="relative xl:container px-2 mt-5">
    <div class="flex flex-col md:flex-row gap-x-8">
      <div class="order-last md:order-first mt-5 md:mt-0">
        {
          slotProvider[0]?.attributes?.content1 && (
            <div class="content-1">
              <ContentBlock
                pageContent={slotProvider[0]?.attributes?.content1}
              />
            </div>
          )
        }

        {
          slotProvider[0]?.attributes?.content2 && (
            <div class="content-2">
              <ContentBlock
                pageContent={slotProvider[0]?.attributes?.content2}
              />
            </div>
          )
        }

        {
          slotProvider[0]?.attributes?.relatedCasinos?.data.length > 0 && (
            <CasinoComparison
              data={slotProvider[0]?.attributes?.relatedCasinos?.data.slice(
                0,
                3
              )}
              {translationStore}
            />
          )
        }

        {
          slotProvider[0]?.attributes?.content3 && (
            <div class="content-3">
              <ContentBlock
                pageContent={slotProvider[0]?.attributes?.content3}
              />
            </div>
          )
        }

        {
          slotProvider[0]?.attributes?.faqs.length > 0 && (
            <div class="content mt-4">
              <h2 class="mb-4">{translationStore?.faq}</h2>

              {slotProvider[0]?.attributes?.faqs.map((faq: Faqs) => (
                <FaqsComponent data={faq} />
              ))}
            </div>
          )
        }
      </div>
      <div class="basis-[315px] shrink-0 order-first order-last">
        <CasinoSideBar {casinoCountry} {translationStore} />
      </div>
    </div>
  </div>
</MainLayout>
