---
export const prerender = true;

// First and Third Party Plugins
import qs from "qs";

// Types
import type { GetStaticPaths } from "astro";
import type {
  BreadcrumbData,
  Faqs,
  TProviderAttributesOnly,
} from "../../../interfaces/common/types";
import type { Slotprovider } from "../../../interfaces/slot-provider";

// Stores

// Queries
import { gamesQs, slotProvidersQs } from "../../../qs/ssm-games";

// Helpers
import fetchApi from "../../../lib/strapi";
import { urlTranslate } from "../../../utils/data-store.util";

// Components
import type { TUserGameProvider } from "../../../interfaces/games";
import ContentBlock from "../../components/blocks/contentBlock.astro";
import CasinoComparison from "../../components/casino/casinoComparison.astro";
import CasinoSideBar from "../../components/casino/casinoSidebar.astro";
import SlotProviderGames from "../../components/games/slotProviderGames.astro";
import FaqsComponent from "../../components/general/faqs.astro";
import IntroBlock from "../../components/general/introWithImage.astro";
import Breadcrumb from "../../components/layout/breadcrumbs.astro";
import MainLayout from "../../layouts/MainLayout.astro";
import { layoutQs } from "../../../qs/layout";
import type { LayoutData } from "../../../interfaces/layout";

import {
  slotCategories as slotCategoriesResponse,
  slotProviders as slotProvidersResponse,
  getTranslations,
} from "../../../utils/api-requests";

const translationStore = await getTranslations();
const slotCategories = await slotCategoriesResponse();
const slotProviders = await slotProvidersResponse();

const gameProviders = await fetchApi<{
  id: number;
  attributes: {
    filterProviders: {
      data: TProviderAttributesOnly[];
    };
  };
}>({
  endpoint: "layout",
  wrappedByKey: "data",
  query: `?fields[0]=id&populate[filterProviders][fields][0]=slug&populate[filterProviders][populate][images][fields][0]=url`,
});

export const getStaticPaths = (async () => {
  // Import the QS Query string for custom slugs and prepare it for the API fetch
  const slotProvidersQuery = qs.stringify(slotProvidersQs(), {
    encodeValuesOnly: true,
  });
  // Request to the Fetch Function to get page data from API
  const slotProviders = await fetchApi<Slotprovider[]>({
    endpoint: "slot-providers",
    wrappedByKey: "data",
    query: `?${slotProvidersQuery}`,
  });

  // Request to the Fetch Function to get layout data from API
  const layout = qs.stringify(layoutQs(), { encodeValuesOnly: true });
  const layoutData = await fetchApi<LayoutData>({
    endpoint: "layout",
    wrappedByKey: "data",
    query: `?${layout}`,
  });

  let prerenderPath: any[] = [];
  for (let i = 0; i < slotProviders.length; i++) {
    const slug = slotProviders[i]?.attributes?.slug;
    const query = qs.stringify(gamesQs(slug, "views:desc", 1), {
      encodeValuesOnly: true,
    });
    const games = await fetchApi<any>({
      endpoint: "games",
      isPaginated: true,
      query: `?${query}`,
    });

    prerenderPath.push({
      params: { slug },
      props: { page: slotProviders[i], layoutData },
    });

    if (
      games &&
      games.meta?.pagination &&
      games.meta?.pagination.pageCount > 1
    ) {
      for (let p = 1; p <= games.meta?.pagination?.pageCount; p++) {
        prerenderPath.push({
          params: { slug: `${slug}/p${p}` },
          props: { page: slotProviders[i], layoutData },
        });
      }
    }
  }

  return prerenderPath;

  //   return slotProviders.map((page) => {
  //     return {
  //       params: { slug: page?.attributes?.slug },
  //       props: { page },
  //     };
  //   });
}) satisfies GetStaticPaths;

// Set Up Translation Store
// const translationStore: TranslationData = getTranslations.get();

const { page, layoutData } = Astro.props;
const { slug } = Astro.params;

let siteID = import.meta.env.SITE_ID;
let siteURL = import.meta.env.FULL_URL;
let canonical = `${siteURL}${urlTranslate[siteID as keyof typeof urlTranslate]["provider-pages"]}/${slug}`;

const seo = {
  pageTitle: page?.attributes?.seo?.metaTitle,
  metaDescription: page?.attributes?.seo?.metaDescription,
  url: canonical,
};

let pageSchema = [];

let pageBreadcrum: BreadcrumbData[] = [
  {
    breadCrumbText: page?.attributes?.title,
    breadCrumbUrl: "",
  },
];

//Breadcrum Schema
if (layoutData) {
  pageBreadcrum.unshift(...layoutData?.attributes?.providersBreadcrumbs);
}
const breadSchema = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  itemListElement: [...pageBreadcrum]
    .filter((elem) => elem.breadCrumbText.toLowerCase() !== "home")
    .map((bread, i) => {
      return {
        "@type": "ListItem",
        position: i + 1,
        name: bread?.breadCrumbText,
        ...(bread?.breadCrumbUrl && { item: bread?.breadCrumbUrl }),
      };
    }),
};
pageSchema.push(breadSchema);

// FAQ Schema
const allFAQs: Faqs[] = page?.attributes?.faqs;
if (allFAQs.length > 0) {
  const faqSchema = {
    "@context": "https://schema.org",
    "@type": "FAQPage",
    mainEntity: allFAQs.map(({ answer, question }) => {
      return {
        "@type": "Question",
        name: `${question}`,
        acceptedAnswer: {
          "@type": "Answer",
          text: `${answer}`,
        },
      };
    }),
  };
  pageSchema.push(faqSchema);
}
---

<MainLayout seoData={seo} schemaData={pageSchema}>
  <Breadcrumb
    breadcrumbs={[
      { breadCrumbText: page?.attributes?.title, breadCrumbUrl: null },
    ]}
    breadcrumbKey="providersBreadcrumbs"
  />
  <div class="featured-background curve pb-5">
    <IntroBlock
      data={page?.attributes?.IntroductionWithImage}
      timeDate={page?.attributes?.dateCreated}
      authorData={page?.attributes?.author}
      {translationStore}
    />

    <div class="d-flex flex-wrap relative z-10">
      <SlotProviderGames
        slug={slug}
        {slotCategories}
        gameProviders={gameProviders.attributes.filterProviders
          ? gameProviders.attributes.filterProviders.data
          : []}
        {translationStore}
        {slotProviders}
      />
    </div>
  </div>
  <div class="relative xl:container px-2 mt-5">
    <div class="flex flex-col md:flex-row gap-x-8">
      <div class="order-last md:order-first mt-5 md:mt-0">
        {
          page?.attributes?.content1 && (
            <div class="content-1">
              <ContentBlock pageContent={page?.attributes?.content1} />
            </div>
          )
        }

        {
          page?.attributes?.content2 && (
            <div class="content-2">
              <ContentBlock pageContent={page?.attributes?.content2} />
            </div>
          )
        }

        {
          page?.attributes?.relatedCasinos?.data.length > 0 && (
            <CasinoComparison
              data={page?.attributes?.relatedCasinos?.data.slice(0, 3)}
              {translationStore}
            />
          )
        }

        {
          page?.attributes?.content3 && (
            <div class="content-3">
              <ContentBlock pageContent={page?.attributes?.content3} />
            </div>
          )
        }

        {
          page?.attributes?.faqs.length > 0 && (
            <div class="content mt-4">
              <h2 class="mb-4">{translationStore?.faq}</h2>

              {page?.attributes?.faqs.map((faq: { data: Faqs }) => (
                <FaqsComponent data={faq} />
              ))}
            </div>
          )
        }
      </div>
      <div class="basis-[315px] shrink-0 order-first order-last">
        <CasinoSideBar {translationStore} />
      </div>
    </div>
  </div>
</MainLayout>
