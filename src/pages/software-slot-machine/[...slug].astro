---
// First and Third Party Plugins
import qs from "qs";

// Types
import type { GetStaticPaths } from "astro";
import type {
  BreadcrumbData,
  Faqs,
  GameFilters,
  TProviderAttributesOnly,
  UserCountry,
} from "../../../interfaces/common/types";
import type { Slotprovider } from "../../../interfaces/slot-provider";

// Stores

// Queries
import { gamesQs, slotProvidersQs } from "../../../qs/ssm-games";

// Helpers
import fetchApi from "../../../lib/strapi";
import { urlTranslate } from "../../../utils/data-store.util";

// Components
import type { TUserGameProvider } from "../../../interfaces/games";
import ContentBlock from "../../components/blocks/contentBlock.astro";
import CasinoComparison from "../../components/casino/casinoComparison.astro";
import CasinoSideBar from "../../components/casino/casinoSidebar.astro";
import SlotProviderGames from "../../components/games/slotProviderGames.astro";
import FaqsComponent from "../../components/general/faqs.astro";
import IntroBlock from "../../components/general/introWithImage.astro";
import Breadcrumb from "../../components/layout/breadcrumbs.astro";
import MainLayout from "../../layouts/MainLayout.astro";
import { layoutQs } from "../../../qs/layout";
import type { LayoutData } from "../../../interfaces/layout";

import {
  slotCategories as slotCategoriesResponse,
  slotProviders as slotProvidersResponse,
  getTranslations,
  getLocalisation,
} from "../../../utils/api-requests";

import {
  getUserCountryByIP,
  userCountryHandler,
} from "../../../utils/ip-request";

const localisation = await getLocalisation();

let userCountry: UserCountry | undefined;
let country: { sc: string } | undefined;
let casinoCountry: string | undefined;

const clientIP =
  Astro.request.headers.get("x-forwarded-for") || "102.216.183.41";

if (clientIP === "102.216.183.41") {
  userCountry = await getUserCountryByIP(clientIP);

  country = await userCountryHandler(
    userCountry?.location?.country.toLowerCase() || ""
  );

  casinoCountry = country?.sc || "";
} else {
  casinoCountry = "rod";
}

const slug = Astro.params.slug as string;

const strippedSlug = slug.replace(/\/p\d+$/, "");

const translationStore = await getTranslations();
const slotCategories = await slotCategoriesResponse();
const slotProviders = await slotProvidersResponse();

// Fetch Game Providers Filter
const gameProviders = await fetchApi<{
  id: number;
  attributes: {
    filterProviders: {
      data: TProviderAttributesOnly[];
    };
  };
}>({
  endpoint: "layout",
  wrappedByKey: "data",
  query: `?fields[0]=id&populate[filterProviders][fields][0]=slug&populate[filterProviders][populate][images][fields][0]=url`,
});

const query = qs.stringify(
  slotProvidersQs(strippedSlug, casinoCountry, localisation),
  {
    encodeValuesOnly: true,
  }
);

// let gamesQueryObj: GameFilters = {
//   limit: 18,
//   sort: "views:desc",
//   page: 1,
//   providers: [],
//   categories: [],
//   author: "",
// };

// Request to the Fetch Function to get the custom page slugs from the API
const slotProvider = await fetchApi<Slotprovider[]>({
  endpoint: "slot-providers",
  wrappedByKey: "data",
  query: `?${query}`,
});

const providerQuery = qs.stringify(gamesQs(slug, "views:desc", 1), {
  encodeValuesOnly: true,
});

const games = await fetchApi<any>({
  endpoint: "games",
  isPaginated: true,
  query: `?${providerQuery}`,
});

let combinedSchema = [];

// FAQs Schema
if (
  slotProvider[0]?.attributes?.faqs &&
  slotProvider[0]?.attributes?.faqs.length > 0
) {
  const faqSchema = {
    "@context": "https://schema.org",
    "@type": "FAQPage",
    mainEntity: slotProvider[0]?.attributes?.faqs?.map(
      ({ answer, question }) => {
        return {
          "@type": "Question",
          name: `${question}`,
          acceptedAnswer: {
            "@type": "Answer",
            text: `${answer}`,
          },
        };
      }
    ),
  };
  combinedSchema.push(faqSchema);
}

// SEO Object
const seo = {
  pageTitle: slotProvider[0]?.attributes?.seo?.metaTitle,
  metaDescription: slotProvider[0]?.attributes?.seo?.metaDescription,
  url: `${import.meta.env.FULL_URL}${urlTranslate[import.meta.env.SITE_ID as keyof typeof urlTranslate]["provider-pages"]}/${slug}`,
};

// Tell the browser to always check the freshness of the cache
Astro.response.headers.set(
  "Cache-Control",
  "public, max-age=0, must-revalidate"
);

// CDN Cache Control
Astro.response.headers.set(
  "Cache-Control",
  "public, max-age=300, s-maxage=3600, stale-while-revalidate=30"
);
---

<MainLayout
  seoData={seo}
  crumbLocation="providers"
  crumbTitle={slotProvider[0]?.attributes?.title}
  otherSchema={combinedSchema}
>
  <Breadcrumb
    breadcrumbs={[
      {
        breadCrumbText: slotProvider[0]?.attributes?.title,
        breadCrumbUrl: null,
      },
    ]}
    breadcrumbKey="providersBreadcrumbs"
  />
  <div class="featured-background curve pb-5">
    <IntroBlock
      data={slotProvider[0]?.attributes?.IntroductionWithImage}
      timeDate={slotProvider[0]?.attributes?.dateCreated}
      authorData={slotProvider[0]?.attributes?.author}
      {translationStore}
    />

    <div class="d-flex flex-wrap relative z-10">
      <SlotProviderGames
        slug={slug}
        {slotCategories}
        gameProviders={gameProviders.attributes.filterProviders
          ? gameProviders.attributes.filterProviders.data
          : []}
        {translationStore}
        {slotProviders}
      />
    </div>
  </div>
  <div class="relative xl:container px-2 mt-5">
    <div class="flex flex-col md:flex-row gap-x-8">
      <div class="order-last md:order-first mt-5 md:mt-0">
        {
          slotProvider[0]?.attributes?.content1 && (
            <div class="content-1">
              <ContentBlock
                pageContent={slotProvider[0]?.attributes?.content1}
              />
            </div>
          )
        }

        {
          slotProvider[0]?.attributes?.content2 && (
            <div class="content-2">
              <ContentBlock
                pageContent={slotProvider[0]?.attributes?.content2}
              />
            </div>
          )
        }

        {
          slotProvider[0]?.attributes?.relatedCasinos?.data.length > 0 && (
            <CasinoComparison
              data={slotProvider[0]?.attributes?.relatedCasinos?.data.slice(
                0,
                3
              )}
              {translationStore}
            />
          )
        }

        {
          slotProvider[0]?.attributes?.content3 && (
            <div class="content-3">
              <ContentBlock
                pageContent={slotProvider[0]?.attributes?.content3}
              />
            </div>
          )
        }

        {
          slotProvider[0]?.attributes?.faqs.length > 0 && (
            <div class="content mt-4">
              <h2 class="mb-4">{translationStore?.faq}</h2>

              {slotProvider[0]?.attributes?.faqs.map((faq: Faqs) => (
                <FaqsComponent data={faq} />
              ))}
            </div>
          )
        }
      </div>
      <div class="basis-[315px] shrink-0 order-first order-last">
        <CasinoSideBar {casinoCountry} {translationStore} />
      </div>
    </div>
  </div>
</MainLayout>
