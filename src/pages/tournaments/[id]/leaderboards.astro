---
import MainLayout from "../../../layouts/MainLayout.astro";
import Breadcrumbs from "../../../components/layout/breadcrumbs.astro";
import { tournamentApi } from "../../../../lib/tournamentapi";
import LeaderboardCard from "../../../components/tournaments/leaderboardCard.svelte";
import { Link } from "astro-link";

interface LeaderboardResponse {
  data: {
    scoreboard: Array<{
      position: number;
      playerName: string;
      playerScore: number;
      displayPrize: number;
    }>;
  };
}

const id = Astro.params.id as string;
const fullUrl = import.meta.env.PUBLIC_FULL_URL;
let leaderboards: {
  scoreboard: Array<{
    position: number;
    playerName: string;
    playerScore: number;
    displayPrize: number;
  }>;
} = { scoreboard: [] };
let error = null;

// Get current page from URL params or default to 1
const currentPage = Number(Astro.url.searchParams.get("page")) || 1;
const itemsPerPage = 15;

const tournamentId = Number(id);

// API functions for different tournament types
const getTournamentLeaderboards = async () => {
  return tournamentApi<LeaderboardResponse>(
    `getTournamentLeaderBoard?tournament_id=${tournamentId}`
  );
};

// Fetch all tournament data
try {
  const leaderboardsResponse = await getTournamentLeaderboards();
  if (leaderboardsResponse?.data?.scoreboard) {
    leaderboards.scoreboard = leaderboardsResponse.data.scoreboard;
  }
} catch (e) {
  console.error("Error fetching tournaments:", e);
  error = e instanceof Error ? e.message : "Unknown error occurred";
}

// Calculate pagination
const totalPlayers = leaderboards.scoreboard.length;
console.log("Total players:", totalPlayers);

// Only paginate if we have more than 3 players
const playersToPage = Math.max(0, totalPlayers - 3);
const totalPages = Math.max(1, Math.ceil(playersToPage / itemsPerPage));
console.log("Total pages:", totalPages);

// Get paginated players (excluding top 3)
const startIndex = (currentPage - 1) * itemsPerPage;
const endIndex = startIndex + itemsPerPage;
const paginatedPlayers = leaderboards.scoreboard
  .slice(3)
  .slice(startIndex, endIndex);
console.log("Paginated players:", paginatedPlayers.length);

// Get top 3 players
const topThreePlayers = leaderboards.scoreboard.slice(
  0,
  Math.min(3, totalPlayers)
);

// Generate pagination range
const generatePaginationRange = (current: number, total: number) => {
  const delta = 2;
  const range: number[] = [];
  const rangeWithDots: (number | string)[] = [];
  let lastNumber: number | null = null;

  range.push(1);

  if (total <= 1) return range;

  for (let i = current - delta; i <= current + delta; i++) {
    if (i < total && i > 1) {
      range.push(i);
    }
  }
  range.push(total);

  for (let i = 0; i < range.length; i++) {
    if (lastNumber !== null) {
      const currentNumber = range[i];
      if (currentNumber - lastNumber === 2) {
        rangeWithDots.push(lastNumber + 1);
      } else if (currentNumber - lastNumber !== 1) {
        rangeWithDots.push('...');
      }
    }
    rangeWithDots.push(range[i]);
    lastNumber = range[i];
  }

  return rangeWithDots;
};

const paginationRange = generatePaginationRange(currentPage, totalPages);

console.log("Pagination state:", {
  currentPage,
  totalPages,
  hasPlayers: totalPlayers > 0,
  shouldShowPagination: totalPages > 1,
  paginationRange,
});
---

<MainLayout seoData={{}}>
  <Breadcrumbs
    breadcrumbs={[
      { id: 1, breadCrumbText: "Home", breadCrumbUrl: "/" },
      {
        id: 2,
        breadCrumbText: "Tournaments",
        breadCrumbUrl: `${fullUrl}/tournaments`,
      },
    ]}
  />
  <div class="curve rounded-b-3xl pb-3">
    <div class="section-wrapper relative z-10">
      <div class="mx-auto p-8 max-w-[800px]">
        <h1 class="text-center mb-8">
          Tournament Leaderboard
        </h1>
        {
          totalPlayers > 0 ? (
            <>
              <div class="mb-8 flex gap-3 p-4 bg-white/10 backdrop-blur-md rounded-2xl border border-white/20 w-full box-border">
                {topThreePlayers.map((player) => (
                  <LeaderboardCard
                    client:load
                    rank={player.position}
                    username={player.playerName}
                    points={player.playerScore}
                    prize={player.displayPrize}
                    isTopThree={true}
                  />
                ))}
              </div>
              <div class="other-players">
                {paginatedPlayers.map((player) => (
                  <LeaderboardCard
                    client:load
                    rank={player.position}
                    username={player.playerName}
                    points={player.playerScore}
                    prize={player.displayPrize}
                  />
                ))}
              </div>
              {/* pagination */}
              {totalPages > 1 && (
                <div class="mt-8">
                  <nav
                    aria-label="Page navigation"
                    class="pagination-wrapper mt-3"
                  >
                    <ul class="flex items-center justify-center gap-2">
                      {currentPage > 1 && (
                        <li class="page-item">
                          <Link
                            class="page-link px-3 py-2 bg-white/90 rounded hover:bg-white/100 transition-colors"
                            href={`/tournaments/${id}/leaderboards?page=${currentPage - 1}`}
                          >
                            Previous
                          </Link>
                        </li>
                      )}

                      {paginationRange.map((pageNum, index) => (
                        <li
                          class={`page-item ${pageNum === currentPage ? "active" : ""}`}
                        >
                          {pageNum === "..." ? (
                            <span class="px-3 py-2">{pageNum}</span>
                          ) : (
                            <Link
                              class={`page-link px-3 py-2 rounded transition-colors ${
                                pageNum === currentPage
                                  ? "bg-primary text-white"
                                  : "bg-white/90 hover:bg-white/100"
                              }`}
                              href={`/tournaments/${id}/leaderboards?page=${pageNum}`}
                            >
                              {pageNum}
                            </Link>
                          )}
                        </li>
                      ))}

                      {currentPage < totalPages && (
                        <li class="page-item">
                          <Link
                            class="page-link px-3 py-2 bg-white/90 rounded hover:bg-white/100 transition-colors"
                            href={`/tournaments/${id}/leaderboards?page=${currentPage + 1}`}
                          >
                            Next
                          </Link>
                        </li>
                      )}
                    </ul>
                  </nav>
                </div>
              )}
            </>
          ) : (
            <p class="text-center text-gray-500">
              No leaderboard data available
            </p>
          )
        }
      </div>
    </div>
  </div>
</MainLayout>
