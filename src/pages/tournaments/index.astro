---
import qs from "qs";
import fetchApi from "../../../lib/strapi";
import MainLayout from "../../layouts/MainLayout.astro";
import { getTranslations } from "../../../utils/api-requests";
import { tournamentApi } from "../../../lib/tournamentapi";
import type {
  Tournament,
  TournamentResponse,
  TournamentPageAttributes,
} from "../../../interfaces/tournaments";
import { tournamentsQs } from "../../../qs/tournaments";
import PastResults from "../../components/tournaments/pastResults.astro";
import Breadcrumb from "../../components/layout/breadcrumbs.astro";
import TournamentCard from "../../components/tournaments/tournamentCard.svelte";
import Images from "../../components/helpers/images.astro";
import Faqs from "../../components/general/faqs.astro";
const translationStore = await getTranslations();

const query = qs.stringify(tournamentsQs(), { encodeValuesOnly: true });

const tournamentContent = await fetchApi<TournamentPageAttributes>({
  endpoint: "tournament",
  wrappedByKey: "data",
  query: `?${query}`,
});

console.log(JSON.stringify(tournamentContent, null, 2));

let tournaments: Tournament[] = [];
let tournamentResults: Tournament[] = [];
let liveTournamentResults: Tournament[] = [];
let error = null;

const getTournaments = async () => {
  return tournamentApi<TournamentResponse>("getTournamentFullSchedule");
};

const getTournamentResults = async () => {
  return tournamentApi<TournamentResponse>("getTournamentResults");
};

const getLiveTournament = async () => {
  return tournamentApi<TournamentResponse>("getLiveTournaments");
};

try {
  const tournamentResponse = await getTournaments();
  const tournamentResultsResponse = await getTournamentResults();
  const liveTournamentResponse = await getLiveTournament();
  tournaments = tournamentResponse.data || [];
  tournamentResults = tournamentResultsResponse.data || [];
  liveTournamentResults = liveTournamentResponse.data || [];
} catch (e) {
  console.error("Error fetching tournaments:", e);
  error = e instanceof Error ? e.message : "Unknown error occurred";
}

// Fetch active tournaments

const seo = {
  pageTitle: translationStore?.tournamentPageTitle || "Tournaments",
  metaDescription:
    translationStore?.tournamentPageDescription ||
    "View all active tournaments",
  url: `${import.meta.env.PUBLIC_FULL_URL}/tournaments`,
};

// Cache Control Headers
Astro.response.headers.set(
  "Cache-Control",
  "public, max-age=0, must-revalidate"
);

Astro.response.headers.set(
  "Cache-Control",
  "public, max-age=300, s-maxage=3600, stale-while-revalidate=30"
);

const breadcrumbs = [
  { title: translationStore?.home || "Home", href: "/" },
  {
    title: translationStore?.tournaments || "Tournaments",
    href: "/tournaments",
    current: true,
  },
];
---

<MainLayout seoData={seo}>
  <Breadcrumb
    breadcrumbs={[
      { id: 1, breadCrumbText: "Home", breadCrumbUrl: "/" },
      { id: 2, breadCrumbText: "Tournaments", breadCrumbUrl: null },
    ]}
  />
  <div class="featured-background curve">
    <section
      class="bg-casino-gradient pt-24 pb-12 px-4 text-center text-white relative"
    >
      <h1 class="text-5xl md:text-6xl mb-4 font-bold">
        {tournamentContent?.attributes?.tournamentPageHeader}
      </h1>
      <p class="text-xl md:text-2xl text-white/90 max-w-3xl mx-auto">
        {tournamentContent?.attributes?.tournamentPageSubHeader}
      </p>
      <h2 class="mt-24 mb-12 font-bold text-white">How To Get Involved</h2>
      <div class="grid grid-cols-1 md:grid-cols-3 gap-8 max-w-6xl mx-auto">
        {
          tournamentContent?.attributes?.tournamentRegisterSteps?.map(
            (step, index) => (
              <div class="p-2.5 bg-white/5 rounded-2xl backdrop-blur-lg transition-all duration-300 ease-in-out hover:scale-105">
                <div class="bg-white/10 m-[1.5px] p-6 rounded-xl relative overflow-hidden">
                  {/* Background Image with Darker Overlay */}
                  {step.backgroundImage?.data?.attributes?.url && (
                    <div class="absolute inset-0 -z-10">
                      <Images
                        src={step.backgroundImage.data.attributes.url}
                        imageWidth={360}
                        imageHeight={250}
                        classes="w-full h-full object-cover"
                        alt={`Step ${index + 1} background`}
                      />
                      <div class="absolute inset-0 bg-background-900/80" />
                    </div>
                  )}

                  {/* Content */}
                  <div class="relative z-10">
                    <div class="flex justify-center items-center mb-4">
                      {/* <Images
                        src={step.icon?.data?.attributes?.url}
                        imageWidth={50}
                        imageHeight={50}
                        classes="rounded-lg"
                        alt={`Step ${index + 1} icon`}
                      /> */}
                    </div>
                    <h3 class="text-xl text-white mb-4 text-center">
                      {index + 1}. {step.heading}
                    </h3>
                    <p class="text-white/80 leading-relaxed text-center">
                      {step.content}
                    </p>
                  </div>
                </div>
              </div>
            )
          )
        }
      </div>
      <div class="flex flex-col items-center justify-center mt-5">
        <p class="text-white text-sm mb-3">In partnership with</p>
        <Images
          src={tournamentContent?.attributes?.partnerships.data[0]?.attributes?.url}
          imageWidth={110}
          imageHeight={48}
          classes="rounded-lg"
          alt="Pragmatic Play Logo"
        />
      </div>
    </section>
  </div>

  <div class="xl:container content-auto px-2 pt-5">
    <section class="py-20 px-4">
      <div class="max-w-6xl mx-auto">
        <h2 class="text-4xl font-bold mb-12 text-center">Live Tournaments</h2>
        <div class="grid md:grid-cols-3 gap-8">
          {
            liveTournamentResults.map((tournament) => (
              <TournamentCard client:load tournament={tournament} />
            ))
          }
        </div>
      </div>
    </section>

    <PastResults tournaments={tournamentResults} />

    <section class="py-20 px-4 bg-gray-800">
      <div class="mx-auto">
        <h2 class="text-4xl font-bold mb-12 text-center">
          Frequently Asked Questions
        </h2>
        <div class="space-y-4">
          {
            tournamentContent?.attributes?.faqs.map((faq) => (
              <Faqs data={faq} />
            ))
          }
        </div>
      </div>
    </section>
  </div>
</MainLayout>
