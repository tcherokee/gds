---
import type { Tournament } from "../../../interfaces/tournaments";
import Breadcrumbs from "../../components/layout/breadcrumbs.astro";
import TournamentGamePlayer from "../../components/tournaments/tournamentGamePlayer.svelte";
import MainLayout from "../../layouts/MainLayout.astro";

const slug = Astro.params.slug as string;
const fullUrl = import.meta.env.PUBLIC_FULL_URL;

// Check if slug is a valid number
if (isNaN(Number(slug))) {
  return Astro.redirect(`${fullUrl}/tournaments/`);
}

const tournamentId = Number(slug);

console.log(
  "GET_TOURNAMENT_API:",
  `${fullUrl}/api/pragmatic-api/get-tournament/?` +
    new URLSearchParams({ tournament_id: tournamentId.toString() })
);
const getTournamentData = async () => {
  try {
    const res = await fetch(
      `${fullUrl}/api/pragmatic-api/get-tournament/?` +
        new URLSearchParams({ tournament_id: tournamentId.toString() })
    );

    if (!res.ok) {
      throw new Error(`HTTP error! status: ${res.status}`);
    }

    const data = await res.json();

    if (!data || !data.data) {
      throw new Error("Tournament data not found");
    }

    return data.data;
  } catch (error) {
    console.error("Error fetching tournament data:", error);
    return Astro.redirect(`${fullUrl}/tournaments/`);
  }
};

let tournamentData: Tournament;
try {
  tournamentData = await getTournamentData();

  if (!tournamentData) {
    return Astro.redirect(`${fullUrl}/tournaments/`);
  }
} catch (error) {
  console.error("Error in tournament page:", error);
  return Astro.redirect(`${fullUrl}/tournaments/`);
}
---

<script define:vars={{ tournamentData }}>
  console.log("tournamentData", tournamentData);
</script>

<MainLayout seoData={{}}>
  <Breadcrumbs
    breadcrumbs={[
      { id: 1, breadCrumbText: "Home", breadCrumbUrl: "/" },
      {
        id: 2,
        breadCrumbText: "Tournaments",
        breadCrumbUrl: `${fullUrl}/tournaments`,
      },
      {
        id: 3,
        breadCrumbText: `${tournamentId}`,
        breadCrumbUrl: null,
      },
    ]}
  />
  <div class="curve rounded-b-3xl pb-3">
    <div class="section-wrapper relative z-10">
      <TournamentGamePlayer
        tournamentId={tournamentId}
        tournament={tournamentData}
        client:load
      />
    </div>
  </div>
</MainLayout>
