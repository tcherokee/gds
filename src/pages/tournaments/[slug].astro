---
import type {
  SingleTournamentResponse,
  Tournament,
} from "../../../interfaces/tournaments";
import { tournamentApi } from "../../../lib/tournamentapi";
import Breadcrumbs from "../../components/layout/breadcrumbs.astro";
import TournamentGamePlayer from "../../components/tournaments/tournamentGamePlayer.svelte";
import MainLayout from "../../layouts/MainLayout.astro";

const slug = Astro.params.slug as string;
const fullUrl = import.meta.env.PUBLIC_FULL_URL;

// Check if slug is a valid number
if (isNaN(Number(slug))) {
  return Astro.redirect(`${fullUrl}/tournaments/`);
}

const tournamentId = Number(slug);

const opts = {
  headers: {
    "Content-Type": "application/json",
    Accept: "application/json",
    Authorization: `${import.meta.env.PUBLIC_TOURNAMENT_AUTH_TOKEN}`,
    license: `${import.meta.env.PUBLIC_TOURNAMENT_LICENSE_KEY}`,
  },
};

const res = await fetch(
  `${import.meta.env.PUBLIC_TOURNAMENT_API_URL}getTournamentDataById?tournament_id=${tournamentId}`,
  opts
);
const trd = await res.json();
console.log("TRD", trd);

// const tr = await fetch(
//   `${import.meta.env.PUBLIC_FULL_URL}/api/pragmatic-api/get-tournament?` +
//     new URLSearchParams({
//       tournament_id: tournamentId.toString(),
//     })
// );
// const trd = await tr.json();
// console.log("TRD", trd);

const tournamentData: Tournament = trd.data;
// const getTournaments = async () => {
//   return tournamentApi<SingleTournamentResponse>(
//     `getTournamentDataById?` +
//       new URLSearchParams({
//         tournament_id: tournamentId.toString(),
//       })
//   );
// };
// try {
//   const tournamentResponse = await getTournaments();
//   if (!tournamentResponse.data) {
//     // return Astro.redirect(`${fullUrl}/tournaments/`);
//   }
//   tournamentData = tournamentResponse.data;
// } catch (e) {
//   console.error("Error fetching tournaments:", e);
//   // return Astro.redirect(`${fullUrl}/tournaments/`);
// }
---

<script define:vars={{ tournamentData }}>
  console.log("tournamentData", tournamentData);
</script>
<MainLayout seoData={{}}>
  <Breadcrumbs
    breadcrumbs={[
      { id: 1, breadCrumbText: "Home", breadCrumbUrl: "/" },
      {
        id: 2,
        breadCrumbText: "Tournaments",
        breadCrumbUrl: `${fullUrl}/tournaments`,
      },
      {
        id: 3,
        breadCrumbText: `${tournamentData.name}`,
        breadCrumbUrl: null,
      },
    ]}
  />
  <div class="curve rounded-b-3xl pb-3">
    <div class="section-wrapper relative z-10">
      <TournamentGamePlayer
        tournamentId={tournamentId}
        tournament={tournamentData}
        client:load
      />
    </div>
  </div>
</MainLayout>
