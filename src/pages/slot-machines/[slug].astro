---

import qs from 'qs'
import Icon from 'astro-icon'
import MainLayout from '../../layouts/MainLayout.astro';
import { urlTranslate, GameInfoHeader } from '../../../utils/data-store.util'
import fetchApi from '../../../lib/strapi';
import { get } from 'svelte/store';
import { getTranslations } from '../../../stores/addTranslations';
import { gamepageQs } from "../../../qs/game-page"
import type { Gamepage } from "../../../interfaces/game-page"
import { CleanGamesForGamePage } from '../../../utils/utilities.util'
import Breadcrumb from '../../components/layout/breadcrumbs.astro'
import GameListBlock from '../../components/blocks/gameListBlock.astro';
import CasinoTable from '../../components/casino/casinoTable.astro';
import HowTo from '../../components/general/howTo.astro';
import ContentBlock from '../../components/blocks/contentBlock.astro';
import ProsCons from '../../components/general/proCons.astro'
import CasinoSideBar from '../../components/casino/casinoSidebar.astro';
import ImageCarousel from '../../components/general/imageCarousel.svelte';
import Faqs from '../../components/general/faqs.astro';
import GamePlayer from '../../components/games/game-player.svelte'
import QuickLinks from '../../components/helpers/quicklinks.astro'

const { slug } = Astro.params; //get the game slug from the page url
const query = qs.stringify(gamepageQs(slug), {encodeValuesOnly: true})

let schema: any = null
let fullscreen: boolean = false
let startGame: boolean = false
let userRating: number
let isRatingDisabled: boolean = false
let iframeWrapper: any
let reportFormSubmitting: boolean = false
let reportGameEl: any
let reportGameModal: any
let Modal: any
let Headings: any
let ReportAnIssueOpen: boolean = false
let gamePlayerClass = 'game-player'

let hoverEl: any

const translationStore:any = get(getTranslations);

const gamePage = await fetchApi<Gamepage[]>({
	endpoint: 'games',
    wrappedByKey: 'data',
    query: `?${query}`
})

const gamesData = [...gamePage[0]?.attributes?.provider?.data?.attributes?.games?.data];
const limitGames = gamesData.splice(0, 6);

//Cleaup Games Array
const gamesArray = CleanGamesForGamePage(limitGames)

//generate page url
let siteID = import.meta.env.SITE_ID
let canonical: string = `${import.meta.env.FULL_URL}${urlTranslate[siteID as keyof typeof urlTranslate]['game-pages']}/${Astro.params.slug}`;

//set page breadcrumb
let breadcumb = { breadCrumbText: gamePage[0]?.attributes?.title, breadCrumbUrl: null };

//set page seo data
let seo = {
    pageTitle: gamePage[0]?.attributes?.seo?.metaTitle,
    metaDescription: gamePage[0]?.attributes?.seo?.metaDescription,
    url: canonical
}

//list componets on page
const __blocks = gamePage[0]?.attributes?.blocks

---

<MainLayout seoData={seo}>
     <Breadcrumb breadcrumb={breadcumb} />

     <div class="iframe-bkg pb-3">
        <div class="section-wrapper relative">
            <GamePlayer data={gamePage[0]} client:load />
            <div class="mt-6 md:mt-8">
                <h2 class="text-white !m-0">{translationStore.gamePageRelatedGamesH2}</h2>
                <div class="mt-4 glass-wrapper">
					<GameListBlock data={limitGames} />
				</div>
                <!-- {gamesData?.length > $GamesStore?.length &&
					<div class="flex justify-center mt-10">
						<button
							on:click={loadMoreGames}
							class="btn btn-secondary uppercase text-white w-[130px] mb-3"
							>{translations.loadMore}</button
						>
					</div>
				} -->
            </div>
        </div>
     </div>

     <div class="w-full xl:container px-2">
        <div class="mb-10">
			<h2 class="mt-8 mb-4 md:mt-16">{translationStore.gamePageRelatedCasinoH2}</h2>
			<CasinoTable
				casinos={gamePage[0].attributes?.provider?.data?.attributes?.relatedCasinos
					?.data}
				customPage={true}
			/>
		</div>

        <div class="flex flex-col md:flex-row gap-x-8">
            <div class="order-last md:order-first mt-5 md:mt-0">
                <div class="quicklinks mb-5">
                    <QuickLinks data={gamePage[0]} />
                </div>
                <div class="intro-content">
                    <h1 class="text-blue-700 !mt-0">{gamePage[0]?.attributes?.heading}</h1>
                    <Fragment set:html={gamePage[0]?.attributes?.introduction}></Fragment>
                </div>

                {gamePage[0]?.attributes?.howTo &&
					<div class="howto-content">
						<h2>{gamePage[0]?.attributes?.howTo.title}</h2>
						{gamePage[0]?.attributes?.howTo?.howToGroup.map((howTo:any, i:number) => 
							<HowTo
								count={i + 1}
								howToWidth={howTo?.image?.data?.attributes?.width}
								howToHeight={howTo?.image?.data?.attributes?.height}
								howToImage={howTo?.image?.data?.attributes?.url}
								howToCopy={howTo.copy}
								howToHeading={howTo.heading}
							/>
						)}
					</div>
				}

                { gamePage[0]?.attributes?.gameInfoTable &&
					<div class="info-table-content">
						<h2 class="mb-[15px]">{translationStore.gameInfoTableH2}</h2>
						<figure class="table">
							<table class="inner-content-table table table-primary">
								<thead class="">
									<tr>
										{Object.values(GameInfoHeader).map(key =>
											key === 'rtp' ?
                                            <th class="uppercase">{key}</th> : 
                                            <th class="capitalize">{key}</th>
											
										)}
									</tr>
								</thead>
								<tbody>
									<tr>
										{Object.keys(GameInfoHeader).map(key =>
											<td>{gamePage[0]?.attributes?.gameInfoTable[key]}</td>
										)}
									</tr>
								</tbody>
							</table>
						</figure>
					</div>
				}

                {gamePage[0]?.attributes?.content1 &&
					<div class="game-content">
						<div>
							<ContentBlock pageContent={gamePage[0]?.attributes?.content1} />
						</div>
					</div>
				}

                {gamePage[0]?.attributes?.proscons &&
					<div class="procon-content">
						<div>
							<ProsCons
								pros={gamePage[0]?.attributes?.proscons?.pros}
								cons={gamePage[0]?.attributes?.proscons?.cons}
								heading={gamePage[0]?.attributes?.proscons?.heading}
								prosImage={gamePage[0]?.attributes?.proscons?.proImage}
								consImage={gamePage[0]?.attributes?.proscons?.conImage}
							/>
						</div>
					</div>
				}

                <!-- Start Blocks components -->

                { 
                    //Image carousel block
                    __blocks.map((block, i) => (
                    (block.__component === 'shared.image-carousel') &&
                        <ImageCarousel data={gamePage[0]?.attributes.blocks[i]} client:visible  /> 
                    ))
                }

				 <!-- End page Blocks -->

                 { gamePage[0]?.attributes?.faqs && 
					<div class="faq-content">
						{gamePage[0]?.attributes?.faqs?.length && <h2 class="mb-4">{translationStore.faq}</h2> }
						<div>
							{gamePage[0]?.attributes?.faqs.map((faq:any) => <Faqs data={faq} /> )}
						</div>
					</div>
				}
            </div>
            <div class="basis-[315px] shrink-0 order-first order-last">
                <CasinoSideBar />
            </div>
        </div>
     </div>

</MainLayout>