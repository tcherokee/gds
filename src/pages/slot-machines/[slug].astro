---
// First and Third Party Plugins
import qs from "qs";

// Types
import type { Gamepage } from "../../../interfaces/game-page";
import type {
  HowToGroup,
  Faqs as FaqsType,
  Block as BlockType,
  UserCountry,
} from "../../../interfaces/common/types";

// Helpers
import { urlTranslate, GameInfoTable } from "../../../utils/data-store.util";
import fetchApi from "../../../lib/strapi";

// Queries
import { gamepageQs } from "../../../qs/game-page";

// Components
import MainLayout from "../../layouts/MainLayout.astro";
import Breadcrumb from "../../components/layout/breadcrumbs.astro";
import RelatedCasino from "../../components/games/relatedCasino.astro";
import ProviderGames from "../../components/games/providerGames.astro";
import HowTo from "../../components/general/howTo.astro";
import ContentBlock from "../../components/blocks/contentBlock.astro";
import ProsCons from "../../components/general/proCons.astro";
import CasinoSideBar from "../../components/casino/casinoSidebar.astro";
import ImageCarousel from "../../components/general/imageCarousel.svelte";
import FaqListBlock from "../../components/blocks/faqListBlock.astro";
import GamePlayer from "../../components/games/gamePlayer.svelte";
import QuickLinks from "../../components/helpers/quicklinks.svelte";
import AuthorCard from "../../components/general/authorCard.astro";
import { getTranslations } from "../../../utils/api-requests";
import { layoutQs } from "../../../qs/layout";
import type { LayoutData } from "../../../interfaces/layout";
import UserReviews from "../../components/general/userReviews.svelte";
import { getUserCountry, userCountryHandler } from "../../../utils/ip-request";

const userCountry = await getUserCountry();
const country =
  userCountry !== null
    ? await userCountryHandler(
        userCountry?.location?.country.toLowerCase() || ""
      )
    : null;

const casinoCountry = country !== null ? country?.sc || "" : null;

// Set Up Translation Store
const translationStore = await getTranslations();

const slug = Astro.params.slug as string;

//generate page url
const siteID = import.meta.env.SITE_ID;
const siteURL: string = `${import.meta.env.FULL_URL}${urlTranslate[siteID as keyof typeof urlTranslate]["game-pages"]}/${slug}`;

const query = qs.stringify(gamepageQs(slug), { encodeValuesOnly: true });

const gamePage = await fetchApi<Gamepage[]>({
  endpoint: "games",
  wrappedByKey: "data",
  query: `?${query}`,
});

// Set Page SEO DATA
let pageTitle =
  import.meta.env.PUBLIC_SITE_ID === "gr"
    ? `${gamePage[0]?.attributes?.title} Slot Machine Online - Gaming Report`
    : import.meta.env.PUBLIC_SITE_ID === "tgs"
      ? `${gamePage[0]?.attributes?.title} Tragamonedas gratis - ${import.meta.env.SITE_NAME}`
      : `${gamePage[0]?.attributes?.title} Slot Machine Demo Gratis - ${import.meta.env.SITE_NAME}`;
let seo = {
  pageTitle: pageTitle,
  metaDescription: gamePage[0]?.attributes?.seo?.metaDescription,
  url: siteURL,
};

let combinedSchema = [];

// FAQ Schema
const allFAQs = gamePage[0]?.attributes?.faqs as FaqsType[];
if (allFAQs.length > 0) {
  const faqSchema = {
    "@context": "https://schema.org",
    "@type": "FAQPage",
    mainEntityOfPage: {
      "@type": "WebPage",
      url: `${siteURL}`,
      "@id": `${siteURL}`,
    },
    mainEntity: allFAQs.map(({ answer, question }) => {
      return {
        "@type": "Question",
        name: `${question}`,
        acceptedAnswer: {
          "@type": "Answer",
          text: `${answer}`,
        },
      };
    }),
  };
  combinedSchema.push(faqSchema);
}

const howTo = gamePage[0]?.attributes?.howTo as HowToGroup;
if (howTo) {
  const howToSchema = {
    "@context": "https://schema.org",
    "@type": "HowTo",
    mainEntityOfPage: {
      "@type": "WebPage",
      url: `${siteURL}`,
      "@id": `${siteURL}`,
    },
    name: `${howTo?.title}`,
    totalTime: "PT15M",
    description: `${howTo?.title}`,
    tool: [
      {
        "@type": "HowToTool",
        name: "smartphone, PC, tablet, metodo di pagamento",
      },
    ],
    step: howTo?.howToGroup?.map(({ heading, copy, image }, i: number) => {
      return {
        "@type": "HowToStep",
        url: `${gamePage[0]?.attributes?.slug}#step0${i + 1}`,
        name: heading,
        itemListElement: {
          "@type": "HowToDirection",
          text: copy,
        },
        ...(image?.data?.attributes && {
          image: {
            "@type": "ImageObject",
            url: image?.data?.attributes.url,
          },
        }),
      };
    }),
  };
  combinedSchema.push(howToSchema);
}

//Rating schema
const ratingsSchema = {
  "@context": "http://schema.org",
  "@type": "VideoGame",
  mainEntityOfPage: {
    "@type": "WebPage",
    url: `${siteURL}`,
    "@id": `${siteURL}`,
  },
  name: `${gamePage[0]?.attributes?.title}`,
  // url: `${CanonicalURL}`,
  image: `${gamePage[0]?.attributes?.images?.data?.attributes?.url}`,
  description: `${gamePage[0]?.attributes?.introduction.replace(/(<([^>]+)>)/gi, "")}`,
  applicationCategory: ["Game"],
  operatingSystem: "Multi-platform",
  aggregateRating: {
    "@type": "AggregateRating",
    ratingValue: `${gamePage[0]?.attributes?.ratingAvg}`, //To be Updated
    reviewCount: `${gamePage[0]?.attributes?.ratingCount}`, // To be Updated
    bestRating: "5",
    worstRating: "0",
  },
  author: {
    "@type": "Person",
    name: `${gamePage[0]?.attributes?.author?.data?.attributes?.firstName} ${gamePage[0]?.attributes?.author?.data?.attributes?.lastName}`,
    url: `${import.meta.env.PUBLIC_FULL_URL}/author/${gamePage[0]?.attributes?.author?.data?.attributes?.firstName}.${gamePage[0]?.attributes?.author?.data?.attributes?.lastName}`,
  },
  publisher: {
    "@type": "Organization",
    name: `${import.meta.env.SITE_NAME}`,
    url: `${import.meta.env.PUBLIC_FULL_URL}`,
    logo: `${gamePage[0]?.attributes?.images?.data?.attributes?.url}`,
  },
};
combinedSchema.push(ratingsSchema);

//list componets on page
const __blocks = gamePage[0]?.attributes?.blocks;

let gamePageRelatedCasinoTitle =
  translationStore?.gamePageRelatedCasinoH2.replace(
    "{title}",
    gamePage[0]?.attributes?.title
  );

const orderMap = {
  heading: 1,
  introduction: 2,
  howTo: 3,
  gameInfoTable: 4,
  content1: 5,
  faqs: 6,
};

// Caching System
const surrogateKeys = [];

// Page-specific tags
surrogateKeys.push("page:game");
surrogateKeys.push(`game:${slug}`);

// Content-type tags
surrogateKeys.push("type:gamepage");

// Add content-specific tags
if (gamePage[0]?.attributes?.faqs && gamePage[0]?.attributes?.faqs.length > 0) {
  surrogateKeys.push("content:faqs");
}

if (gamePage[0]?.attributes?.howTo) {
  surrogateKeys.push("content:howto");
}

if (gamePage[0]?.attributes?.gameInfoTable) {
  surrogateKeys.push("content:gameinfo");
}

if (gamePage[0]?.attributes?.content1) {
  surrogateKeys.push("content:text");
}

if (gamePage[0]?.attributes?.proscons) {
  surrogateKeys.push("content:proscons");
}

if (
  gamePage[0]?.attributes?.blocks &&
  gamePage[0]?.attributes?.blocks.length > 0
) {
  surrogateKeys.push("content:blocks");

  // Add specific block type tags
  const blockTypes = [
    ...new Set(
      gamePage[0]?.attributes?.blocks.map((block) => {
        const componentType = block.__component.split(".")[1];
        return `blocktype:${componentType}`;
      })
    ),
  ];

  blockTypes.forEach((type) => surrogateKeys.push(type));
}

// Add provider tag if available
if (gamePage[0]?.attributes?.provider?.data?.attributes?.slug) {
  surrogateKeys.push(
    `provider:${gamePage[0]?.attributes?.provider?.data?.attributes?.slug}`
  );
}

// Add category tags if available
if (
  gamePage[0]?.attributes?.categories?.data &&
  gamePage[0]?.attributes?.categories?.data.length > 0
) {
  gamePage[0]?.attributes?.categories?.data.forEach((category) => {
    if (category.attributes?.slug) {
      surrogateKeys.push(`category:${category.attributes.slug}`);
    }
  });
}

// Add country-specific tag if applicable
if (casinoCountry) {
  surrogateKeys.push(`country:${casinoCountry}`);
}

// Add author tag if available
if (gamePage[0]?.attributes?.author?.data?.id) {
  surrogateKeys.push(`author:${gamePage[0]?.attributes?.author?.data?.id}`);
}

// Add rating tag to invalidate when ratings change
if (
  gamePage[0]?.attributes?.ratingCount &&
  gamePage[0]?.attributes?.ratingAvg
) {
  const ratingInfo = `${gamePage[0]?.attributes?.ratingCount}-${gamePage[0]?.attributes?.ratingAvg.toFixed(1)}`;
  surrogateKeys.push(`rating:${ratingInfo}`);
}

// Add version or timestamp tag to allow for complete cache refresh when needed
const contentTimestamp = gamePage[0]?.attributes?.updatedAt || Date.now();
surrogateKeys.push(`version:${contentTimestamp}`);

// Set Surrogate-Key header for GCP CDN cache invalidation
Astro.response.headers.set("Surrogate-Key", surrogateKeys.join(" ")); // Space-separated list

// Generate a proper ETag based on content
// Create a content signature from key data that would trigger a cache refresh when changed
const contentSignature = JSON.stringify({
  // Include critical content identifiers that should trigger cache invalidation
  slug: slug,
  updatedAt: contentTimestamp,
  title: gamePage[0]?.attributes?.title,
  faqsCount: gamePage[0]?.attributes?.faqs?.length || 0,
  hasHowTo: !!gamePage[0]?.attributes?.howTo,
  ratingCount: gamePage[0]?.attributes?.ratingCount || 0,
  ratingAvg: gamePage[0]?.attributes?.ratingAvg || 0,
  blocksCount: gamePage[0]?.attributes?.blocks?.length || 0,
  countryCode: casinoCountry || "default",
  seo: {
    title: pageTitle,
    description: gamePage[0]?.attributes?.seo?.metaDescription,
  },
});

// Generate a hash of the content signature for the ETag
// In a production environment, you might want to use a more sophisticated hashing function
const contentHash = Array.from(
  new Uint8Array(new TextEncoder().encode(contentSignature))
)
  .reduce((hash, byte) => ((hash << 5) - hash + byte) | 0, 0)
  .toString(36);

// Create and set a proper ETag (weak validator with W/ prefix is appropriate for HTML content)
const etagValue = `W/"${contentHash}"`;
Astro.response.headers.set("ETag", etagValue);

// Check for If-None-Match header to enable 304 responses
const ifNoneMatch = Astro.request.headers.get("If-None-Match");
if (ifNoneMatch === etagValue) {
  return new Response(null, {
    status: 304,
    headers: {
      ETag: etagValue,
      "Cache-Control":
        "public, max-age=86400, s-maxage=604800, stale-while-revalidate=3600, stale-if-error=259200",
      "Surrogate-Key": surrogateKeys.join(" "),
      "Surrogate-Control": "max-age=604800",
      "Last-Modified": new Date(contentTimestamp).toUTCString(),
    },
  });
}

// Set aggressive caching
// Browser cache: 1 day
// CDN cache: 7 days (via s-maxage)
// Stale-while-revalidate: 1 hour
// Stale-if-error: 3 days
Astro.response.headers.set(
  "Cache-Control",
  "public, max-age=86400, s-maxage=604800, stale-while-revalidate=3600, stale-if-error=259200"
);

// Optional: Add Surrogate-Control header (might be useful for other CDNs)
Astro.response.headers.set("Surrogate-Control", "max-age=604800");

// Optional: Set cache validation headers
const lastModifiedDate = new Date(contentTimestamp).toUTCString();
Astro.response.headers.set("Last-Modified", lastModifiedDate);

---

<!-- <script define:vars={{ gamePage }}>
  console.log("gamePage", gamePage);
</script> -->
<MainLayout
  seoData={seo}
  crumbLocation="games"
  crumbTitle={gamePage[0]?.attributes?.title}
  crumbUrl={siteURL}
  otherSchema={combinedSchema}
>
  <Breadcrumb
    breadcrumbs={[
      {
        breadCrumbText: gamePage[0]?.attributes?.title,
        breadCrumbUrl: null,
      },
    ]}
    breadcrumbKey="gamesBreadcrumbs"
  />

  <div class="curve rounded-b-3xl pb-3">
    <div class="section-wrapper relative z-10">
      <GamePlayer
        data={gamePage[0]}
        gamePageURL={siteURL}
        translations={translationStore ?? {}}
        client:load
      />
      <div class="mt-6 mb-6 md:mt-8">
        <h2 class="text-white !m-0">
          {translationStore?.gamePageRelatedGamesH2}
        </h2>
        <div class="mt-4">
          <ProviderGames
            slug={gamePage[0]?.attributes?.slug}
            {translationStore}
          />
        </div>
      </div>
    </div>
  </div>

  <div class="w-full xl:container px-2">
    <div class="mb-10">
      <h2 class="mt-8 mb-4 md:mt-16">
        {gamePageRelatedCasinoTitle}
      </h2>
      <RelatedCasino slug={gamePage[0]?.attributes?.slug} {translationStore} />
    </div>

    <div class="flex flex-col md:flex-row gap-x-8">
      <div class="order-last md:order-first mt-5 md:mt-0">
        <div class="quicklinks mb-5">
          <QuickLinks
            data={gamePage[0]}
            isGamePage={true}
            {translationStore}
            {orderMap}
            client:load
          />
        </div>
        <div class="intro-content">
          <h1 class="intro-title text-blue-700 !mt-0">
            {gamePage[0].attributes?.heading}
          </h1>
          <ContentBlock pageContent={gamePage[0]?.attributes?.introduction} />
        </div>

        {
          gamePage[0]?.attributes?.howTo && (
            <div class="howto-content">
              <h2>{gamePage[0]?.attributes?.howTo.title}</h2>
              {gamePage[0]?.attributes?.howTo?.howToGroup.map(
                (howTo: any, i: number) => (
                  <HowTo
                    count={i + 1}
                    howToWidth={howTo?.image?.data?.attributes?.width}
                    howToHeight={howTo?.image?.data?.attributes?.height}
                    howToImage={howTo?.image?.data?.attributes?.url}
                    howToCopy={howTo.copy}
                    howToHeading={howTo.heading}
                  />
                )
              )}
            </div>
          )
        }

        {
          gamePage[0]?.attributes?.gameInfoTable && (
            <div class="info-table-content">
              <h2 class="game-info-table-title mb-[15px]">
                {translationStore?.gameInfoTableH2}
              </h2>
              <figure class="table">
                <table class="inner-content-table table table-primary">
                  <thead class="">
                    <tr>
                      {Object.values(GameInfoTable).map((value) =>
                        value.infoTitle === "gameInfoHeaderRtp" ? (
                          <th class="uppercase">
                            {translationStore &&
                              translationStore[value.infoTitle]}
                          </th>
                        ) : (
                          <th class="capitalize">
                            {translationStore &&
                              translationStore[value.infoTitle]}
                          </th>
                        )
                      )}
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      {Object.values(GameInfoTable).map((values) => (
                        <td>
                          {
                            gamePage[0]?.attributes?.gameInfoTable[
                              values.infoValue
                            ]
                          }
                        </td>
                      ))}
                    </tr>
                  </tbody>
                </table>
              </figure>
            </div>
          )
        }

        {
          gamePage[0]?.attributes?.content1 && (
            <div class="game-content">
              <div>
                <ContentBlock pageContent={gamePage[0]?.attributes?.content1} />
              </div>
            </div>
          )
        }

        {
          gamePage[0]?.attributes?.proscons && (
            <div class="procon-content">
              <div>
                <ProsCons
                  pros={gamePage[0]?.attributes?.proscons?.pros}
                  cons={gamePage[0]?.attributes?.proscons?.cons}
                  heading={gamePage[0]?.attributes?.proscons?.heading}
                  prosImage={gamePage[0]?.attributes?.proscons?.proImage}
                  consImage={gamePage[0]?.attributes?.proscons?.conImage}
                />
              </div>
            </div>
          )
        }

        <!-- Start Blocks components -->

        {
          //Image carousel block
          __blocks?.map(
            (block: BlockType, i: number) =>
              block.__component === "shared.image-carousel" && (
                <ImageCarousel
                  data={gamePage[0]?.attributes.blocks[i]}
                  client:visible
                />
              )
          )
        }

        <!-- End page Blocks -->

        {
          gamePage[0]?.attributes?.faqs.length > 0 && (
            <div class="faq-content">
              <h2 class="faq-title mb-4">{translationStore?.faq}</h2>
              <div>
                {gamePage[0]?.attributes?.faqs.map((faq: FaqsType) => (
                  <FaqListBlock data={faq} {translationStore} />
                ))}
              </div>
            </div>
          )
        }

        {
          gamePage[0]?.attributes?.author?.data && (
            <AuthorCard
              data={gamePage[0].attributes.author}
              {translationStore}
            />
          )
        }

        <div id="game-review">
          <UserReviews
            reviewTypeSlug={gamePage[0].attributes.slug}
            reviewTypeName={gamePage[0].attributes.title}
            reviewTypeId={gamePage[0].id}
            reviewType={"GAME"}
            translations={translationStore ?? {}}
            client:load
          />
        </div>
      </div>
      <div class="basis-[315px] shrink-0 order-first order-last">
        <CasinoSideBar {casinoCountry} {translationStore} />
      </div>
    </div>
  </div>
</MainLayout>

<style lang="scss">
  h1 {
    text-shadow: none;
  }
  .game-section {
    @apply flex flex-col justify-center rounded-t-lg -mx-3 md:mx-0;
  }

  .player-control-tooltip {
    @apply hidden text-sm z-20 -mt-20 w-fit absolute transition duration-150 ease-in-out left-0 ml-8 shadow-lg bg-white p-4 rounded;
  }
  .game-player-fullscreen {
    @apply h-full w-full fixed left-0 top-0 flex justify-center bg-black z-[999];

    .float-close-btn {
      display: flex;
      flex-direction: column;
      margin-left: auto;
      position: absolute;
      top: 0px;
      z-index: 999;
      margin: 20px;
      right: 0px;
      border-radius: 10px;
      height: 40px;
      overflow: hidden;

      &:hover {
        height: max-content;
      }

      .buttons {
        display: flex;
        flex-direction: column;
        padding: 10px;

        .btn {
          display: flex;
          justify-content: center;
          align-items: center;
          border-radius: 50%;
          width: 30px;
          height: 30px;
          padding: 0;
          background: theme("colors.gameplayer-meta-btn-bkg");
          border: 1px solid theme("colors.gameplayer-meta-btn-border");
          margin-bottom: 5px;

          &:last-child {
            margin-right: 0;
          }

          &.heart {
            :global(svg) {
              fill: transparent;
            }

            &.filled {
              :global(svg) {
                fill: theme("colors.filled-fav");
              }
            }
          }

          &.report-issue {
            background: theme("colors.gameplayer-report-issue-bkg");
            border-color: theme("colors.gameplayer-report-issue-bdr");

            :global(svg) {
              fill: theme("colors.gameplayer-report-issue-fill");
            }
          }

          &.close {
            display: none;
          }
        }
      }
    }
  }
  .game-player {
    @apply md:px-3 md:h-[700px] rounded-lg flex flex-col items-center justify-center bg-black aspect-video;
    display: flex;
    background: theme("colors.black");
    border-radius: 4px;
    overflow: hidden;
    position: static;
  }

  .float-close-btn {
    display: none;
  }
  .start-game-overlay {
    display: flex;
    flex-direction: column;
    background: theme("colors.black");
    align-items: center;
    justify-content: center;
    top: 0px;
    bottom: 0px;
    left: 0px;
    right: 0px;
    padding: 10px;

    :global(img) {
      display: none;
      border-radius: 4px;
      overflow: hidden;

      @media (min-width: theme("screens.sm")) {
        display: block;
      }
    }

    .game-title {
      color: theme("colors.white");
      font-size: 14px;
      text-transform: uppercase;
    }

    .age-warning {
      color: theme("colors.white");
      font-size: 11px;
      border: 1px solid theme("colors.danger");
      border-radius: 4px;
      padding: 5px;
      text-align: center;
    }
  }

  .iframe-wrapper {
    display: flex;
    width: 100%;
    height: 100%;
  }

  .provider-game-title {
    display: flex;
    align-items: center;

    h2 {
      color: theme("colors.black");
      font-size: 16px;
      margin: 0px !important;
    }

    :global(img) {
      border-radius: 4px;
    }
  }

  .buttons {
    display: flex;
    .btn {
      display: flex;
      justify-content: center;
      align-items: center;
      border-radius: 5px;
      width: 30px;
      height: 30px;
      padding: 0;
      background: theme("colors.grey[300]");
      border: 1px solid theme("colors.grey[500]");

      &.heart {
        :global(svg) {
          fill: transparent;
        }

        &.filled {
          :global(svg) {
            fill: theme("colors.filled-fav");
          }
        }
      }

      &.report-issue {
        background: theme("colors.gameplayer-report-issue-bkg");
        border-color: theme("colors.gameplayer-report-issue-bdr");

        :global(svg) {
          fill: theme("colors.gameplayer-report-issue-fill");
        }
      }
      &.close {
        display: none;
      }

      &.info {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 30px;
        height: 30px;
        padding: 0;
        background: theme("colors.grey[300]");
        border: 1px solid theme("colors.grey[500]");
        margin-right: auto;
      }
    }
  }

  .player-controls {
    h2 {
      font-size: 16px;
    }

    :global(img) {
      display: none;
      border-radius: 4px;

      @media (min-width: theme("screens.sm")) {
        display: block;
      }
    }
  }

  .game-content {
    :global(.thumbnails) {
      list-style: none;
      margin: 0;
      padding: 0;

      :global(.span2) {
        display: none;
      }
    }

    :global(h2 + ul > img) {
      display: none;
    }
  }

  .faq-content {
    margin-top: 14px;
  }

  .author-content {
    margin-top: 30px;
  }

  .info-table-content {
    @apply w-full border-0 shadow-none;

    .table-primary {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      grid-template-areas: "head body";
      border-radius: 4px;
      overflow: hidden;
      margin: 0;

      @media (min-width: theme("screens.lg")) {
        display: table;
      }

      thead {
        grid-area: head;

        td {
          background: theme("colors.gamepage-info-table-header-bkg");
          color: theme("colors.gamepage-info-table-header-text");
          text-transform: uppercase;
          text-align: center;
        }

        th {
          text-align: center;
          padding-top: 10px;
          padding-bottom: 10px;
        }
      }

      tbody {
        grid-area: body;

        td {
          text-align: center;
          &:last-child {
            @apply border-l-0;
          }
        }
      }

      tr {
        display: flex;
        flex-direction: column;
        border: 1px #fff;

        @media (min-width: theme("screens.lg")) {
          display: table-row;
        }
      }

      td {
        min-height: 42px;
        border-bottom: 1px solid theme("colors.grey[100]");
      }

      th {
        min-height: 42px;
        border-bottom: 1px solid #fff;
        border-bottom: 1px solid theme("colors.grey[100]");
      }
    }
  }

  :global(h1),
  :global(h2),
  :global(h3),
  :global(h4),
  :global(h5),
  :global(h6) {
    @apply mt-10 mb-4;
  }
</style>
