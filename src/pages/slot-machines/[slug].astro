---
export const prerender = true;
import qs from 'qs'
import Icon from 'astro-icon'
import MainLayout from '../../layouts/MainLayout.astro';
import { urlTranslate, GameInfoHeader } from '../../../utils/data-store.util'
import fetchApi from '../../../lib/strapi';
import { get } from 'svelte/store';
import { getTranslations } from '../../../stores/addTranslations';
import type { GetStaticPaths } from "astro";
import { gamepageQs } from "../../../qs/game-page"
import type { Gamepage } from "../../../interfaces/game-page"
import { CleanGamesForGamePage } from '../../../utils/utilities.util'
import Breadcrumb from '../../components/layout/breadcrumbs.astro'
import GameListBlock from '../../components/blocks/gameListBlock.astro';
import CasinoTable from '../../components/casino/casinoTable.astro';
import HowTo from '../../components/general/howTo.astro';
import ContentBlock from '../../components/blocks/contentBlock.astro';
import ProsCons from '../../components/general/proCons.astro'
import CasinoSideBar from '../../components/casino/casinoSidebar.astro';
import ImageCarousel from '../../components/general/imageCarousel.svelte';
import Faqs from '../../components/general/faqs.astro';
import GamePlayer from '../../components/games/gamePlayer.svelte'
import QuickLinks from '../../components/helpers/quicklinks.astro'

import type { LayoutData } from '../../../interfaces/layout';
import { customPageLayoutAddOnsQs } from "../../../qs/customPages"


console.log('Got here 1');


export const getStaticPaths = (async () => {
	console.log('Got here 2');
    const query = qs.stringify(gamepageQs(), {encodeValuesOnly: true})
	console.log('query', query);
	const gamePage = await fetchApi<Gamepage[]>({
		endpoint: 'games',
		wrappedByKey: 'data',
		query: `?${query}`
	})

	// console.log('gamePage', gamePage);

    return gamePage.map((page) => {
        return {
            params: {slug: page?.attributes?.slug},
            props: { page }
        }
    });
}) satisfies GetStaticPaths;

const { page } = Astro.props
const { slug } = Astro.params; //get the slug from the page url


// Import the QS Query string for custom slugs and prepare it for the API fetch
const layoutQuery = qs.stringify(customPageLayoutAddOnsQs(), {encodeValuesOnly: true})

// Request to the Fetch Function to get the custom page slugs from the API
const layout = await fetchApi<LayoutData>({
    endpoint: 'layout',
    wrappedByKey: 'data',
    query: `?${layoutQuery}`
})

let schema: any = null

const translationStore:any = get(getTranslations);

const gamesData = [...page?.attributes?.provider?.data?.attributes?.games?.data];
const limitGames = gamesData.splice(0, 6);

//Cleaup Games Array
const gamesArray = CleanGamesForGamePage(limitGames)

//generate page url
let siteID = import.meta.env.SITE_ID
let canonical: string = `${import.meta.env.FULL_URL}${urlTranslate[siteID as keyof typeof urlTranslate]['game-pages']}/${Astro.params.slug}`;

//set page breadcrumb
let breadcumb = { breadCrumbText: page?.attributes?.title, breadCrumbUrl: null };

//set page seo data
let seo = {
    pageTitle: page?.attributes?.seo?.metaTitle,
    metaDescription: page?.attributes?.seo?.metaDescription,
    url: canonical
}

//list componets on page
const __blocks = page?.attributes?.blocks

---

