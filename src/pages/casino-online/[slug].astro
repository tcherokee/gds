---
// First and Third Party Plugins
import qs from "qs";

// Types
import type { GetStaticPaths } from "astro";
import type { Casinoprovider } from "../../../interfaces/casino-provider";
import type {
  Faqs as FaqsType,
  UserCountry,
} from "../../../interfaces/common/types";

// Queries
import { casinoproviderQs } from "../../../qs/casino-provider";
import { getBreadcrumbs } from "../../../stores/breadcrumbs";

// Helpers
import fetchApi from "../../../lib/strapi";
import { urlTranslate } from "../../../utils/data-store.util";

// Components
import ContentBlock from "../../components/blocks/contentBlock.astro";
import CasinoComparison from "../../components/casino/casinoComparison.astro";
import CasinoSideBar from "../../components/casino/casinoSidebar.astro";
import ProviderCasino from "../../components/casino/providerCasino.astro";
import Faqs from "../../components/general/faqs.astro";
import IntroBlock from "../../components/general/introWithImage.astro";
import Breadcrumb from "../../components/layout/breadcrumbs.astro";
import MainLayout from "../../layouts/MainLayout.astro";

import { getLocalisation, getTranslations } from "../../../utils/api-requests";
import type { BreadcrumbData } from "../../../interfaces/common/types";
import { getUserCountry, userCountryHandler } from "../../../utils/ip-request";

const localisation = await getLocalisation();

const userCountry = await getUserCountry();
const country =
  userCountry !== null
    ? await userCountryHandler(
        userCountry?.location?.country.toLowerCase() || ""
      )
    : null;

const casinoCountry = country !== null ? country?.sc || "" : "";

const slug = Astro.params.slug as string;
const translationStore = await getTranslations();

// Import the QS Query string for custom slugs and prepare it for the API fetch
const query = qs.stringify(
  casinoproviderQs(slug, casinoCountry, localisation),
  {
    encodeValuesOnly: true,
  }
);

// Request to the Fetch Function to get page data from API
const casinoProvider = await fetchApi<Casinoprovider[]>({
  endpoint: "casino-providers",
  wrappedByKey: "data",
  query: `?${query}`,
});

const block = {
  showCasinoFilters: false,
};

//generate page url
let siteID = import.meta.env.SITE_ID;
let canonical: string = `${import.meta.env.FULL_URL}${urlTranslate[siteID as keyof typeof urlTranslate]["casino-providers-page"]}/${slug}`;

//set page seo data
let seo = {
  pageTitle: casinoProvider[0]?.attributes?.seo?.metaTitle,
  metaDescription: casinoProvider[0]?.attributes?.seo?.metaDescription,
  url: canonical,
};

let combinedSchema = [];

// FAQs Schema
if (
  casinoProvider[0]?.attributes?.faqs &&
  casinoProvider[0]?.attributes?.faqs.length > 0
) {
  const faqSchema = {
    "@context": "https://schema.org",
    "@type": "FAQPage",
    mainEntityOfPage: {
      "@type": "WebPage",
      url: `${canonical}`,
      "@id": `${canonical}`,
    },
    mainEntity: casinoProvider[0]?.attributes?.faqs?.map(
      ({ answer, question }) => {
        return {
          "@type": "Question",
          name: `${question}`,
          acceptedAnswer: {
            "@type": "Answer",
            text: `${answer}`,
          },
        };
      }
    ),
  };
  combinedSchema.push(faqSchema);
}

// Caching System
const surrogateKeys = [];

// Page-specific tags
surrogateKeys.push("page:casinoprovider");
surrogateKeys.push(`casinoprovider:${slug}`);

// Content-type tags
surrogateKeys.push("type:casinoproviderpage");

// Add content-specific tags based on content sections
if (casinoProvider[0]?.attributes?.content1) {
  surrogateKeys.push("content:section1");
}
if (casinoProvider[0]?.attributes?.content2) {
  surrogateKeys.push("content:section2");
}
if (casinoProvider[0]?.attributes?.content3) {
  surrogateKeys.push("content:section3");
}

// Add FAQ tag if page has FAQs
if (
  casinoProvider[0]?.attributes?.faqs &&
  casinoProvider[0]?.attributes?.faqs.length > 0
) {
  surrogateKeys.push("content:faqs");
}

// Add casino comparison tag if present
if (
  casinoProvider[0]?.attributes?.casinoComparison?.data &&
  casinoProvider[0]?.attributes?.casinoComparison?.data.length > 0
) {
  surrogateKeys.push("content:casinocomparison");

  // Add specific casino IDs for fine-grained invalidation
  casinoProvider[0].attributes.casinoComparison.data.forEach((casino) => {
    if (casino.id) {
      surrogateKeys.push(`casino:${casino.id}`);
    }
  });
}

// Add author tag if available
if (casinoProvider[0]?.attributes?.author?.data?.id) {
  surrogateKeys.push(
    `author:${casinoProvider[0]?.attributes?.author?.data?.id}`
  );
}

// Add country-specific tag if applicable
if (casinoCountry) {
  surrogateKeys.push(`country:${casinoCountry}`);
}

// Add version or timestamp tag to allow for complete cache refresh when needed
const contentTimestamp = casinoProvider[0]?.attributes?.updatedAt || Date.now();
surrogateKeys.push(`version:${contentTimestamp}`);

// Set Surrogate-Key header for GCP CDN cache invalidation
Astro.response.headers.set("Surrogate-Key", surrogateKeys.join(" ")); // Space-separated list

// Generate a proper ETag based on content
// Create a content signature from key data that would trigger a cache invalidation when changed
const contentSignature = JSON.stringify({
  // Include critical content identifiers that should trigger cache invalidation
  slug: slug,
  title: casinoProvider[0]?.attributes?.title,
  updatedAt: contentTimestamp,
  faqsCount: casinoProvider[0]?.attributes?.faqs?.length || 0,
  hasContent1: !!casinoProvider[0]?.attributes?.content1,
  hasContent2: !!casinoProvider[0]?.attributes?.content2,
  hasContent3: !!casinoProvider[0]?.attributes?.content3,
  casinoComparisonCount:
    casinoProvider[0]?.attributes?.casinoComparison?.data?.length || 0,
  countryCode: casinoCountry || "default",
  seo: {
    title: casinoProvider[0]?.attributes?.seo?.metaTitle,
    description: casinoProvider[0]?.attributes?.seo?.metaDescription,
  },
});

// Generate a hash of the content signature for the ETag
// In a production environment, you might want to use a more sophisticated hashing function
const contentHash = Array.from(
  new Uint8Array(new TextEncoder().encode(contentSignature))
)
  .reduce((hash, byte) => ((hash << 5) - hash + byte) | 0, 0)
  .toString(36);

// Create and set a proper ETag (weak validator with W/ prefix is appropriate for HTML content)
const etagValue = `W/"${contentHash}"`;
Astro.response.headers.set("ETag", etagValue);

// Check for If-None-Match header to enable 304 responses
const ifNoneMatch = Astro.request.headers.get("If-None-Match");
if (ifNoneMatch === etagValue) {
  return new Response(null, {
    status: 304,
    headers: {
      ETag: etagValue,
      "Cache-Control":
        "public, max-age=86400, s-maxage=604800, stale-while-revalidate=3600, stale-if-error=259200",
      "Surrogate-Key": surrogateKeys.join(" "),
      "Surrogate-Control": "max-age=604800",
      "Last-Modified": new Date(contentTimestamp).toUTCString(),
    },
  });
}

// Set aggressive caching
// Browser cache: 1 day
// CDN cache: 7 days (via s-maxage)
// Stale-while-revalidate: 1 hour
// Stale-if-error: 3 days
Astro.response.headers.set(
  "Cache-Control",
  "public, max-age=86400, s-maxage=604800, stale-while-revalidate=3600, stale-if-error=259200"
);

// Optional: Add Surrogate-Control header (might be useful for other CDNs)
Astro.response.headers.set("Surrogate-Control", "max-age=604800");

// Optional: Set cache validation headers
const lastModifiedDate = new Date(contentTimestamp).toUTCString();
Astro.response.headers.set("Last-Modified", lastModifiedDate);
---

<MainLayout
  seoData={seo}
  crumbLocation="casino-providers"
  crumbTitle={casinoProvider[0]?.attributes?.title}
  crumbUrl={canonical}
  otherSchema={combinedSchema}
>
  <Breadcrumb
    breadcrumbs={[
      {
        breadCrumbText: casinoProvider[0]?.attributes?.title,
        breadCrumbUrl: null,
      },
    ]}
    breadcrumbKey="casinoProvidersBreadcrumbs"
  />

  <div class="featured-background curve">
    <IntroBlock
      data={casinoProvider[0]?.attributes?.IntroductionWithImage}
      timeDate={casinoProvider[0]?.attributes?.updatedAt}
      authorData={casinoProvider[0]?.attributes?.author}
      {translationStore}
    />

    <div class="mb-[40px] relative z-10">
      <ProviderCasino
        slug={casinoProvider[0]?.attributes?.slug}
        {translationStore}
        {casinoCountry}
      />
    </div>
  </div>

  <div class="xl:container px-2 pb-5 pt-4">
    {
      (casinoProvider[0]?.attributes?.content1 ||
        casinoProvider[0]?.attributes?.content2 ||
        casinoProvider[0]?.attributes?.content3 ||
        casinoProvider[0]?.attributes?.faqs?.length > 0) && (
        <div class="flex flex-col md:flex-row gap-x-8">
          <div class="order-last md:order-first">
            <div class="content">
              {casinoProvider[0]?.attributes?.content1 && (
                <ContentBlock
                  pageContent={casinoProvider[0]?.attributes?.content1}
                />
              )}
              {casinoProvider[0]?.attributes?.content2 && (
                <ContentBlock
                  pageContent={casinoProvider[0]?.attributes?.content2}
                />
              )}
              {casinoProvider[0]?.attributes?.content3 && (
                <ContentBlock
                  pageContent={casinoProvider[0]?.attributes?.content3}
                />
              )}
            </div>

            {casinoProvider[0]?.attributes?.casinoComparison?.data.length >
              0 && (
              <CasinoComparison
                block={{}}
                data={casinoProvider[0]?.attributes?.casinoComparison?.data.slice(
                  0,
                  3
                )}
                {translationStore}
              />
            )}
            {casinoProvider[0]?.attributes?.faqs?.length > 0 && (
              <div class="content">
                <h2 class="mb-4">{translationStore?.faq}</h2>

                {casinoProvider[0]?.attributes?.faqs.map((faq: FaqsType) => (
                  <Faqs data={faq} />
                ))}
              </div>
            )}
          </div>
          <div class="basis-[315px] shrink-0 order-first mb-5 order-last">
            <CasinoSideBar {casinoCountry} {translationStore} />
          </div>
        </div>
      )
    }
  </div>
</MainLayout>

<style lang="scss">
  .content {
    & > :global(.content-block) {
      & > :global(h1) {
        margin-top: 0 !important;
      }
      & > :global(h2) {
        margin-top: 0 !important;
      }
    }
  }
</style>
