---
// First and Third Party Plugins
import qs from "qs";

// Types
import type { GetStaticPaths } from "astro";
import type { Casinoprovider } from "../../../interfaces/casino-provider";
import type {
  Faqs as FaqsType,
  UserCountry,
} from "../../../interfaces/common/types";

// Queries
import { casinoproviderQs } from "../../../qs/casino-provider";
import { getBreadcrumbs } from "../../../stores/breadcrumbs";

// Helpers
import fetchApi from "../../../lib/strapi";
import { urlTranslate } from "../../../utils/data-store.util";

// Components
import ContentBlock from "../../components/blocks/contentBlock.astro";
import CasinoComparison from "../../components/casino/casinoComparison.astro";
import CasinoSideBar from "../../components/casino/casinoSidebar.astro";
import ProviderCasino from "../../components/casino/providerCasino.astro";
import Faqs from "../../components/general/faqs.astro";
import IntroBlock from "../../components/general/introWithImage.astro";
import Breadcrumb from "../../components/layout/breadcrumbs.astro";
import MainLayout from "../../layouts/MainLayout.astro";

import { getLocalisation, getTranslations } from "../../../utils/api-requests";
import type { BreadcrumbData } from "../../../interfaces/common/types";
import { getUserCountry, userCountryHandler } from "../../../utils/ip-request";

const localisation = await getLocalisation();

const userCountry = await getUserCountry();
const country =
  userCountry !== null
    ? await userCountryHandler(
        userCountry?.location?.country.toLowerCase() || ""
      )
    : null;

const casinoCountry = country !== null ? country?.sc || "" : "";

const slug = Astro.params.slug as string;
const translationStore = await getTranslations();

// Import the QS Query string for custom slugs and prepare it for the API fetch
const query = qs.stringify(
  casinoproviderQs(slug, casinoCountry, localisation),
  {
    encodeValuesOnly: true,
  }
);

// Request to the Fetch Function to get page data from API
const casinoProviderData = await fetchApi<Casinoprovider[]>({
  endpoint: "casino-providers",
  wrappedByKey: "data",
  query: `?${query}`,
});
const casinoProvider = casinoProviderData?.[0];
if (!casinoProvider) {
  return new Response(null, {
    status: 404,
  });
}

const block = {
  showCasinoFilters: false,
};

//generate page url
let siteID = import.meta.env.SITE_ID;
let canonical: string = `${import.meta.env.FULL_URL}${urlTranslate[siteID as keyof typeof urlTranslate]["casino-providers-page"]}/${slug}`;

//set page seo data
let seo = {
  pageTitle: casinoProvider?.attributes?.seo?.metaTitle,
  metaDescription: casinoProvider?.attributes?.seo?.metaDescription,
  url: canonical,
};

let combinedSchema = [];

// FAQs Schema
if (
  casinoProvider?.attributes?.faqs &&
  casinoProvider?.attributes?.faqs.length > 0
) {
  const faqSchema = {
    "@context": "https://schema.org",
    "@type": "FAQPage",
    mainEntityOfPage: {
      "@type": "WebPage",
      url: `${canonical}`,
      "@id": `${canonical}`,
    },
    mainEntity: casinoProvider?.attributes?.faqs?.map(
      ({ answer, question }) => {
        return {
          "@type": "Question",
          name: `${question}`,
          acceptedAnswer: {
            "@type": "Answer",
            text: `${answer}`,
          },
        };
      }
    ),
  };
  combinedSchema.push(faqSchema);
}

// ============= CACHE IMPLEMENTATION START =============
// Set up cache tags (using Surrogate-Key)
const surrogateKeys: string[] = [];

// --- Core Page & Content Type Tags ---
// Path-based tag (Casino Provider specific path tags)
surrogateKeys.push(`casinoprovider:${slug}`);

// Content-type tag (Useful for invalidating all pages of this type)
surrogateKeys.push("type:casinoproviderpage");

// Add country-specific tag if applicable
if (casinoCountry) {
  surrogateKeys.push(`country:${casinoCountry}`);
}

// --- Versioning Tag ---
// Add version or timestamp tag based on the main entry's update time
const contentTimestamp = casinoProvider?.attributes?.updatedAt || Date.now();
surrogateKeys.push(`version:${contentTimestamp}`);

// --- Set Headers ---
// Set Surrogate-Key header for CDN cache invalidation (e.g., GCP CDN)
// Space-separated list
Astro.response.headers.set("Surrogate-Key", surrogateKeys.join(" "));

// --- ETag Generation (Essential for Conditional Requests / 304 Responses) ---
// Create a content signature from key data that would trigger cache invalidation when changed.
const contentSignature = JSON.stringify({
  slug: slug,
  title: casinoProvider?.attributes?.title,
  updatedAt: contentTimestamp,
  faqsCount: casinoProvider?.attributes?.faqs?.length || 0,
  hasContent1: !!casinoProvider?.attributes?.content1,
  hasContent2: !!casinoProvider?.attributes?.content2,
  hasContent3: !!casinoProvider?.attributes?.content3,
  casinoComparisonCount:
    casinoProvider?.attributes?.casinoComparison?.data?.length || 0,
  countryCode: casinoCountry || "default",
  seo: {
    title: casinoProvider?.attributes?.seo?.metaTitle,
    description: casinoProvider?.attributes?.seo?.metaDescription,
  },
});

// --- Generate SHA-256 hash for ETag using Web Crypto API ---
const encoder = new TextEncoder();
const data = encoder.encode(contentSignature);
// Hash the data using SHA-256 (ensure this code runs in an async context)
const hashBuffer = await crypto.subtle.digest("SHA-256", data);
// Convert the ArrayBuffer to a hex string
const hashArray = Array.from(new Uint8Array(hashBuffer));
const contentHash = hashArray
  .map((b) => b.toString(16).padStart(2, "0"))
  .join("");
// --- End SHA-256 Hashing ---

// Create and set a proper ETag (weak validator W/ prefix is appropriate for HTML content)
const etagValue = `W/"${contentHash}"`; // Using the SHA-256 hash
Astro.response.headers.set("ETag", etagValue);

// --- Conditional Request Handling (304 Not Modified) ---
// Check for If-None-Match header to enable 304 responses
const ifNoneMatch = Astro.request.headers.get("If-None-Match");
if (ifNoneMatch === etagValue) {
  // Content hasn't changed, send back 304 Not Modified
  return new Response(null, {
    status: 304,
    headers: {
      ETag: etagValue,
      "Cache-Control":
        "public, max-age=86400, s-maxage=604800, stale-while-revalidate=3600, stale-if-error=259200",
      "Surrogate-Key": surrogateKeys.join(" "), // Resend keys for intermediate caches
      "Surrogate-Control": "max-age=604800",
      "Last-Modified": new Date(contentTimestamp).toUTCString(),
    },
  });
}

// --- Caching Directives for New Responses (200 OK) ---
// Set aggressive caching directives
// Browser cache: 1 day (max-age)
// CDN cache: 7 days (s-maxage)
// Stale-while-revalidate: 1 hour (allow serving stale while revalidating)
// Stale-if-error: 3 days (allow serving stale if origin error)
Astro.response.headers.set(
  "Cache-Control",
  "public, max-age=86400, s-maxage=604800, stale-while-revalidate=3600, stale-if-error=259200"
);

// Optional: Add Surrogate-Control header (might be useful for other CDNs like Fastly)
Astro.response.headers.set("Surrogate-Control", "max-age=604800");

// Set cache validation headers
const lastModifiedDate = new Date(contentTimestamp).toUTCString();
Astro.response.headers.set("Last-Modified", lastModifiedDate);
---

<MainLayout
  seoData={seo}
  crumbLocation="casino-providers"
  crumbTitle={casinoProvider?.attributes?.title}
  crumbUrl={canonical}
  otherSchema={combinedSchema}
>
  <Breadcrumb
    breadcrumbs={[
      {
        breadCrumbText: casinoProvider?.attributes?.title,
        breadCrumbUrl: null,
      },
    ]}
    breadcrumbKey="casinoProvidersBreadcrumbs"
  />

  <div class="featured-background curve">
    <IntroBlock
      data={casinoProvider?.attributes?.IntroductionWithImage}
      timeDate={casinoProvider?.attributes?.updatedAt}
      authorData={casinoProvider?.attributes?.author}
      {translationStore}
    />

    <div class="mb-[40px] relative z-10">
      <ProviderCasino
        slug={casinoProvider?.attributes?.slug}
        {translationStore}
        {casinoCountry}
      />
    </div>
  </div>

  <div class="xl:container px-2 pb-5 pt-4">
    {
      (casinoProvider?.attributes?.content1 ||
        casinoProvider?.attributes?.content2 ||
        casinoProvider?.attributes?.content3 ||
        casinoProvider?.attributes?.faqs?.length > 0) && (
        <div class="flex flex-col md:flex-row gap-x-8">
          <div class="order-last md:order-first">
            <div class="content">
              {casinoProvider?.attributes?.content1 && (
                <ContentBlock
                  pageContent={casinoProvider?.attributes?.content1}
                />
              )}
              {casinoProvider?.attributes?.content2 && (
                <ContentBlock
                  pageContent={casinoProvider?.attributes?.content2}
                />
              )}
              {casinoProvider?.attributes?.content3 && (
                <ContentBlock
                  pageContent={casinoProvider?.attributes?.content3}
                />
              )}
            </div>

            {casinoProvider?.attributes?.casinoComparison?.data.length > 0 && (
              <CasinoComparison
                block={{}}
                data={casinoProvider?.attributes?.casinoComparison?.data.slice(
                  0,
                  3
                )}
                {translationStore}
              />
            )}
            {casinoProvider?.attributes?.faqs?.length > 0 && (
              <div class="content">
                <h2 class="mb-4">{translationStore?.faq}</h2>

                {casinoProvider?.attributes?.faqs.map((faq: FaqsType) => (
                  <Faqs data={faq} />
                ))}
              </div>
            )}
          </div>
          <div class="basis-[315px] shrink-0 order-first mb-5 order-last">
            <CasinoSideBar {casinoCountry} {translationStore} />
          </div>
        </div>
      )
    }
  </div>
</MainLayout>

<style lang="scss">
  .content {
    & > :global(.content-block) {
      & > :global(h1) {
        margin-top: 0 !important;
      }
      & > :global(h2) {
        margin-top: 0 !important;
      }
    }
  }
</style>
