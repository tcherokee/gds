---
// First and Third Party Plugins
import qs from "qs";

// Types
import type { GetStaticPaths } from "astro";
import type { Casinoprovider } from "../../../interfaces/casino-provider";
import type { Faqs as FaqsType } from "../../../interfaces/common/types";

// Queries
import { casinoproviderQs } from "../../../qs/casino-provider";
import { getBreadcrumbs } from "../../../stores/breadcrumbs";

// Helpers
import fetchApi from "../../../lib/strapi";
import { urlTranslate } from "../../../utils/data-store.util";

// Components
import ContentBlock from "../../components/blocks/contentBlock.astro";
import CasinoComparison from "../../components/casino/casinoComparison.astro";
import CasinoSideBar from "../../components/casino/casinoSidebar.astro";
import ProviderCasino from "../../components/casino/providerCasino.astro";
import Faqs from "../../components/general/faqs.astro";
import IntroBlock from "../../components/general/introWithImage.astro";
import Breadcrumb from "../../components/layout/breadcrumbs.astro";
import MainLayout from "../../layouts/MainLayout.astro";

import { getTranslations } from "../../../utils/api-requests";
import type { BreadcrumbData } from "../../../interfaces/common/types";

const slug = Astro.params.slug as string;
const translationStore = await getTranslations();

// Import the QS Query string for custom slugs and prepare it for the API fetch
const query = qs.stringify(casinoproviderQs(slug), { encodeValuesOnly: true });

// Request to the Fetch Function to get page data from API
const casinoProvider = await fetchApi<Casinoprovider[]>({
  endpoint: "casino-providers",
  wrappedByKey: "data",
  query: `?${query}`,
});

const block = {
  showCasinoFilters: false,
};

//generate page url
let siteID = import.meta.env.SITE_ID;
let canonical: string = `${import.meta.env.FULL_URL}${urlTranslate[siteID as keyof typeof urlTranslate]["casino-providers-page"]}/${slug}`;

//set page seo data
let seo = {
  pageTitle: casinoProvider[0]?.attributes?.seo?.metaTitle,
  metaDescription: casinoProvider[0]?.attributes?.seo?.metaDescription,
  url: canonical,
};

let pageSchema = [];

let pageBreadcrum: BreadcrumbData[] = [
  {
    breadCrumbText: casinoProvider[0]?.attributes?.title,
    breadCrumbUrl: "",
  },
];

//Breadcrum Schema
const breadcrumStore: any = await getBreadcrumbs.get();
if (breadcrumStore && breadcrumStore["categoriesBreadcrumbs"]) {
  pageBreadcrum.unshift(...breadcrumStore?.["categoriesBreadcrumbs"]);
}
const breadSchema = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  itemListElement: [...pageBreadcrum]
    .filter((elem) => elem.breadCrumbText.toLowerCase() !== "home")
    .map((bread, i) => {
      return {
        "@type": "ListItem",
        position: i + 1,
        name: bread?.breadCrumbText,
        ...(bread?.breadCrumbUrl && { item: bread?.breadCrumbUrl }),
      };
    }),
};
pageSchema.push(breadSchema);

// Tell the browser to always check the freshness of the cache
Astro.response.headers.set(
  "Cache-Control",
  "public, max-age=0, must-revalidate"
);

// CDN Cache Control
Astro.response.headers.set(
  "Cache-Control",
  "public, max-age=300, s-maxage=3600, stale-while-revalidate=30"
);
---

<MainLayout
  seoData={seo}
  crumbLocation="casino-providers"
  crumbTitle={casinoProvider[0]?.attributes?.title}
  otherSchema={combinedSchema}
>
  <Breadcrumb
    breadcrumbs={[
      {
        breadCrumbText: casinoProvider[0]?.attributes?.title,
        breadCrumbUrl: null,
      },
    ]}
    breadcrumbKey="casinoProvidersBreadcrumbs"
  />

  <div class="featured-background curve">
    <IntroBlock
      data={casinoProvider[0]?.attributes?.IntroductionWithImage}
      timeDate={casinoProvider[0]?.attributes?.updatedAt}
      authorData={casinoProvider[0]?.attributes?.author}
      {translationStore}
    />

    <div class="mb-[40px] relative z-10">
      <ProviderCasino
        slug={casinoProvider[0]?.attributes?.slug}
        {translationStore}
      />
    </div>
  </div>

  <div class="xl:container px-2 pb-5 pt-4">
    {
      (casinoProvider[0]?.attributes?.content1 ||
        casinoProvider[0]?.attributes?.content2 ||
        casinoProvider[0]?.attributes?.content3 ||
        casinoProvider[0]?.attributes?.faqs?.length > 0) && (
        <div class="flex flex-col md:flex-row gap-x-8">
          <div class="order-last md:order-first">
            <div class="content">
              {casinoProvider[0]?.attributes?.content1 && (
                <ContentBlock
                  pageContent={casinoProvider[0]?.attributes?.content1}
                />
              )}
              {casinoProvider[0]?.attributes?.content2 && (
                <ContentBlock
                  pageContent={casinoProvider[0]?.attributes?.content2}
                />
              )}
              {casinoProvider[0]?.attributes?.content3 && (
                <ContentBlock
                  pageContent={casinoProvider[0]?.attributes?.content3}
                />
              )}
            </div>

            {casinoProvider[0]?.attributes?.casinoComparison?.data.length >
              0 && (
              <CasinoComparison
                block={{}}
                data={casinoProvider[0]?.attributes?.casinoComparison?.data.slice(
                  0,
                  3
                )}
                {translationStore}
              />
            )}
            {casinoProvider[0]?.attributes?.faqs?.length > 0 && (
              <div class="content">
                <h2 class="mb-4">{translationStore?.faq}</h2>

                {casinoProvider[0]?.attributes?.faqs.map((faq: FaqsType) => (
                  <Faqs data={faq} />
                ))}
              </div>
            )}
          </div>
          <div class="basis-[315px] shrink-0 order-first mb-5 order-last">
            <CasinoSideBar {translationStore} />
          </div>
        </div>
      )
    }
  </div>
</MainLayout>

<style lang="scss">
  .content {
    & > :global(.content-block) {
      & > :global(h1) {
        margin-top: 0 !important;
      }
      & > :global(h2) {
        margin-top: 0 !important;
      }
    }
  }
</style>
