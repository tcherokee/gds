---
import qs from "qs";

import { sortOptions } from "../../stores/sortFilters";

// Helpers
import {
  loadComponents,
  mapBlocksToDynamicComponents,
} from "../../lib/loadBlockComponents";
import fetchApi from "../../lib/strapi";

// Query Strings
import { customPageQs } from "../../qs/customPages";
import { gamesQs } from "../../qs/games.ts";

import {
  slotCategories as slotCategoriesResponse,
  slotProviders as slotProvidersResponse,
  getTranslations as translationResponse,
} from "../../utils/api-requests";

//types and typeguards
import type { GetStaticPaths } from "astro";
import type {
  Block,
  BreadcrumbData,
  CasinoListBlock,
  CustomGameList,
  Faqs,
  GameFilters,
  HowTo,
  HowToGroup,
  TCasinoLiveVideo,
  TGameListBlock,
  TProviderAttributesOnly,
} from "../../interfaces/common/types.ts";
import type { CustomPageItem } from "../../interfaces/custom-pages";

// Import Svelte Components
import GameListBlock from "../components/blocks/gameListBlock.svelte";
import CasinoTable from "../components/casino/casinoTable.svelte";
import CasinoLiveVideo from "../components/general/casinoLiveVideo.svelte";

// Astro Layouts & Components
import type { TUserGame } from "../../interfaces/games";
import CasinoSidebar from "../components/casino/casinoSidebar.astro";
import AuthorCard from "../components/general/authorCard.astro";
import Breadcrumbs from "../components/layout/breadcrumbs.astro";
import MainLayout from "../layouts/MainLayout.astro";

const path = Astro.params.path as string;

const translationStore = await translationResponse();
const slotProviders = await slotProvidersResponse();
const slotCategories = await slotCategoriesResponse();

// Fetch Game Providers Filter
const gameProviders = await fetchApi<{
  id: number;
  attributes: {
    filterProviders: {
      data: TProviderAttributesOnly[];
    };
  };
}>({
  endpoint: "layout",
  wrappedByKey: "data",
  query: `?fields[0]=id&populate[filterProviders][fields][0]=slug&populate[filterProviders][populate][images][fields][0]=url`,
});

const query = qs.stringify(customPageQs(path), { encodeValuesOnly: true });

let gamesQueryObj: GameFilters = {
  limit: 18,
  sort: "views:desc",
  page: 1,
  providers: [],
  categories: [],
  author: "",
};
let prerenderPath: any[] = [];

// Request to the Fetch Function to get the custom page slugs from the API
const customPage = await fetchApi<CustomPageItem[]>({
  endpoint: "custom-pages",
  wrappedByKey: "data",
  query: `?${query}`,
});

// const path = customPage[0].attributes?.urlPath;

const gameQuery = customPage[0].attributes.blocks.find(
  (block) => block.__component === "games.games-carousel"
) as CustomGameList;

let initialGames: TUserGame[] = [];

if (gameQuery) {
  gamesQueryObj = {
    ...gamesQueryObj,
    limit: gameQuery.numberOfGames,
    sort: sortOptions.get()[gameQuery.sortBy],
  };

  const gamesQuery = qs.stringify(gamesQs(gamesQueryObj), {
    encodeValuesOnly: true,
  });

  const customPageGames = await fetchApi<any[]>({
    endpoint: "games",
    wrappedByKey: "data",
    query: `?${gamesQuery}`,
  });

  initialGames = customPageGames.map((elem) => {
    return {
      id: elem.id,
      ...elem.attributes,
      images: {
        url: elem.attributes.images.data.attributes.url,
      },
      categories: elem.attributes.categories.data,
      provider: {
        slug: elem.attributes.provider.data?.attributes.slug,
        title: elem.attributes.provider.data?.attributes.title,
      },
    };
  });
}

let combinedSchema = [];

// FAQs Schema
const allFAQs = customPage[0]?.attributes?.blocks.filter(
  (block: Block) => block.__component === "shared.faqs"
) as Faqs[];

if (allFAQs && allFAQs.length > 0) {
  const faqSchema = {
    "@context": "https://schema.org",
    "@type": "FAQPage",
    mainEntity: allFAQs?.map(({ answer, question }) => {
      return {
        "@type": "Question",
        name: `${question}`,
        acceptedAnswer: {
          "@type": "Answer",
          text: `${answer}`,
        },
      };
    }),
  };
  // combinedSchema.push(faqSchema);
}

const allHowTos = customPage[0]?.attributes?.blocks.filter(
  (block: Block) => block.__component === "shared.how-to-group"
) as unknown as HowToGroup[];

if (allHowTos && allHowTos.length > 0) {
  const howToSchema = allHowTos?.map(({ title, howToGroup }) => {
    return {
      "@context": "https://schema.org",
      "@type": "HowTo",
      name: `${title}`,
      totalTime: "PT15M",
      description: `${title}`,
      tool: [
        {
          "@type": "HowToTool",
          name: "smartphone, PC, tablet, metodo di pagamento",
        },
      ],
      step: howToGroup?.map(({ heading, copy, image }, i: number) => {
        return {
          "@type": "HowToStep",
          url: `${customPage[0]?.attributes?.urlPath}#step0${i + 1}`,
          name: heading,
          itemListElement: {
            "@type": "HowToDirection",
            text: copy,
          },
          ...(image?.data?.attributes && {
            image: {
              "@type": "ImageObject",
              url: image?.data?.attributes.url,
            },
          }),
        };
      }),
    };
  });

  console.log("customPage", ...howToSchema);

  combinedSchema.push(...howToSchema);
}

// Breadcrumb Schema
const breadSchema = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  itemListElement: (
    [...customPage[0]?.attributes?.breadcrumbs] as BreadcrumbData[]
  )
    .filter((elem) => elem.breadCrumbText.toLowerCase() !== "home")
    .map((bread, i) => {
      return {
        "@type": "ListItem",
        position: i + 1,
        name: bread?.breadCrumbText,
        ...(bread?.breadCrumbUrl && { item: bread?.breadCrumbUrl }),
      };
    }),
};
combinedSchema.push(breadSchema);

// SEO Object
const seo = {
  pageTitle: customPage[0].attributes?.seo?.metaTitle,
  metaDescription: customPage[0].attributes?.seo?.metaDescription,
  url: `${import.meta.env.FULL_URL}/${path}`,
};

// Tell the browser to always check the freshness of the cache
Astro.response.headers.set(
  "Cache-Control",
  "public, max-age=0, must-revalidate"
);

// CDN Cache Control
Astro.response.headers.set(
  "Cache-Control",
  "public, max-age=300, s-maxage=3600, stale-while-revalidate=30"
);
---

<MainLayout seoData={seo} otherSchema={combinedSchema}>
  <Breadcrumbs breadcrumbs={customPage[0]?.attributes?.breadcrumbs} />
</MainLayout>
