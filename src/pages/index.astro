---

import qs from 'qs'

import type { Homepage } from "../../interfaces/homepage.ts"
import type { Block, DynamicComponents } from "../../interfaces/common/types.ts"
import type { Game } from "../../interfaces/games.ts"
import type { Blog } from "../../interfaces/blog.ts"

import fetchApi from "../../lib/strapi";

import { sortOptions } from "../../stores/sortFilters.ts"
import { homepageQs } from "../../qs/homepage.ts"
import { gamesQs } from "../../qs/games.ts"
import { blogsQs } from "../../qs/blogs.ts"


import MainLayout from '../layouts/MainLayout.astro';

const sortStore = sortOptions.get()

const query = qs.stringify(homepageQs(), {encodeValuesOnly: true})

const homepage: Homepage = await fetchApi({
	endpoint: 'homepage',
    wrappedByKey: 'data',
    query: `?${query}`
})

// get the games and blog parameters from the homepage block section
const blogBlock = homepage.attributes.blocks.find(
	(block: Block) => block.__component === 'homepage.home-blog-list'
	)
	
const gamesBlock = homepage.attributes.blocks.find(
	(block: Block) => block.__component === 'homepage.home-game-list'
)

//Get the providers in an array
const gameProviders = gamesBlock.providers.map(item => item.slotProvider.data.attributes.slug);

// get the qs query for the blogs and the games
const gamesQuery = gameProviders.map(provider => qs.stringify(gamesQs(gamesBlock.numberOfGames, sortStore[gamesBlock.sortBy], undefined, provider, undefined), {encodeValuesOnly: true}))
const blogsQuery = qs.stringify(blogsQs(undefined, blogBlock.numberOfBlogs, "createdAt:desc"), {encodeValuesOnly: true})

const fetchHomepageBlogs: Promise<Blog[]> = fetchApi({
    endpoint: 'blogs',
    wrappedByKey: 'data',
    query: `?${blogsQuery}`
});

const fetchHomepageGames: Promise<Game[][]> = Promise.all(gamesQuery.map(query => {
    return fetchApi({
        endpoint: 'games',
        wrappedByKey: 'data',
        query: `?${query}`
    });
}));

const [homepageBlogs, homepageGames] = await Promise.all([fetchHomepageBlogs, fetchHomepageGames]);

console.log(JSON.stringify(homepageBlogs))

// combining games array
const combinedGamesArray: Game[] = homepageGames.flat()

const dynamicComponents: DynamicComponent[] = homepage.attributes.blocks.map((block: Block): DynamicComponent | undefined => {
	switch (block.__component) {
		case 'shared.introduction-with-image':
			return {
				location: 'general',
				name: 'introWithImage',
				extension: 'astro'
			}
		case 'homepage.home-blog-list':
			return {
				location: 'blocks',
				name: 'blogListBlock',
				extension: 'astro'
			}
		case 'homepage.home-game-list':
			return {
				location: 'blocks',
				name: 'gameListBlock',
				extension: 'astro'
			}
		case 'shared.single-content':
			return {
				location: 'blocks',
				name: 'contentBlock',
				extension: 'astro'
			}
		case 'homepage.home-casino-list':
			return {
				location: 'blocks',
				name: 'casinoListBlock',
				extension: 'astro'
			}
		default:
			return undefined
				
	}
}).filter((component): component is DynamicComponent => component !== undefined);

const loadComponents = async (componentsArray: DynamicComponent[]): Promise<any[]> => {
    const components = await Promise.all(componentsArray.map(async entry => {
        if (entry.extension === 'astro') {
            // Handle Astro components
            // Depending on how Astro handles dynamic imports, this might need to be adjusted.
            const component = await import(`../components/${entry.location}/${entry.name}.astro`);
            return component.default || component;
        } else if (entry.extension === 'svelte') {
            // Handle Svelte components
            const component = await import(`../components/${entry.location}/${entry.name}.svelte`);
            return component.default || component;
        }
        return null;
    }));

    return components.filter(component => component !== null);
};

const Components = await loadComponents(dynamicComponents)

---

<MainLayout title="Welcome to Astro.">
	<div class="featured-background">
		{
			Components.map((Component, i) => (
				i < 2 && <Component data={
						homepage?.attributes?.blocks[i]?.__component === 'homepage.home-game-list' 
						? combinedGamesArray 
						: homepage?.attributes?.blocks[i]?.__component === 'homepage.home-blog-list' 
						? homepageBlogs : homepage.attributes.blocks[i]
					} timeDate={homepage.attributes.updatedAt}/>
		))
		}
	</div>
	<div class="xl:container content-auto px-2 pt-5">
		{
			Components.map((Component, i) => (
				i > 1 && <Component data={
						homepage?.attributes?.blocks[i]?.__component === 'homepage.home-game-list' 
						? combinedGamesArray 
						: homepage?.attributes?.blocks[i]?.__component === 'homepage.home-blog-list' 
						? homepageBlogs : homepage.attributes.blocks[i]
					} timeDate={homepage.attributes.updatedAt}/>
		))
		}
	</div>
</MainLayout>
