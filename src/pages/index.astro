---
// First and Third Party Plugins
import qs from "qs";

// Types and Typeguards
import type { Homepage } from "../../interfaces/homepage.ts";
import type {
  Block,
  BlogBlockTypes,
  HomeGameListBlock,
  UserCountry,
} from "../../interfaces/common/types.ts";
import type { Game } from "../../interfaces/games.ts";
import type { Blog } from "../../interfaces/blog.ts";

// Helpers
import fetchApi from "../../lib/strapi";
import {
  loadComponents,
  mapBlocksToDynamicComponents,
} from "../../lib/loadBlockComponents";

// Stores
import { sortOptions } from "../../stores/sortFilters.ts";

// Query Strings
import { homepageQs } from "../../qs/homepage.ts";
import { gamesQs } from "../../qs/games.ts";
import { blogsQs } from "../../qs/blogs.ts";

// Components
import MainLayout from "../layouts/MainLayout.astro";
import Breadcrumbs from "../components/layout/breadcrumbs.astro";
import { getLocalisation, getTranslations } from "../../utils/api-requests";
import { getUserCountry, userCountryHandler } from "../../utils/ip-request";

const localisation = await getLocalisation();

// if the site
const userCountry = await getUserCountry();

const country =
  userCountry !== null
    ? await userCountryHandler(
        userCountry?.location?.country.toLowerCase() || ""
      )
    : null;

const countryCode = country !== null ? country?.sc || "" : null;

const homeData =
  countryCode !== null ? { casinoCountry: countryCode } : { casinoCountry: "" };

const sortStore = sortOptions.get();

const translationStore = await getTranslations();

const query = qs.stringify(homepageQs(homeData, localisation), {
  encodeValuesOnly: true,
});

const homepage = await fetchApi<Homepage>({
  endpoint: "homepage",
  wrappedByKey: "data",
  query: `?${query}`,
});

//Type Guards for the find functions
const isBlogBlockTypes = (block: Block): block is BlogBlockTypes => {
  return block.__component === "homepage.home-blog-list";
};

const isHomeGameListBlock = (block: Block): block is HomeGameListBlock => {
  return block.__component === "homepage.home-game-list";
};

// get the games and blog parameters from the homepage block section
const blogBlock = homepage?.attributes?.blocks.find(isBlogBlockTypes);

const gamesBlock = homepage?.attributes?.blocks.find(isHomeGameListBlock);

//Get the providers in an array
const gameProviders =
  gamesBlock &&
  gamesBlock.providers.map((item) => item.slotProvider.data.attributes.slug);

// get the qs query for the blogs and the games
const gamesQuery =
  gameProviders &&
  gameProviders.map((provider) =>
    qs.stringify(
      gamesQs({
        limit: gamesBlock?.numberOfGames ?? 6,
        sort: sortStore[gamesBlock?.sortBy ?? "Newest"],
        page: undefined,
        providers: [provider ?? ""],
        categories: [],
      }),
      { encodeValuesOnly: true }
    )
  );

const blogsQuery = qs.stringify(
  blogsQs(undefined, blogBlock?.numOfBlogs ?? 6, "createdAt:desc"),
  { encodeValuesOnly: true }
);

const fetchHomepageBlogs: Promise<Blog[]> = fetchApi({
  endpoint: "blogs",
  wrappedByKey: "data",
  query: `?${blogsQuery}`,
});

let fetchHomepageGames: Promise<Game[][]> = Promise.resolve([]);

if (gamesQuery) {
  fetchHomepageGames = Promise.all(
    gamesQuery.map((query: string) => {
      return fetchApi<Game[]>({
        endpoint: "games",
        wrappedByKey: "data",
        query: `?${query}`,
      });
    })
  );
} else {
  console.error("No Query was submitted");
}

const [homepageBlogs, homepageGames] = await Promise.all([
  fetchHomepageBlogs,
  fetchHomepageGames,
]);

console.log("HOMEPAGE", homepage);

// Loop counter
let loopCounter = 2;
if (
  homepage?.attributes?.blocks.find(
    (block) => block.__component === "homepage.home-featured-providers"
  )
) {
  loopCounter += 1;
}

if (
  homepage?.attributes?.blocks.find(
    (block) => block.__component === "shared.overview-block"
  )
) {
  loopCounter += 1;
}

// combining games array
const combinedGamesArray: Game[] = homepageGames.flat();

const Components = await loadComponents(
  mapBlocksToDynamicComponents(homepage?.attributes?.blocks)
);

let seo = {
  pageTitle: homepage?.attributes?.seo?.metaTitle,
  metaDescription: homepage?.attributes?.seo?.metaDescription,
  url: import.meta.env.FULL_URL,
};

//C Caching System
const surrogateKeys = [];

// Page-specific tag
surrogateKeys.push("page:home");

// Content-type tags
surrogateKeys.push("type:homepage");

// Add additional tags based on your content
if (homepageBlogs && homepageBlogs.length > 0) {
  surrogateKeys.push("content:blogs");
}

if (combinedGamesArray && combinedGamesArray.length > 0) {
  surrogateKeys.push("content:games");

  // Add provider-specific tags if relevant
  if (gameProviders && gameProviders.length > 0) {
    gameProviders.forEach((provider) => {
      surrogateKeys.push(`provider:${provider}`);
    });
  }
}

// Add country-specific tag if applicable
if (countryCode) {
  surrogateKeys.push(`country:${countryCode}`);
}

// Add version or timestamp tag to allow for complete cache refresh when needed
const contentTimestamp = homepage?.attributes?.updatedAt || Date.now();
surrogateKeys.push(`version:${contentTimestamp}`);

// Set Surrogate-Key header for GCP CDN cache invalidation
Astro.response.headers.set("Surrogate-Key", surrogateKeys.join(" ")); // Space-separated list

// Generate a proper ETag based on content
// Create a content signature from key data that would trigger a cache refresh when changed
const contentSignature = JSON.stringify({
  // Include critical content identifiers that should trigger cache invalidation
  updatedAt: contentTimestamp,
  blogIds: homepageBlogs?.map((blog) => blog.id || blog.attributes?.id),
  gameIds: combinedGamesArray
    ?.map((game) => game.id || game.attributes?.id)
    ?.slice(0, 10), // Limit to avoid overly large ETags
  blocksLength: homepage?.attributes?.blocks?.length,
  countryCode: countryCode || "default",
});

// Generate a hash of the content signature for the ETag
// In a production environment, you might want to use a more sophisticated hashing function
const contentHash = Array.from(
  new Uint8Array(new TextEncoder().encode(contentSignature))
)
  .reduce((hash, byte) => ((hash << 5) - hash + byte) | 0, 0)
  .toString(36);

// Create and set a proper ETag (weak validator with W/ prefix is appropriate for HTML content)
const etagValue = `W/"${contentHash}"`;
Astro.response.headers.set("ETag", etagValue);

// Check for If-None-Match header to enable 304 responses
const ifNoneMatch = Astro.request.headers.get("If-None-Match");
if (ifNoneMatch === etagValue) {
  return new Response(null, {
    status: 304,
    headers: {
      ETag: etagValue,
      "Cache-Control":
        "public, max-age=86400, s-maxage=604800, stale-while-revalidate=3600, stale-if-error=259200",
      "Surrogate-Key": surrogateKeys.join(" "),
      "Surrogate-Control": "max-age=604800",
      "Last-Modified": new Date(contentTimestamp).toUTCString(),
    },
  });
}

// Set aggressive caching
// Browser cache: 1 day
// CDN cache: 7 days (via s-maxage)
// Stale-while-revalidate: 1 hour
// Stale-if-error: 3 days
Astro.response.headers.set(
  "Cache-Control",
  "public, max-age=86400, s-maxage=604800, stale-while-revalidate=3600, stale-if-error=259200"
);

// Optional: Add Surrogate-Control header (might be useful for other CDNs)
Astro.response.headers.set("Surrogate-Control", "max-age=604800");

// Optional: Set cache validation headers
const lastModifiedDate = new Date(contentTimestamp).toUTCString();
Astro.response.headers.set("Last-Modified", lastModifiedDate);

---

<script define:vars={{ country, homepage }}>
  console.log("Home country", country);
  console.log("Homepage", homepage);
</script>
<MainLayout seoData={seo} isHomePage={true} crumbLocation="home">
  <Breadcrumbs breadcrumbs={[]} breadcrumbKey="homeBreadcrumbs" />

  <div
    class:list={[
      "featured-background curve pb-[50px]",
      loopCounter > 2 ? "home-feature" : "",
    ]}
  >
    {
      Components.map(
        (Component, i) =>
          i < loopCounter && (
            <Component
              data={
                homepage?.attributes?.blocks[i]?.__component ===
                "homepage.home-game-list"
                  ? combinedGamesArray
                  : homepage?.attributes?.blocks[i]?.__component ===
                      "homepage.home-blog-list"
                    ? homepageBlogs
                    : homepage?.attributes?.blocks[i]
              }
              {...(homepage?.attributes?.blocks[i]?.__component ===
              "homepage.home-casino-list"
                ? { isTop: true }
                : {})}
              {...(homepage?.attributes?.blocks[i]?.__component ===
              "homepage.home-blog-list"
                ? { isFeatured: true }
                : {})}
              timeDate={homepage?.attributes?.updatedAt}
              isHomePage={true}
              {translationStore}
              gameListTitle={gamesBlock ? gamesBlock?.gameListTitle : null}
              gameListLink={gamesBlock ? gamesBlock?.link : null}
              blogListLink={blogBlock ? blogBlock?.link : null}
            />
          )
      )
    }
  </div>
  <div class="xl:container content-auto px-2 pt-5">
    {
      Components.map(
        (Component, i) =>
          i >= loopCounter && (
            <Component
              data={
                homepage?.attributes?.blocks[i]?.__component ===
                "homepage.home-game-list"
                  ? combinedGamesArray
                  : homepage?.attributes?.blocks[i]?.__component ===
                      "homepage.home-blog-list"
                    ? homepageBlogs
                    : homepage?.attributes?.blocks[i]
              }
              timeDate={homepage?.attributes?.updatedAt}
              isHomePage={true}
              {translationStore}
              gameListTitle={gamesBlock ? gamesBlock?.gameListTitle : null}
              gameListLink={gamesBlock ? gamesBlock?.link : null}
              blogListLink={blogBlock ? blogBlock?.link : null}
            />
          )
      )
    }
  </div>
</MainLayout>
