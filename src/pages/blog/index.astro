---
import qs from "qs";
import fetchApi from "../../../lib/strapi";
import MainLayout from "../../layouts/MainLayout.astro";
import { urlTranslate } from "../../../utils/data-store.util";
import { blogmetaQs } from "../../../qs/blog-meta";
import { blogcardQs } from "../../../qs/blog-cards";
import type { BlogList } from "../../../interfaces/blog";
import BlogListBlock from "../../components/blocks/blogListBlock.astro";
import Pagination from "../../components/helpers/pagination.astro";
import { getTranslations } from "../../../utils/api-requests";

const translationStore = await getTranslations();

const query = qs.stringify(blogcardQs(12, 1), { encodeValuesOnly: true });
const metaQuery = qs.stringify(blogmetaQs(), { encodeValuesOnly: true });

const blogCards = await fetchApi<BlogList>({
  endpoint: "blogs",
  isPaginated: true,
  query: `?${query}`,
});

const layoutData = await fetchApi<any>({
  endpoint: "layout",
  wrappedByKey: "data",
  query: `?${metaQuery}`,
});

let siteID = import.meta.env.SITE_ID;
let siteURL = import.meta.env.FULL_URL;
let canonical = `${siteURL}${urlTranslate[siteID as keyof typeof urlTranslate]["blog-index"]}`;

//set page seo data
let seo = {
  pageTitle: layoutData?.attributes?.blogMeta?.blogTitle,
  metaDescription: layoutData?.attributes?.blogMeta?.blogDescription,
  url: canonical,
};

// ============= CACHE IMPLEMENTATION START =============
// Set up cache tags (using Surrogate-Key)
const surrogateKeys: string[] = [];

// --- Core Page & Content Type Tags ---
// Path-based tag (Blog index specific path tags)
surrogateKeys.push("page:blogindex");
surrogateKeys.push("type:bloglist");

// --- Content Dependency Tags ---
// Add content-type specific tags
surrogateKeys.push("content:blogs");

// Add pagination tag to help with pagination-specific invalidation
const currentPage = blogCards?.meta?.pagination?.page || 1;
surrogateKeys.push(`page:${currentPage}`);

// Add blog ID tags for the current page
// This allows invalidation when specific blogs are updated
if (blogCards.data && blogCards.data.length > 0) {
  // Track most recent blog update time for versioning
  const latestBlogUpdate = blogCards.data.reduce((latest, blog) => {
    const blogDate = new Date(
      blog.attributes?.updatedAt || blog.attributes?.createdAt || 0
    ).getTime();
    return blogDate > latest ? blogDate : latest;
  }, 0);

  if (latestBlogUpdate > 0) {
    surrogateKeys.push(
      `blogupdated:${new Date(latestBlogUpdate).toISOString().slice(0, 10)}`
    );
  }
}

// Add tag for layout data
if (layoutData?.attributes?.blogMeta) {
  surrogateKeys.push("content:blogmeta");
}

// --- Versioning Tag ---
// Add version or timestamp tag based on the main entry's update time
const contentTimestamp = Date.now();
surrogateKeys.push(`version:${contentTimestamp}`);

// --- Set Headers ---
// Set Surrogate-Key header for CDN cache invalidation (e.g., GCP CDN)
// Space-separated list
Astro.response.headers.set("Surrogate-Key", surrogateKeys.join(" "));

// --- ETag Generation (Essential for Conditional Requests / 304 Responses) ---
// Create a content signature from key data that would trigger cache invalidation when changed.
const contentSignature = JSON.stringify({
  page: currentPage,
  pageCount: blogCards?.meta?.pagination?.pageCount || 0,
  blogIds: blogCards.data?.map((blog) => blog.id) || [],
  latestUpdate:
    blogCards.data?.length > 0
      ? Math.max(
          ...blogCards.data.map((blog) =>
            new Date(
              blog.attributes?.updatedAt || blog.attributes?.createdAt || 0
            ).getTime()
          )
        )
      : 0,
  seo: {
    title: layoutData?.attributes?.blogMeta?.blogTitle,
    description: layoutData?.attributes?.blogMeta?.blogDescription,
  },
});

// --- Generate SHA-256 hash for ETag using Web Crypto API ---
const encoder = new TextEncoder();
const data = encoder.encode(contentSignature);
// Hash the data using SHA-256 (ensure this code runs in an async context)
const hashBuffer = await crypto.subtle.digest("SHA-256", data);
// Convert the ArrayBuffer to a hex string
const hashArray = Array.from(new Uint8Array(hashBuffer));
const contentHash = hashArray
  .map((b) => b.toString(16).padStart(2, "0"))
  .join("");
// --- End SHA-256 Hashing ---

// Create and set a proper ETag (weak validator W/ prefix is appropriate for HTML content)
const etagValue = `W/"${contentHash}"`; // Using the SHA-256 hash
Astro.response.headers.set("ETag", etagValue);

// --- Conditional Request Handling (304 Not Modified) ---
// Check for If-None-Match header to enable 304 responses
const ifNoneMatch = Astro.request.headers.get("If-None-Match");
if (ifNoneMatch === etagValue) {
  // Content hasn't changed, send back 304 Not Modified
  return new Response(null, {
    status: 304,
    headers: {
      ETag: etagValue,
      "Cache-Control":
        "public, max-age=86400, s-maxage=604800, stale-while-revalidate=3600, stale-if-error=259200",
      "Surrogate-Key": surrogateKeys.join(" "), // Resend keys for intermediate caches
      "Surrogate-Control": "max-age=604800",
      "Last-Modified": new Date(contentTimestamp).toUTCString(),
    },
  });
}

// --- Caching Directives for New Responses (200 OK) ---
// Set aggressive caching directives
// Browser cache: 1 day (max-age)
// CDN cache: 7 days (s-maxage)
// Stale-while-revalidate: 1 hour (allow serving stale while revalidating)
// Stale-if-error: 3 days (allow serving stale if origin error)
Astro.response.headers.set(
  "Cache-Control",
  "public, max-age=86400, s-maxage=604800, stale-while-revalidate=3600, stale-if-error=259200"
);

// Optional: Add Surrogate-Control header (might be useful for other CDNs like Fastly)
Astro.response.headers.set("Surrogate-Control", "max-age=604800");

// Set cache validation headers
const lastModifiedDate = new Date(contentTimestamp).toUTCString();
Astro.response.headers.set("Last-Modified", lastModifiedDate);
---

<MainLayout seoData={seo}>
  <div class="bg-blog-list-bkg">
    <div class="xl:container px-2 pb-5 pt-4">
      <div class="xl:container px-2 pb-5 pt-4">
        <!-- <div class="grid grid-cols-1 md:grid-cols-3 gap-5"> -->
        <BlogListBlock data={blogCards.data} {translationStore} />
        <!-- </div> -->

        <Pagination
          currPage={blogCards?.meta?.pagination?.page}
          pageCount={blogCards?.meta?.pagination?.pageCount}
          path={urlTranslate[siteID as keyof typeof urlTranslate]["blog-pages"]}
          {translationStore}
        />
      </div>
    </div>
  </div>
</MainLayout>
