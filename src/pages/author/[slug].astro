---
// First and Third Party Plugins
import qs from "qs";

// Types and TypeGuards
import type { GameFilters } from "../../../interfaces/common/types";
import type { TAuthor } from "../../../interfaces/users";

// Queries
import { authorPageQs } from "../../../qs/author";

// Helpers
import fetchApi from "../../../lib/strapi";
import { urlTranslate } from "../../../utils/data-store.util";
import {
  slotProviders as slotProvidersResponse,
  getTranslations,
  slotCategories as slotCategoriesResponse,
} from "../../../utils/api-requests";

// Layouts
import MainLayout from "../../layouts/MainLayout.astro";

// Components
import type { TUserGame } from "../../../interfaces/games";
import { gamesQs } from "../../../qs/games";
import GameListBlock from "../../components/blocks/gameListBlock.svelte";
import BlogCard from "../../components/blogs/blogCard.astro";
import CasinoTable from "../../components/casino/casinoTable.astro";
import AuthorCard from "../../components/general/authorCardAlt.astro";

const slug = Astro.params.slug as string;
// Import the QS Query string for custom slugs and prepare it for the API fetch
const query = qs.stringify(authorPageQs(slug.split(".")[0]), {
  encodeValuesOnly: true,
});

// Request to the Fetch Function to get the custom page slugs from the API
const authorPage = await fetchApi<TAuthor[]>({
  endpoint: "users",
  wrappedByKey: "",
  query: `?${query}`,
});

const gamesQueryObj: GameFilters = {
  limit: 18,
  sort: "createdAt:desc",
  page: 1,
  providers: [],
  categories: [],
  author: authorPage[0].slug,
};

const gamesQuery = qs.stringify(gamesQs(gamesQueryObj), {
  encodeValuesOnly: true,
});

const authorGames = await fetchApi<any[]>({
  endpoint: "games",
  wrappedByKey: "data",
  query: `?${gamesQuery}`,
});

const initialGames: TUserGame[] = authorGames.map((elem) => {
  return {
    id: elem.id,
    ...elem.attributes,
    images: {
      url: elem.attributes.images.data.attributes.url,
    },
    provider: {
      slug: elem.attributes.provider.data.attributes.slug,
      title: elem.attributes.provider.data.attributes.title,
    },
  };
});

const translationStore = await getTranslations();
const slotCategories = await slotCategoriesResponse();
const slotProviders = await slotProvidersResponse();

// Setting SITE ID
const SITE_ID = import.meta.env.SITE_ID;

// Create SEO Object
const seo = {
  pageTitle: `${authorPage[0].firstName} ${authorPage[0].lastName}`,
  metaDescription: authorPage[0]?.content1,
  url: `${import.meta.env.FULL_URL}${urlTranslate[SITE_ID as keyof typeof urlTranslate]["author-page"]}/${slug}`,
};

// Create Game Variables Object

const gameBlockObj = {
  __component: "games.games-carousel",
  numberOfGames: 18,
  sortBy: "Newest",
  showGameFilterPanel: false,
  showGameMoreButton: true,
  gameProviders: [],
  gameCategories: [],
};

// Truncate and Clean Blog Object
const truncatedBlogObj = authorPage[0].blogs.map((item: any) => {
  if (item && item.content1) {
    // Remove HTML tags
    const plainText = item.content1.replace(/<[^>]*>/g, "");

    // Split into words and truncate to 25 words
    const words = plainText.split(/\s+/).slice(0, 25).join(" ");

    // Update the content1 field
    item.content1 = words;
  } else if (item && item.title) {
    // Split the title into words and truncate to 10 words
    const truncatedTitle = item.title.split(/\s+/).slice(0, 10).join(" ");

    // Update the title field
    item.title = truncatedTitle;
  }
  return item;
});
---

<MainLayout seoData={seo}>
  <div class="relative after:content-[''] bg-blog-list-bkg">
    <div class="w-full pt-5 px-3 author-upper-section pb-[65px]">
      <div class="xl:container">
        <div>
          <AuthorCard data={authorPage[0]} isFlat={true} {translationStore} />
        </div>

        {
          authorPage[0]?.games.length > 0 && (
            <>
              <div class="">
                <h2 class="text-white">Ultimi giochi recensiti dall'autore</h2>
              </div>
              <div class="mt-5 glass-wrapper">
                <GameListBlock
                  data={gameBlockObj}
                  {initialGames}
                  author={authorPage[0].slug}
                  translations={translationStore}
                  {slotProviders}
                  {slotCategories}
                  client:load
                />
              </div>
            </>
          )
        }
      </div>
    </div>
  </div>
  <div class="relative xl:container px-2 pb-5">
    {
      authorPage[0]?.blogs.length > 0 && (
        <div class="mt-6 md:mt-8">
          <h2 class="!mb-5 !md:mb-6">Articoli recenti dell'autore</h2>
          <div class="grid md:grid-cols-3 gap-3 md:gap-8">
            <BlogCard data={truncatedBlogObj} {translationStore} />
          </div>
        </div>
      )
    }
    {
      authorPage[0]?.casinos.length > 0 && (
        <div class="mt-5">
          <h2>Casino recensiti dall'autore</h2>
          <div class="mb-5">
            <CasinoTable casinos={authorPage[0]?.casinos} {translationStore} />
          </div>
        </div>
      )
    }
  </div>
  <style lang="scss">
    .author-upper-section {
      background: var(
        --Gradients-BG-Blue,
        linear-gradient(
          180deg,
          theme("colors.background-top-gradient") 0%,
          theme("colors.background-bottom-gradient") 100%
        )
      );
    }
  </style>
</MainLayout>
