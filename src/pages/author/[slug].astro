---

export const prerender = true;

// First and Third Party Plugins
import qs from "qs";

// Types and TypeGuards
import type { GetStaticPaths } from "astro";
import type { TranslationData } from '../../../interfaces/common/types';
import type { TAuthor } from "../../../interfaces/users";

// Queries
import { authorPageQs } from "../../../qs/author";

// Helpers
import fetchApi from "../../../lib/strapi";
import { urlTranslate } from '../../../utils/data-store.util';

// Stores
import { getTranslations } from '../../../stores/addTranslations';

// Layouts
import MainLayout from "../../layouts/MainLayout.astro"

// Components
import AuthorCard from "../../components/general/authorCardAlt.astro"
import GameListBlock from "../../components/blocks/gameListBlock.svelte";
import BlogCard from "../../components/blogs/blogCard.astro"
import BlogListBlock from "../../components/blocks/blogListBlock_.svelte"
import CasinoTable from "../../components/casino/casinoTable.astro";

export const getStaticPaths = (async () => {
  // Import the QS Query string for custom slugs and prepare it for the API fetch
  const query = qs.stringify(authorPageQs(), { encodeValuesOnly: true });

  // Request to the Fetch Function to get the custom page slugs from the API
  const authorPage = await fetchApi<TAuthor[]>({
    endpoint: "users",
    wrappedByKey: "",
    query: `?${query}`,
  });

  return authorPage.map((page) => {
    return {
      params: {
        slug: `${page?.firstName.toLowerCase()}.${page?.lastName.toLowerCase()}`,
      },
      props: { page },
    };
  });
}) satisfies GetStaticPaths;

const { page } = Astro.props;
const { slug } = Astro.params;

const translationStore: TranslationData = getTranslations.get();

// Setting SITE ID
const SITE_ID = import.meta.env.SITE_ID;

// Create SEO Object
const seo = {
    pageTitle: `${page.firstName} ${page.firstName}`,
    metaDescription: page?.content1,
    url: `${import.meta.env.FULL_URL}${urlTranslate[SITE_ID as keyof typeof urlTranslate]['author-page']}/${slug}`
}

// Create Game Variables Object

const gameBlockObj = {
    __component: 'games.games-carousel',
  numberOfGames: 18,
  sortBy: 'Newest',
  showGameFilterPanel: false,
  showGameMoreButton: true,
  gameProviders: [],
  gameCategories: []
}

// Truncate and Clean Blog Object
const truncatedBlogObj = page.blogs.map(item => {
    if (item && item.content1) {
        // Remove HTML tags
        const plainText = item.content1.replace(/<[^>]*>/g, '');

        // Split into words and truncate to 25 words
        const words = plainText.split(/\s+/).slice(0, 25).join(' ');

        // Update the content1 field
        item.content1 = words;
    }
    else if (item && item.title) {
        // Split the title into words and truncate to 10 words
        const truncatedTitle = item.title.split(/\s+/).slice(0, 10).join(' ');

        // Update the title field
        item.title = truncatedTitle;
    }
    return item;
});

---
<MainLayout seoData={seo}>
    <div class="relative after:content-[''] bg-blog-list-bkg">
        <div class="w-full pt-5 px-3 author-upper-section pb-[65px]">
            <div class="xl:container">
                <div>
                    <AuthorCard  data={page} isFlat={true} />
                </div>
    
                {
                    page.games.length > 0 &&
                    <div class="mt-[80px]">
                        <h2 class="text-white">Ultimi giochi recensiti dall'autore</h2>
                    </div>
                    <div class="mt-5 glass-wrapper">
                        <GameListBlock data={gameBlockObj} author={page.slug} client:load />
                    </div>
                }
            </div>
        </div>
        <div class="relative xl:container px-2 pb-5">
          {
                page?.blogs.length > 0 &&
                <div>
                    <div class="mt-[60px] md:mt-[80px] mb-[40px] md:mb-[65px]">
                        <h2>Articoli recenti dell'autore</h2>
                    </div>
                    <div class="grid md:grid-cols-3 gap-3 md:gap-8">
                        <BlogCard data={truncatedBlogObj} />
                    </div>
                </div>
            }

            {
                page?.casinos.length > 0 &&
                <div class="mt-5">
                    <h2>Casino recensiti dall'autore</h2>
                    <div class="mb-5">
                        <CasinoTable
                            casinos={page?.casinos}
                        />
                    </div>
                </div>
            }
        </div>
    </div>
</MainLayout>

<style lang="scss">
    .author-upper-section {
		background: var(--Gradients-BG-Blue, linear-gradient(180deg, theme('colors.background-top-gradient') 0%, theme('colors.background-bottom-gradient') 100%));
	}
</style>