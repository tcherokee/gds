---
export const prerender = true;

// First and Third Party Plugins
import qs from "qs";

// Types and TypeGuards
import type { GetStaticPaths } from "astro";
import type { GameFilters } from "../../../interfaces/common/types";
import type { TAuthor } from "../../../interfaces/users";

// Queries
import { authorPageQs } from "../../../qs/author";

// Helpers
import fetchApi from "../../../lib/strapi";
import { urlTranslate } from "../../../utils/data-store.util";
import { getTranslations } from "../../../utils/api-requests";

const translationStore = await getTranslations();

// Layouts
import MainLayout from "../../layouts/MainLayout.astro";

// Components
import type { TUserGame } from "../../../interfaces/games";
import { gamesQs } from "../../../qs/games";
import GameListBlock from "../../components/blocks/gameListBlock.svelte";
import BlogCard from "../../components/blogs/blogCard.astro";
import CasinoTable from "../../components/casino/casinoTable.astro";
import AuthorCard from "../../components/general/authorCard.astro";

export const getStaticPaths = (async () => {
  // Import the QS Query string for custom slugs and prepare it for the API fetch
  const query = qs.stringify(authorPageQs(), { encodeValuesOnly: true });

  // Request to the Fetch Function to get the custom page slugs from the API
  const authorPage = await fetchApi<TAuthor[]>({
    endpoint: "users",
    wrappedByKey: "",
    query: `?${query}`,
  });
  let gamesQueryObj: GameFilters = {
    limit: 18,
    sort: "createdAt:desc",
    page: 1,
    providers: [],
    categories: [],
    author: "",
  };

  let prerenderPath: any[] = [];
  for (let i = 0; i < authorPage.length; i++) {
    const page = authorPage[i];
    gamesQueryObj = {
      ...gamesQueryObj,
      author: page.slug,
    };
    const gamesQuery = qs.stringify(gamesQs(gamesQueryObj), {
      encodeValuesOnly: true,
    });

    const authorGames = await fetchApi<any[]>({
      endpoint: "games",
      wrappedByKey: "data",
      query: `?${gamesQuery}`,
    });

    const initialGames: TUserGame[] = authorGames.map((elem) => {
      return {
        id: elem.id,
        ...elem.attributes,
        images: {
          url: elem.attributes.images.data.attributes.url,
        },
        provider: {
          slug: elem.attributes.provider.data.attributes.slug,
          title: elem.attributes.provider.data.attributes.title,
        },
      };
    });

    prerenderPath.push({
      params: {
        slug: `${page?.firstName.toLowerCase()}.${page?.lastName.toLowerCase()}`,
      },
      props: {
        page,
        initialGames,
      },
    });
  }

  return prerenderPath;

  //   return authorPage.map(async (page) => {
  //     return {
  //       params: {
  //         slug: `${page?.firstName.toLowerCase()}.${page?.lastName.toLowerCase()}`,
  //       },
  //       props: { page },
  //     };
  //   });
}) satisfies GetStaticPaths;

const { page, initialGames } = Astro.props;
const { slug } = Astro.params;

// Setting SITE ID
const SITE_ID = import.meta.env.SITE_ID;

// Create SEO Object
const seo = {
  pageTitle: `${page.firstName} ${page.firstName}`,
  metaDescription: page?.content1,
  url: `${import.meta.env.FULL_URL}${urlTranslate[SITE_ID as keyof typeof urlTranslate]["author-page"]}/${slug}`,
};

// Create Game Variables Object

const gameBlockObj = {
  __component: "games.games-carousel",
  numberOfGames: 18,
  sortBy: "Newest",
  showGameFilterPanel: false,
  showGameMoreButton: true,
  gameProviders: [],
  gameCategories: [],
};

// Truncate and Clean Blog Object
const truncatedBlogObj = page.blogs.map((item: any) => {
  if (item && item.content1) {
    // Remove HTML tags
    const plainText = item.content1.replace(/<[^>]*>/g, "");

    // Split into words and truncate to 25 words
    const words = plainText.split(/\s+/).slice(0, 25).join(" ");

    // Update the content1 field
    item.content1 = words;
  } else if (item && item.title) {
    // Split the title into words and truncate to 10 words
    const truncatedTitle = item.title.split(/\s+/).slice(0, 10).join(" ");

    // Update the title field
    item.title = truncatedTitle;
  }
  return item;
});
---

<script define:vars={{ page }}>
  console.log("author page", page);
</script>
<MainLayout seoData={seo}>
  <div class="featured-no-curve pt-5">
    <div class="section-wrapper glass-wrapper">
      <div>
        <div>
          <AuthorCard data={page} isFlat={true} {translationStore} />
        </div>
      </div>

      {
        page.games.length > 0 && (
          <div class="mt-5">
            <div class="mb-5">
              <h2>Ultimi giochi recensiti dall'autore</h2>
            </div>
            <GameListBlock
              data={gameBlockObj}
              {initialGames}
              author={page.slug}
              translations={translationStore}
              client:load
            />
          </div>
        )
      }

      {
        page?.blogs.length > 0 && (
          <div class="mt-5">
            <div class="mb-5">
              <h2>Articoli recenti dell'autore</h2>
            </div>
            <div class="grid md:grid-cols-3 gap-3 md:gap-8">
              <BlogCard data={truncatedBlogObj} />
            </div>
          </div>
        )
      }

      {
        page?.casinos.length > 0 && (
          <div class="mt-5">
            <h2>Casino recensiti dall'autore</h2>
            <div class="mb-5">
              <CasinoTable casinos={page?.casinos} />
            </div>
          </div>
        )
      }
    </div>
  </div>
</MainLayout>
