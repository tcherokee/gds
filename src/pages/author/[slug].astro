---

export const prerender = true;

// First and Third Party Plugins
import qs from "qs";

// Types and TypeGuards
import type { GetStaticPaths } from "astro";
import type { TranslationData } from '../../../interfaces/common/types';

// Queries
import { authorPageQs } from "../../../qs/author";

// Helpers
import fetchApi from "../../../lib/strapi";
import { urlTranslate } from '../../../utils/data-store.util';

// Stores
import { getTranslations } from '../../../stores/addTranslations';

// Layouts
import MainLayout from "../../layouts/MainLayout.astro"

// Components
import AuthorCard from "../../components/general/authorCard.astro"
import GameCard from "../../components/games/gameCard.svelte"

export const getStaticPaths = (async () => {
  // Import the QS Query string for custom slugs and prepare it for the API fetch
  const query = qs.stringify(authorPageQs(), { encodeValuesOnly: true });

  // Request to the Fetch Function to get the custom page slugs from the API
  const authorPage = await fetchApi({
    endpoint: "users",
    wrappedByKey: "",
    query: `?${query}`,
  });

  console.log(query)

  return authorPage.map((page) => {
    return {
      params: {
        slug: `${page?.firstName.toLowerCase()}.${page?.lastName.toLowerCase()}`,
      },
      props: { page },
    };
  });
}) satisfies GetStaticPaths;

const { page } = Astro.props;
const { slug } = Astro.params;

const translationStore: TranslationData = getTranslations.get();

// Setting SITE ID
const SITE_ID = import.meta.env.SITE_ID;

// Create SEO Object
const seo = {
    pageTitle: `${page.firstName} ${page.firstName}`,
    metaDescription: page?.content1,
    url: `${import.meta.env.FULL_URL}${urlTranslate[SITE_ID as keyof typeof urlTranslate]['author-page']}/${slug}`
}

console.log('page', slug, page.games)

---

<MainLayout seoData={seo}>
    <div class="blog-bg">
        <div class="section-wrapper">
            <div>
                <div>
                    <AuthorCard  data={page} isFlat={true} />
                </div>
            </div>

            {
            page.games.length > 0 &&
                <div class="mt-5">
                    <div class="mb-5">
                        <h1>Ultimi giochi recensiti dall'autore</h1>
                    </div>
                    <div class="grid md:grid-cols-6 gap-3">
                        {page?.games.map((game, i) => (
                                <GameCard {game} />
                            )
                        )}
                    </div>
                </div>
            }

            <!-- {#if authorData?.data?.attributes?.blogs.length > 0}
                <div class="mt-5">
                    <div class="mb-5">
                        <h1>Articoli recenti dell'autore</h1>
                    </div>
                    <div class="grid md:grid-cols-3 gap-3 md:gap-8">
                        {#each authorData?.data?.attributes?.blogs as blog, index}
                            {#if index <= 8}
                                <div class="mb-3">
                                    <BlogCard {blog} isFlatData />
                                </div>
                            {/if}
                        {/each}
                    </div>
                </div>
            {/if} -->

            <!-- {#if authorData?.data?.attributes?.casinos.length > 0}
                <div class="mt-5">
                    <h1>Casino recensiti dall'autore</h1>
                    <div class="mb-5">
                        <CasinoTableBlock
                            customPage={true}
                            authorCasinos={authorData?.data?.attributes?.casinos}
                            {block}
                        />
                    </div>
                </div>
            {/if} -->
        </div>
    </div>
</MainLayout>