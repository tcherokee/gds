---
import qs from "qs";
import { getTranslations } from "../../utils/api-requests";
import fetchApi from "../../lib/strapi";
// Components
import MainLayout from "../layouts/MainLayout.astro";
import { fetchSitemapData } from "../../utils/fetch-sitemap-data";
import type { CustomPageItem } from "../../interfaces/custom-pages";
import IntroductionWithImage from "../components/general/introWithImage.astro";
import SitemapComponent from "../components/general/sitemap.svelte";
import { Link } from "astro-link";
import type { TSitemapData } from "../../interfaces/common/types";
const translationStore = await getTranslations();
const url = new URL(Astro.request.url);
const page = Number(url.searchParams.get("page")) || 1;

export const sitemapCustomPageQs = () => ({
  fields: ["slug", "title", "urlPath"],
  populate: {
    blocks: {
      populate: {
        content: true,
        image: {
          fields: ["url", "alternativeText", "mime"],
        },
      },
    },
  },
  filters: {
    urlPath: {
      $eq: "sitemaps",
    },
  },
});

const query = qs.stringify(sitemapCustomPageQs(), {
  encodeValuesOnly: true,
});
const sitemapPage = await fetchApi<CustomPageItem[]>({
  endpoint: "custom-pages",
  wrappedByKey: "data",
  query: `?${query}`,
});

const totalRecordsResponse = await fetchApi<{
  casinos: number;
  casinoProviders: number;
  casinoLive: number;
  customPages: number;
  slotCategories: number;
  slotProviders: number;
  games: number;
  author: number;
}>({
  endpoint: "total-records",
  wrappedByKey: "",
  query: ``,
});
const totalRecords = [
  totalRecordsResponse.author,
  totalRecordsResponse.casinos,
  totalRecordsResponse.casinoProviders,
  totalRecordsResponse.casinoLive,
  totalRecordsResponse.customPages,
  totalRecordsResponse.slotCategories,
  totalRecordsResponse.slotProviders,
  totalRecordsResponse.games,
];
console.log(totalRecordsResponse);

let sitemapData: TSitemapData[] = [];
if (page === 1) {
  const sitemapResponse = await fetchSitemapData(totalRecords, page);
  sitemapData = sitemapResponse.data || [];
}

// TODO
let seo = {
  pageTitle: "Sitemap",
  metaDescription: "Sitemap",
  url: "",
};

// Tell the browser to always check the freshness of the cache
Astro.response.headers.set(
  "Cache-Control",
  "public, max-age=0, must-revalidate"
);

// CDN Cache Control
Astro.response.headers.set(
  "Cache-Control",
  "public, max-age=300, s-maxage=3600, stale-while-revalidate=30"
);
---

<MainLayout seoData={seo}>
  <div class="featured-background curve pb-[50px]">
    <div class="container">
      <IntroductionWithImage
        data={sitemapPage?.[0]?.attributes?.blocks?.[0]}
        {translationStore}
      />
    </div>
  </div>
  <div class="xl:container content-auto px-2 pt-5">
    <SitemapComponent
      {translationStore}
      {sitemapData}
      {totalRecords}
      {page}
      client:load
    />
  </div>
</MainLayout>
