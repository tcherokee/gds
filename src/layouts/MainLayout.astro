---
import qs from "qs";
import fetchApi from "../../lib/strapi";

import "../styles/app.postcss";

import type Layout from "../../interfaces/layout";
import type Menu from "../../interfaces/menu.ts";
import type Translation from "../../interfaces/translation.ts";

import Legal from "../components/layout/legal.astro";
import Header from "../components/layout/header.astro";
import Footer from "../components/layout/footer.astro";
import Translations from "../components/helpers/translations.svelte";

const layoutQuery = qs.stringify(
  {
    fields: [
      "legalText",
      "footerContent",
      "gameInfoText",
      "cookiesHeaderText",
      "cookiesDescription",
      "cookiesUrl",
      "cookiesLinkText",
    ],
    populate: {
      footerImages: {
        fields: ["imageName", "imageLink"],
        populate: {
          image: {
            fields: ["url", "width", "height"],
          },
        },
      },
      Logo: {
        fields: ["url", "width", "height"],
      },
      homeBreadcrumbs: {
        fields: ["breadCrumbText", "breadCrumbUrl"],
      },
      gamesBreadcrumbs: {
        fields: ["breadCrumbText", "breadCrumbUrl"],
      },
      casinoBreadcrumbs: {
        fields: ["breadCrumbText", "breadCrumbUrl"],
      },
      blogBreadcrumbs: {
        fields: ["breadCrumbText", "breadCrumbUrl"],
      },
      slotCasinosBreadcrumbs: {
        fields: ["breadCrumbText", "breadCrumbUrl"],
      },
      providersBreadcrumbs: {
        fields: ["breadCrumbText", "breadCrumbUrl"],
      },
      categoriesBreadcrumbs: {
        fields: ["breadCrumbText", "breadCrumbUrl"],
      },
      casinoProvidersBreadcrumbs: {
        fields: ["breadCrumbText", "breadCrumbUrl"],
      },
      filterProviders: {
        fields: ["slug"],
        populate: {
          images: {
            fields: ["url"],
          },
        },
      },
      most_loved_casinos: {
        fields: ["slug", "title"],
        populate: {
          logoIcon: {
            fields: ["url"],
          },
          bonusSection: true,
        },
      },
      no_deposit_casinos: {
        fields: ["slug", "title"],
        populate: {
          logoIcon: {
            fields: ["url"],
          },
          noDepositSection: true,
        },
      },
      free_spin_casinos: {
        fields: ["slug", "title"],
        populate: {
          logoIcon: {
            fields: ["url"],
          },
          freeSpinsSection: true,
        },
      },
      backgroundImage: {
        fields: ["url"],
      },
    },
  },
  {
    encodeValuesOnly: true,
  },
);

const menusQuery = qs.stringify(
  {
    fields: ["title"],
    populate: {
      items: {
        fields: ["title", "url", "order"],
        populate: {
          images: {
            fields: ["url"],
          },
          children: {
            fields: ["title"],
          },
        },
      },
    },
    pagination: {
      page: 1,
      pageSize: 20,
    },
  },
  {
    encodeValuesOnly: true, // This helps to encode values like spaces and special characters without encoding the entire URL
  },
);

const translationQuery = qs.stringify(
  {
    populate: {
      translation: "*",
    },
  },
  {
    encodeValuesOnly: true,
  },
);

const queries = {
  layout: layoutQuery,
  menus: menusQuery,
  translation: translationQuery,
};

const endpoints = ["layout", "menus", "translation"];

const responses = await Promise.all(
  endpoints.map((endpoint) =>
    fetchApi({
      endpoint: endpoint,
      wrappedByKey: "data",
      query:
        endpoint === "menus"
          ? `?nested&${queries[endpoint]}`
          : `?${queries[endpoint]}`,
    }),
  ),
);

const layout = responses[0] as Layout;
const menus = responses[1] as Menu;
const translation = responses[2] as Translation;

// Process menu data
const processedMenus = menus.reduce((acc, menu) => {
  const title = menu.attributes.title;
  const items = menu.attributes.items.data;
  if (
    title === "Sub Navigation" ||
    title === "Main Navigation" ||
    title === "Footer Navigation" ||
    title === "Footer Navigations"
  ) {
    acc[`${title.toLowerCase().replace(/ /g, "")}`] = items;
  }

  return acc;
}, {});
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>title</title>
  </head>
  <body class="preload">
    <Translations translations={translation} />
    <main>
      <Legal legalText={layout?.attributes?.legalText} />
      <header class="bg-navbar-bkg">
        <Header
          mainNavigation={processedMenus?.mainnavigation}
          logo={layout?.attributes?.Logo?.data?.attributes?.url}
        />
      </header>
      <slot />
    </main>
    <Footer
      footerContent={layout?.attributes?.footerContent}
      footerImages={layout?.attributes?.footerImages}
      footerNavigation={processedMenus?.footernavigation}
      footerNavigations={processedMenus.footernavigations}
    />
  </body>
  <script
    is:inline
    src="https://cdn.jsdelivr.net/npm/@meilisearch/instant-meilisearch/dist/instant-meilisearch.umd.min.js"
  ></script>
  <script is:inline src="https://cdn.jsdelivr.net/npm/instantsearch.js@4"
  ></script>
</html>

<style lang="postcss" is:global>
	.preload {
		animation: none !important;
		animation-duration: 0s !important;
		transition: none !important;
	}
</style>
