---
//1st and 3rd Party Tools
import qs from "qs";
import { Tooltips } from "astro-tooltips";
import { ViewTransitions } from "astro:transitions";
import LDTag from "../components/helpers/LDTag.svelte";

// Types
import type { BreadcrumbData } from "../../interfaces/common/types";

// QS Query Strings
import { layoutQs, menuQs } from "../../qs/layout.ts";

// Helpers
import fetchApi from "../../lib/strapi";

//Styles
import "../styles/app.postcss";

//Types and TypeGuards
import type { LayoutData } from "../../interfaces/layout";
import type { NavigationItem, ProcessedMenus } from "../../interfaces/menu.ts";
import {
  isMainLayoutData,
  isNavigationItemArray,
} from "../../interfaces/common/typeguards";

//Components
import Legal from "../components/layout/legal.astro";
import Header from "../components/layout/header.astro";
import Footer from "../components/layout/footer.astro";
import Newsletter from "../components/layout/newsletter.astro";
import CookiesConsent from "../components/general/cookiesConsent.svelte";
import { getTranslations } from "../../utils/api-requests";

const siteID = `${import.meta.env.SITE_ID}`;

const { crumbLocation, crumbTitle, otherSchema } = Astro.props;

const translationStore = await getTranslations();

// Setting up the queries in array for use in the promise all map
const queries = {
  layout: qs.stringify(layoutQs(), { encodeValuesOnly: true }),
  menus: qs.stringify(menuQs(), { encodeValuesOnly: true }),
};

// Set the types in an array for use in the promise all map
type EndpointTypes = {
  layout: LayoutData;
  menus: NavigationItem[];
};

type Endpoint = keyof EndpointTypes;

// Set the endpoint slugs in an array for use in the promise all
const endpoints: Endpoint[] = ["layout", "menus"];

// Promise All Fetch to fetch all the api requests in parrallel
const responses = await Promise.all(
  endpoints.map((endpoint) =>
    fetchApi<EndpointTypes[typeof endpoint]>({
      endpoint,
      wrappedByKey: "data",
      query:
        endpoint === "menus"
          ? `?nested&${queries[endpoint]}`
          : `?${queries[endpoint]}`,
    })
  )
);

// Using type guards to safely cast the types
const layout = isMainLayoutData(responses[0])
  ? responses[0]
  : console.error("Invalid layout data");
const menu = isNavigationItemArray(responses[1])
  ? responses[1]
  : console.error("Invalid menu data");

// Process menu data
const processedMenus: ProcessedMenus = (menu as NavigationItem[]).reduce(
  (acc: ProcessedMenus, menu: NavigationItem) => {
    const title = menu.attributes.title;
    const items = menu.attributes.items.data;
    if (
      title === "Sub Navigation" ||
      title === "Main Navigation" ||
      title === "Footer Navigation" ||
      title === "Footer Navigations"
    ) {
      acc[`${title.toLowerCase().replace(/ /g, "")}`] = items;
    }

    return acc;
  },
  {}
);

const favicon = `https://www.${import.meta.env.HOSTNAME}/favicon-${import.meta.env.SITE_ID}.png`;

const { seoData, isHomePage = false, schemaData = null } = Astro.props;

// Schema Stuff
let pageSchema = [];

// Breadcrumbs Schema
let crumbData: BreadcrumbData[] = crumbTitle
  ? [
      {
        breadCrumbText: crumbTitle,
        breadCrumbUrl: "",
      },
    ]
  : [];

switch (crumbLocation) {
  case "games":
    if (Array.isArray(layout?.attributes?.gamesBreadcrumbs)) {
      crumbData.unshift(...layout.attributes.gamesBreadcrumbs);
    }
    break;
  case "home":
    if (Array.isArray(layout?.attributes?.homeBreadcrumbs)) {
      crumbData.unshift(...layout.attributes.homeBreadcrumbs);
    }
  case "categories":
    if (Array.isArray(layout?.attributes?.categoriesBreadcrumbs)) {
      crumbData.unshift(...layout.attributes.categoriesBreadcrumbs);
    }
  case "providers":
    if (Array.isArray(layout?.attributes?.providersBreadcrumbs)) {
      crumbData.unshift(...layout.attributes.providersBreadcrumbs);
    }
  case "casino-page":
    if (Array.isArray(layout?.attributes?.casinoBreadcrumbs)) {
      crumbData.unshift(...layout.attributes.casinoBreadcrumbs);
    }
  case "casinoProviders":
    if (Array.isArray(layout?.attributes?.casinoProviders)) {
      crumbData.unshift(...layout.attributes.casinoProviders);
    }
  default:
}

// Using a if statement here to prevent duplicate breadcrumb schema on custom pages.
if (crumbLocation) {
  const BreadcrumbSchema = {
    "@context": "https://schema.org",
    "@type": "BreadcrumbList",
    itemListElement: crumbData?.map((bread, i) => {
      return {
        "@type": "ListItem",
        position: i + 1,
        name: bread?.breadCrumbText,
        ...(bread?.breadCrumbUrl && { item: bread?.breadCrumbUrl }),
      };
    }),
  };

  pageSchema.push(BreadcrumbSchema);
}

if (otherSchema) {
  pageSchema.push(...otherSchema);
}
---

<html lang="it">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={seoData.metaDescription} />
    <meta name="viewport" content="width=device-width" />
    <link rel="canonical" href={`${seoData.url}/`} />
    <link rel="sitemap" href="/sitemap-index.xml" />
    <link
      rel="stylesheet"
      href="https://unpkg.com/flickity@2/dist/flickity.min.css"
    />
    <script src="https://unpkg.com/flickity@2/dist/flickity.pkgd.min.js"
    ></script>
    {seoData?.author && <meta name="author" content={seoData?.author} />}
    <link rel="icon" type="image/svg+xml" href={favicon} />
    <meta name="generator" content={Astro.generator} />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Lato:wght@700&family=Roboto:ital,wght@0,400;0,700;1,400;1,700&display=swap"
      rel="stylesheet"
    />

    <title>{seoData.pageTitle}</title>
    <!-- <ViewTransitions /> -->
    <Tooltips placement="auto" maxWidth="300" />

    {schemaData && <LDTag schema={schemaData} client:load />}

    <LDTag schema={pageSchema} client:load />
  </head>
  <body>
    <!-- <Analytics client:load /> -->
    <main>
      {
        layout?.attributes?.legalText && (
          <Legal legalText={layout?.attributes?.legalText} />
        )
      }
      <header class="bg-navbar-bkg">
        <Header
          mainNavigation={processedMenus?.mainnavigation}
          subNavigation={processedMenus?.subnavigation}
          logo={layout?.attributes?.Logo}
          {translationStore}
        />
      </header>
      <slot />
    </main>
    <!-- <Newsletter /> -->
    <Footer
      footerContent={layout?.attributes?.footerContent}
      footerImages={layout?.attributes?.footerImages}
      footerNavigation={processedMenus?.footernavigation}
      footerNavigations={processedMenus.footernavigations}
      {translationStore}
    />
    <CookiesConsent
      headerText={layout?.attributes?.cookiesHeaderText + ""}
      description={layout?.attributes?.cookiesDescription + ""}
      link={layout?.attributes?.cookiesUrl + ""}
      linkText={layout?.attributes?.cookiesLinkText + ""}
      client:load
    />
    <style lang="scss">
      :global(.tippy-box[data-theme="default"]) {
        padding: 0 !important;
        max-width: 300px !important;
        @apply text-[10px] text-black leading-[16px] border border-secondary-tint bg-white rounded-[4px];
        :global(p) {
          font-size: 10px !important;
          line-height: 1rem;
          margin-bottom: 0 !important;
        }
        :global(.tippy-arrow) {
          color: theme("colors.secondary-tint");
        }
      }
      /* :global(.tippy-box[data-theme='default']) {
      font-size: 10px: !important;
    } */
    </style>
    <script is:inline src="https://swetrix.org/swetrix.js" defer></script>
    <script define:vars={{ swetrixId: import.meta.env.PUBLIC_SWETRIX_ID }}>
      document.addEventListener("DOMContentLoaded", function () {
        swetrix.init(swetrixId, {
          devMode: false,
          apiURL: "https://api.stats.kenshomedia.com/log",
        });
        swetrix.trackViews();
      });
    </script>

    <noscript is:inline>
      <img
        src="https://api.stats.kenshomedia.com/log/noscript?pid=6wNdNPt3U82T"
        alt="analytics-pixel"
        referrerpolicy="no-referrer-when-downgrade"
      />
    </noscript>
  </body>
</html>
