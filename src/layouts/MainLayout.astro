---
import qs from "qs";
import { layoutQs, menuQs, translationsQs } from "../../qs/layout.ts"

import fetchApi from "../../lib/strapi";

import "../styles/app.postcss";

import type { Layout } from "../../interfaces/layout";
import type { Menu, processedMenus} from "../../interfaces/menu.ts";
import type { Translation } from "../../interfaces/translation.ts"

import Legal from "../components/layout/legal.astro";
import Header from "../components/layout/header.astro";
import Footer from "../components/layout/footer.astro";
import Translations from "../components/helpers/translations.svelte";

const queries = {
  layout: qs.stringify(layoutQs(), {encodeValuesOnly: true}),
  menus: qs.stringify(menuQs(), {encodeValuesOnly: true}),
  translation: qs.stringify(translationsQs(), {encodeValuesOnly: true})
};

// Set the types in an array for use in the promise all
type EndpointTypes = {
  layout: Layout;
  menus: Menu;
  translation: Translation;
};

type Endpoint = keyof EndpointTypes;

// Set the endpoint slugs in an array for use in the promise all
const endpoints: Endpoint[] = ["layout", "menus", "translation"];

// Promise All Fetch to fetch all the api requests in parrallel
const responses = await Promise.all(
  endpoints.map((endpoint) =>
    fetchApi<EndpointTypes[typeof endpoint]>({
      endpoint,
      wrappedByKey: "data",
      query: endpoint === "menus" ? `?nested&${queries[endpoint]}` : `?${queries[endpoint]}`,
    }),
  ),
);

const layout = responses[0] as Layout;
const menu = responses[1] as Menu;
const translation = responses[2] as Translation;

// Process menu data
const processedMenus: ProcessedMenus = menu.reduce((acc: ProcessedMenus, menu: Menu) => {
  const title = menu.attributes.title;
  const items = menu.attributes.items.data;
  if (
    title === "Sub Navigation" ||
    title === "Main Navigation" ||
    title === "Footer Navigation" ||
    title === "Footer Navigations"
  ) {
    acc[`${title.toLowerCase().replace(/ /g, "")}`] = items;
  }

  return acc;
}, {});
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>title</title>
  </head>
  <body class="preload">
    <Translations translations={translation} />
    <main>
      <Legal legalText={layout?.attributes?.legalText} />
      <header class="bg-navbar-bkg">
        <Header
          mainNavigation={processedMenus?.mainnavigation}
          logo={layout?.attributes?.Logo?.data?.attributes?.url}
        />
      </header>
      <slot />
    </main>
    <Footer
      footerContent={layout?.attributes?.footerContent}
      footerImages={layout?.attributes?.footerImages}
      footerNavigation={processedMenus?.footernavigation}
      footerNavigations={processedMenus.footernavigations}
    />
  </body>
  <script
    is:inline
    src="https://cdn.jsdelivr.net/npm/@meilisearch/instant-meilisearch/dist/instant-meilisearch.umd.min.js"
  ></script>
  <script is:inline src="https://cdn.jsdelivr.net/npm/instantsearch.js@4"
  ></script>
</html>

<style lang="postcss" is:global>
	.preload {
		animation: none !important;
		animation-duration: 0s !important;
		transition: none !important;
	}
</style>
