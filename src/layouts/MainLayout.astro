---
//1st and 3rd Party Tools
import qs from "qs";
import { Tooltips } from 'astro-tooltips'

// QS Query Strings
import { layoutQs, menuQs } from "../../qs/layout.ts"

// Helpers
import fetchApi from "../../lib/strapi";

//Styles
import "../styles/app.postcss";

//Types and TypeGuards
import type { LayoutData } from "../../interfaces/layout";
import type { NavigationItem, ProcessedMenus} from "../../interfaces/menu.ts";
import { isMainLayoutData, isNavigationItemArray } from "../../interfaces/common/typeguards"

//Components
import Legal from "../components/layout/legal.astro";
import Header from "../components/layout/header.astro";
import Footer from "../components/layout/footer.astro";

// Setting up the queries in array for use in the promise all map
const queries = {
  layout: qs.stringify(layoutQs(), {encodeValuesOnly: true}),
  menus: qs.stringify(menuQs(), {encodeValuesOnly: true})
};

// Set the types in an array for use in the promise all map
type EndpointTypes = {
  layout: LayoutData;
  menus: NavigationItem[];
};

type Endpoint = keyof EndpointTypes;

// Set the endpoint slugs in an array for use in the promise all
const endpoints: Endpoint[] = ["layout", "menus"];

// Promise All Fetch to fetch all the api requests in parrallel
const responses = await Promise.all(
  endpoints.map((endpoint) =>
    fetchApi<EndpointTypes[typeof endpoint]>({
      endpoint,
      wrappedByKey: "data",
      query: endpoint === "menus" ? `?nested&${queries[endpoint]}` : `?${queries[endpoint]}`,
    }),
  ),
);

// Using type guards to safely cast the types
const layout = isMainLayoutData(responses[0]) ? responses[0] : console.error("Invalid layout data");
const menu = isNavigationItemArray(responses[1]) ? responses[1] : console.error("Invalid menu data");

// Process menu data
const processedMenus: ProcessedMenus = (menu as NavigationItem[]).reduce((acc: ProcessedMenus, menu: NavigationItem) => {
  const title = menu.attributes.title;
  const items = menu.attributes.items.data;
  if (
    title === "Sub Navigation" ||
    title === "Main Navigation" ||
    title === "Footer Navigation" ||
    title === "Footer Navigations"
  ) {
    acc[`${title.toLowerCase().replace(/ /g, "")}`] = items;
  }

  return acc;
}, {});

const favicon = `https://www.${import.meta.env.HOSTNAME}/favicon-${import.meta.env.SITE_ID}.png`;

const { seoData } = Astro.props
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={seoData.metaDescription} />
    <meta name="viewport" content="width=device-width" />
    <link rel="canonical" href={seoData.url} />
    {seoData?.author && <meta name="author" content={seoData?.author} />}
    <link rel="icon" type="image/svg+xml" href={favicon} />
    <meta name="generator" content={Astro.generator} />
    <title>{seoData.pageTitle}</title>
    <Tooltips />
  </head>
  <body>
    <main>
      {layout?.attributes?.legalText && <Legal legalText={layout?.attributes?.legalText} />}
      <header class="bg-navbar-bkg">
        <Header
          mainNavigation={processedMenus?.mainnavigation}
          logo={layout?.attributes?.Logo?.data?.attributes?.url}
        />
      </header>
      <slot />
    </main>
    <Footer
      footerContent={layout?.attributes?.footerContent}
      footerImages={layout?.attributes?.footerImages}
      footerNavigation={processedMenus?.footernavigation}
      footerNavigations={processedMenus.footernavigations}
    />
  </body>
</html>
