---
import qs from "qs";
import { Tooltips } from 'astro-tooltips'
import { layoutQs, menuQs } from "../../qs/layout.ts"

import fetchApi from "../../lib/strapi";

import "../styles/app.postcss";

import type { LayoutData } from "../../interfaces/layout";
import type { NavigationItem, ProcessedMenus} from "../../interfaces/menu.ts";

import Legal from "../components/layout/legal.astro";
import Header from "../components/layout/header.astro";
import Footer from "../components/layout/footer.astro";

const queries = {
  layout: qs.stringify(layoutQs(), {encodeValuesOnly: true}),
  menus: qs.stringify(menuQs(), {encodeValuesOnly: true})
};

// Set the types in an array for use in the promise all
type EndpointTypes = {
  layout: LayoutData;
  menus: NavigationItem[];
};

type Endpoint = keyof EndpointTypes;

// Set the endpoint slugs in an array for use in the promise all
const endpoints: Endpoint[] = ["layout", "menus"];

// Promise All Fetch to fetch all the api requests in parrallel
const responses = await Promise.all(
  endpoints.map((endpoint) =>
    fetchApi<EndpointTypes[typeof endpoint]>({
      endpoint,
      wrappedByKey: "data",
      query: endpoint === "menus" ? `?nested&${queries[endpoint]}` : `?${queries[endpoint]}`,
    }),
  ),
);

// Type guard functions to check the types at runtime
const isLayoutData = (data: any): data is LayoutData => {
    return data !== null &&
    typeof data === 'object' &&
    typeof data.id === 'number' &&
    data.attributes !== undefined &&
    typeof data.attributes.legalText === 'string' &&
    typeof data.attributes.footerContent === 'string';
}

const isNavigationItemArray = (data: any): data is NavigationItem[] => {
    const isImageData = (imgData: any): imgData is ImageData => 
        imgData && typeof imgData.id === 'number' && imgData.attributes && typeof imgData.attributes.url === 'string';

    const isMenuItem = (item: any): item is NavigationItem => 
        item && typeof item.id === 'number' && item.attributes 
        && typeof item.attributes.title === 'string' 
        && (!item.attributes.images || (item.attributes.images.data === null || isImageData(item.attributes.images.data)))
        && Array.isArray(item.attributes.children.data) 
        && item.attributes.children.data.every(isMenuItem);

    return Array.isArray(data) && data.every(menuItem => 
        menuItem && typeof menuItem.id === 'number' && menuItem.attributes 
        && typeof menuItem.attributes.title === 'string' 
        && Array.isArray(menuItem.attributes.items.data) 
        && menuItem.attributes.items.data.every(isMenuItem));
}

// Using type guards to safely cast the types
const layout = isLayoutData(responses[0]) ? responses[0] : console.error("Invalid layout data");
const menu = isNavigationItemArray(responses[1]) ? responses[1] : console.error("Invalid menu data");

// Process menu data
const processedMenus: ProcessedMenus = (menu as NavigationItem[]).reduce((acc: ProcessedMenus, menu: NavigationItem) => {
  const title = menu.attributes.title;
  const items = menu.attributes.items.data;
  if (
    title === "Sub Navigation" ||
    title === "Main Navigation" ||
    title === "Footer Navigation" ||
    title === "Footer Navigations"
  ) {
    acc[`${title.toLowerCase().replace(/ /g, "")}`] = items;
  }

  return acc;
}, {});

<<<<<<< HEAD
=======
// Set Translation Store
translation && addTranslations(translation)

const { pageTitle } = Astro.props
>>>>>>> casino-review-page
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{pageTitle}</title>
    <Tooltips />
  </head>
  <body>
    <main>
      {layout?.attributes?.legalText && <Legal legalText={layout?.attributes?.legalText} />}
      <header class="bg-navbar-bkg">
        <Header
          mainNavigation={processedMenus?.mainnavigation}
          logo={layout?.attributes?.Logo?.data?.attributes?.url}
        />
      </header>
      <slot />
    </main>
    <Footer
      footerContent={layout?.attributes?.footerContent}
      footerImages={layout?.attributes?.footerImages}
      footerNavigation={processedMenus?.footernavigation}
      footerNavigations={processedMenus.footernavigations}
    />
  </body>
</html>
