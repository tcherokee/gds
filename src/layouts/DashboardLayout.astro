---
//1st and 3rd Party Tools
import { Tooltips } from "astro-tooltips";
import qs from "qs";

// QS Query Strings
import { layoutQs, mainNavigationQs } from "../../qs/layout.ts";

// Helpers
import fetchApi from "../../lib/strapi";

//Styles
import "../styles/app.postcss";

//Types and TypeGuards
import { isMainLayoutData } from "../../interfaces/common/typeguards";
import type { LayoutData } from "../../interfaces/layout";
import type { MainNavigationItem, MainNavItem } from "../../interfaces/menu.ts";

//Components
import DashboardFooter from "../components/dashboard/dashboardFooter.svelte";
import DashboardSideNav from "../components/dashboard/dashboardSideNav.svelte";
import Header from "../components/layout/header.astro";
import Legal from "../components/layout/legal.astro";

import { ViewTransitions } from "astro:transitions";

// Setting up the queries in array for use in the promise all map
const queries = {
  layout: qs.stringify(layoutQs(), { encodeValuesOnly: true }),
  "main-navigation": qs.stringify(mainNavigationQs(), {
    encodeValuesOnly: true,
  }),
};

// Set the types in an array for use in the promise all map
type EndpointTypes = {
  layout: LayoutData;
  "main-navigation": MainNavigationItem;
};

type Endpoint = keyof EndpointTypes;

// Set the endpoint slugs in an array for use in the promise all
const endpoints: Endpoint[] = ["layout", "main-navigation"];

// Promise All Fetch to fetch all the api requests in parrallel
const responses = await Promise.all(
  endpoints.map((endpoint) =>
    fetchApi<EndpointTypes[typeof endpoint]>({
      endpoint,
      wrappedByKey: "data",
      query: `?${queries[endpoint]}`,
    })
  )
);

// Using type guards to safely cast the types
const layout = isMainLayoutData(responses[0])
  ? responses[0]
  : console.error("Invalid layout data");

const processedMainNavigation = (navigation: MainNavItem[]) => {
  return navigation.map((item) => {
    return {
      id: item.id,
      attributes: {
        title: item.title,
        url: item.url,
        children: {
          data: item.subMenu.map((subMenuItem) => {
            return {
              id: subMenuItem.id,
              attributes: {
                title: subMenuItem.title,
                url: subMenuItem.url,
              },
            };
          }),
        },
        images: {
          data: {
            ...item?.images?.data,
          },
        },
      },
    };
  });
};
const mainNavigation = responses[1]
  ? processedMainNavigation(
      (responses[1] as MainNavigationItem).attributes.mainNavigation
    )
  : [];
const subNavigation = responses[1]
  ? processedMainNavigation(
      (responses[1] as MainNavigationItem).attributes.subNavigation
    )
  : [];

const { translationStore } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <ViewTransitions />
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <meta name="robots" content="noindex" />
    <link
      rel="icon"
      type="image/svg+xml"
      href={`https://www.${import.meta.env.HOSTNAME}/favicon-${
        import.meta.env.SITE_ID
      }.png`}
    />
    <meta name="generator" content={Astro.generator} />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Lato:wght@700&family=Roboto:ital,wght@0,400;0,700;1,400;1,700&display=swap"
      rel="stylesheet"
    />
    <title>User Dashboard</title>
    <Tooltips />
  </head>
  <body class="h-screen overflow-hidden overflow-y-auto">
    <main class="h-full">
      {
        layout?.attributes?.legalText && (
          <div class="sticky z-30 top-0">
            <Legal legalText={layout?.attributes?.legalText} />
          </div>
        )
      }
      <header class="bg-navbar-bkg sticky top-[35px] z-30">
        <Header
          mainNavigation={mainNavigation.length > 0 ? mainNavigation : []}
          subNavigation={subNavigation.length > 0 ? subNavigation : []}
          logo={layout?.attributes?.Logo}
        />
      </header>
      <div
        class="dashboard-bg -mb-5 mx-auto flex w-full h-full items-start py-10"
      >
        <DashboardSideNav
          slotMachineURL={subNavigation?.[0]?.attributes?.url}
          pageUrl={Astro.url.pathname}
          translations={translationStore}
          client:load
        />
        <div
          class="w-full px-4 h-full pb-[50px] overflow-hidden overflow-y-auto"
        >
          <slot data-slot-machine-url={subNavigation[0].attributes.url} />
        </div>
      </div>
    </main>
    <!-- <footer class="sticky bottom-0 z-30"> -->
    <DashboardFooter
      pageUrl={Astro.url.pathname}
      translations={translationStore}
      client:load
    />
    <!-- </footer> -->
    <script is:inline src="https://swetrix.org/swetrix.js" defer></script>
    <script define:vars={{ swetrixId: import.meta.env.PUBLIC_SWETRIX_ID }}>
      document.addEventListener("DOMContentLoaded", function () {
        swetrix.init(swetrixId, {
          devMode: false,
          apiURL: "https://api.stats.kenshomedia.com/log",
        });
        swetrix.trackViews();
      });
    </script>

    <noscript>
      <img
        src="https://api.stats.kenshomedia.com/log/noscript?pid=6wNdNPt3U82T"
        alt="analytics-pixel"
        referrerpolicy="no-referrer-when-downgrade"
      />
    </noscript>
  </body>
</html>
