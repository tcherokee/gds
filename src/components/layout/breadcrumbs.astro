---

// First and Third Party Plugins
import qs from 'qs'
import { Link } from "astro-link"

// Helpers
import fetchApi from '../../../lib/strapi';

// QS Query String
import type { LayoutData } from '../../../interfaces/layout';
import { layoutQs } from '../../../qs/layout';

const {breadcrumbs = [], breadcrumbKey} = Astro.props


// Import the QS Query string for custom slugs and prepare it for the API fetch
const query = qs.stringify(layoutQs(), {encodeValuesOnly: true})

// Request to the Fetch Function to get the custom page slugs from the API
const layout = await fetchApi<LayoutData>({
    endpoint: 'layout',
    wrappedByKey: 'data',
    query: `?${query}`
})

// const {attributes: {casinoProvidersBreadcrumbs}} = layout;

let pageBreadcrumbs = [
	...breadcrumbs
]
if (breadcrumbKey && layout.attributes[breadcrumbKey]) {
    pageBreadcrumbs.unshift(...layout.attributes[breadcrumbKey])
}

---
<div class="custom-breadcrumbs bg-breadcrumb-bkg">
	<div class="xl:container py-2 px-2">
		<div class="text-xs leading-[12px] text-breadcrumb-text uppercase">

            { pageBreadcrumbs.length && 
                	pageBreadcrumbs.map((breadcrumb:any, i:number) => (
                       breadcrumb.breadCrumbUrl !== null ? 
                       <Link href={breadcrumb.breadCrumbUrl}>{breadcrumb.breadCrumbText}</Link> 
                       <span class="my-0 mr-[5px] ml-[2px] text-breadcrumb-separator">
                            {pageBreadcrumbs.length > i + 1 ? '/' : ''}
                        </span>
                       : 
                       <span>{breadcrumb.breadCrumbText}</span>

                        
                    ))
            }
		</div>
	</div>
</div>

<style lang="scss">
	.custom-breadcrumbs {
		:global(a) {
			@apply underline;
			color: theme('colors.breadcrumb-text');
		}
	}
</style>
