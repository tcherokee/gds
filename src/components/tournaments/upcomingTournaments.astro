---
// Component: Past Tournament Results Table
// Description: Displays a table of completed tournaments with their status and details

// import unix date formatter
import { formatUnixTimestamp } from "../../../lib/unixDateFormatter";

// Import types
import type { Tournament } from "../../../interfaces/tournaments";
import type { TournamentResponse } from "../../../interfaces/tournaments";
// Import tournament API
import { tournamentApi } from "../../../lib/tournamentapi";

// Props interface
interface Props {
  tournaments: Tournament[] | null;
}

// Initialize state variables
let tournaments: Tournament[] = [];
let error = null;

// Filter tournaments that are current or upcoming
const currentTime = Math.floor(Date.now() / 1000); // Convert to Unix timestamp

const getTournaments = async () => {
  return tournamentApi<TournamentResponse>("getTournamentFullSchedule");
};

// Fetch all tournament data
try {
  const tournamentsResponse = await getTournaments();
  tournaments = tournamentsResponse.data || [];
} catch (e) {
  console.error("Error fetching tournaments:", e);
  error = e instanceof Error ? e.message : "Unknown error occurred";
}

// Helper function to safely format the timestamp to DD/MM/YY
const formatTimestamp = (timestamp: number | string | undefined) => {
  if (!timestamp) return "Date not available";

  // Convert string to number if needed
  const numericTimestamp =
    typeof timestamp === "string" ? parseInt(timestamp, 10) : timestamp;

  // Check if we have a valid number
  if (isNaN(numericTimestamp)) return "Invalid date";

  const date = new Date(numericTimestamp * 1000);

  return date.toLocaleDateString("en-GB", {
    day: "2-digit",
    month: "2-digit",
    year: "2-digit",
  });
};

// Helper function to format time difference
const formatTimer = (timestamp: number): string => {
  const seconds = timestamp;
  const days = Math.floor(seconds / (24 * 60 * 60));
  const hours = Math.floor((seconds % (24 * 60 * 60)) / (60 * 60));
  const minutes = Math.floor((seconds % (60 * 60)) / 60);
  const remainingSeconds = Math.floor(seconds % 60);

  if (days > 0) {
    return `${days}d ${hours}h ${minutes}m`;
  } else if (hours > 0) {
    return `${hours}h ${minutes}m ${remainingSeconds}s`;
  } else {
    return `${minutes}m ${remainingSeconds}s`;
  }
};
---

<!-- Tournament Results Section -->
<section class="py-20 px-4">
  <div class="mx-auto">
    <!-- Section Header -->
    <h2 class="text-4xl font-bold mb-12 text-center">
      Current & Upcoming Tournaments
    </h2>

    {
      error && (
        <div class="bg-red-500/10 border border-red-500 text-red-500 p-4 mb-8 rounded-lg">
          Error loading tournaments: {error}
        </div>
      )
    }

    <!-- Tournament Table -->
    <div class="overflow-x-auto">
      <table class="w-full">
        <thead>
          <tr class="border-b border-gray-700">
            <th class="text-left py-4 px-6">Tournament</th>
            <th class="text-left py-4 px-6">Timer</th>
            <th class="text-left py-4 px-6">Prize Pool</th>
            <th class="text-left py-4 px-6">Spins/Daily Spins</th>
            <th class="text-left py-4 px-6">Status</th>
            <th class="w-48"></th>
          </tr>
        </thead>
        <!-- Table Body -->
        <tbody>
          {
            tournaments.map((tournament: Tournament) => (
              <tr class="border-b border-gray-800 hover:bg-gray-800/50">
                <td class="py-4 px-6">
                  <div class="flex items-center gap-4">
                    {tournament.logoImage && (
                      <img
                        src={tournament.logoImage}
                        alt={tournament.name}
                        class="h-8 w-8 object-contain"
                        onerror="this.style.display='none'"
                      />
                    )}
                    <span class="font-semibold">{tournament.name}</span>
                  </div>
                </td>
                <td class="py-4 px-6">
                  {(() => {
                    const startTime = typeof tournament.startDate === "string"
                      ? parseInt(tournament.startDate, 10)
                      : tournament.startDate;
                    const isLive = currentTime >= startTime;
                    
                    // Parse timer value
                    const timerValue = typeof tournament.timer === "string"
                      ? parseInt(tournament.timer, 10)
                      : tournament.timer;
                    
                    if (isLive) {
                      return `Finishes in ${formatTimer(timerValue)}`;
                    } else {
                      return `Starts in ${formatTimer(timerValue)}`;
                    }
                  })()}
                </td>
                <td class="py-4 px-6">
                  {(() => {
                    const prize =
                      typeof tournament.prizePool === "string"
                        ? parseFloat(tournament.prizePool)
                        : tournament.prizePool;

                    return !isNaN(prize)
                      ? new Intl.NumberFormat("en-GB", {
                          style: "currency",
                          currency: "EUR",
                          minimumFractionDigits: 0,
                          maximumFractionDigits: 0,
                        }).format(prize)
                      : "N/A";
                  })()}
                </td>
                <td class="py-4 px-6">
                  {`${tournament.dailySpins ?? "Unlimited"} / ${tournament.spins}`}
                </td>
                <td class="py-4 px-6">
                  <span class="inline-flex items-center px-2.5 py-0.5 rounded-full font-medium bg-green-500/10 text-green-500">
                    {(() => {
                      const startTime =
                        typeof tournament.startDate === "string"
                          ? parseInt(tournament.startDate, 10)
                          : tournament.startDate;
                      return currentTime >= startTime ? "Live" : "Upcoming";
                    })()}
                  </span>
                </td>
                <td class="py-4 px-6 text-right w-48">
                  <button class="inline-flex items-center gap-2 px-6 py-2 bg-misc text-white rounded-lg transition-colors hover:bg-misc/80">
                    Join Now
                  </button>
                </td>
              </tr>
            ))
          }
        </tbody>
      </table>
    </div>
  </div>
</section>
