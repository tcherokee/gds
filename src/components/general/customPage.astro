---
import qs from "qs";

import { sortOptions } from "../../../stores/sortFilters";

// Helpers
import {
  loadComponents,
  mapBlocksToDynamicComponents,
} from "../../../lib/loadBlockComponents";
import fetchApi from "../../../lib/strapi";

// Query Strings
import { customPageQs } from "../../../qs/customPages";
import { gamesQs } from "../../../qs/games.ts";

import {
  slotCategories as slotCategoriesResponse,
  slotProviders as slotProvidersResponse,
  getTranslations as translationResponse,
} from "../../../utils/api-requests";

//types and typeguards
import type {
  Block,
  BreadcrumbData,
  CasinoListBlock,
  CustomGameList,
  Faqs,
  GameFilters,
  HowToGroup,
  TCasinoLiveVideo,
  TGameListBlock,
  TProviderAttributesOnly,
} from "../../../interfaces/common/types.ts";
import type { CustomPageItem } from "../../../interfaces/custom-pages";

// Import Svelte Components
import GameListBlock from "../blocks/gameListBlock.svelte";
import CasinoTable from "../casino/casinoTable.svelte";
import CasinoLiveVideo from "../general/casinoLiveVideo.svelte";

// Astro Layouts & Components
import type { TUserGame } from "../../../interfaces/games";
import MainLayout from "../../layouts/MainLayout.astro";
import CasinoSidebar from "../casino/casinoSidebar.astro";
import Breadcrumbs from "../layout/breadcrumbs.astro";
import AuthorCard from "./authorCard.astro";
import SportSidebar from "../sport/sportSidebar.astro";
import {
  getUserCountryByIP,
  userCountryHandler,
} from "../../../utils/ip-request";

// const ipAddress = IPRequest.ip.split(",")[0];
const clientIP =
  Astro.request.headers.get("x-forwarded-for") || "149.22.91.164";

const userCountry = await getUserCountryByIP(clientIP);
const country = await userCountryHandler(
  userCountry?.location?.country.toLowerCase()
);

const casinoCountry = country?.sc || "";

// const path = Astro.params.path as string;
const { path } = Astro.props;

const translationStore = await translationResponse();
const slotProviders = await slotProvidersResponse();
const slotCategories = await slotCategoriesResponse();

// Fetch Game Providers Filter
const gameProviders = await fetchApi<{
  id: number;
  attributes: {
    filterProviders: {
      data: TProviderAttributesOnly[];
    };
  };
}>({
  endpoint: "layout",
  wrappedByKey: "data",
  query: `?fields[0]=id&populate[filterProviders][fields][0]=slug&populate[filterProviders][populate][images][fields][0]=url`,
});

const query = qs.stringify(customPageQs(path, casinoCountry), {
  encodeValuesOnly: true,
});

let gamesQueryObj: GameFilters = {
  limit: 18,
  sort: "views:desc",
  page: 1,
  providers: [],
  categories: [],
  author: "",
};

// Request to the Fetch Function to get the custom page slugs from the API
const customPage = await fetchApi<CustomPageItem[]>({
  endpoint: "custom-pages",
  wrappedByKey: "data",
  query: `?${query}`,
});

const gameQuery = customPage[0]?.attributes?.blocks?.find(
  (block) => block.__component === "games.games-carousel"
) as CustomGameList;

let initialGames: TUserGame[] = [];

if (gameQuery) {
  gamesQueryObj = {
    ...gamesQueryObj,
    limit: gameQuery.numberOfGames,
    sort: sortOptions.get()[gameQuery.sortBy],
  };

  const gamesQuery = qs.stringify(gamesQs(gamesQueryObj), {
    encodeValuesOnly: true,
  });

  const customPageGames = await fetchApi<any[]>({
    endpoint: "games",
    wrappedByKey: "data",
    query: `?${gamesQuery}`,
  });

  initialGames = customPageGames.map((elem) => {
    return {
      id: elem.id,
      ...elem.attributes,
      images: {
        url: elem.attributes.images.data.attributes.url,
      },
      categories: elem.attributes.categories.data,
      provider: {
        slug: elem.attributes.provider.data?.attributes.slug,
        title: elem.attributes.provider.data?.attributes.title,
      },
    };
  });
}

let combinedSchema = [];

// FAQs Schema
const allFAQs = customPage[0]?.attributes?.blocks.filter(
  (block: Block) => block.__component === "shared.faqs"
) as Faqs[];

if (allFAQs && allFAQs.length > 0) {
  const faqSchema = {
    "@context": "https://schema.org",
    "@type": "FAQPage",
    mainEntity: allFAQs?.map(({ answer, question }) => {
      return {
        "@type": "Question",
        name: `${question}`,
        acceptedAnswer: {
          "@type": "Answer",
          text: `${answer}`,
        },
      };
    }),
  };
  combinedSchema.push(faqSchema);
}

const allHowTos = customPage[0]?.attributes?.blocks.filter(
  (block: Block) => block.__component === "shared.how-to-group"
) as unknown as HowToGroup[];

if (allHowTos && allHowTos.length > 0) {
  const howToSchema = allHowTos?.map(({ title, howToGroup }) => {
    return {
      "@context": "https://schema.org",
      "@type": "HowTo",
      name: `${title}`,
      totalTime: "PT15M",
      description: `${title}`,
      tool: [
        {
          "@type": "HowToTool",
          name: "smartphone, PC, tablet, metodo di pagamento",
        },
      ],
      step: howToGroup?.map(({ heading, copy, image }, i: number) => {
        return {
          "@type": "HowToStep",
          url: `${customPage[0]?.attributes?.urlPath}#step0${i + 1}`,
          name: heading,
          itemListElement: {
            "@type": "HowToDirection",
            text: copy,
          },
          ...(image?.data?.attributes && {
            image: {
              "@type": "ImageObject",
              url: image?.data?.attributes.url,
            },
          }),
        };
      }),
    };
  });

  combinedSchema.push(...howToSchema);
}

// Breadcrumb Schema
const breadSchema = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  itemListElement: (
    [...customPage[0]?.attributes?.breadcrumbs] as BreadcrumbData[]
  )
    .filter((elem) => elem.breadCrumbText.toLowerCase() !== "home")
    .map((bread, i) => {
      return {
        "@type": "ListItem",
        position: i + 1,
        name: bread?.breadCrumbText,
        ...(bread?.breadCrumbUrl && { item: bread?.breadCrumbUrl }),
      };
    }),
};
combinedSchema.push(breadSchema);

// SEO Object
const seo = {
  pageTitle: customPage[0].attributes?.seo?.metaTitle,
  metaDescription: customPage[0].attributes?.seo?.metaDescription,
  url: `${import.meta.env.FULL_URL}/${path}`,
};

// First mapping components so I can check them against the svelte extentsion
const mappedComponents = mapBlocksToDynamicComponents(
  customPage[0].attributes.blocks
);

// Dynamically importing the components
const Components = await loadComponents(mappedComponents);

// Function to determins how to structure the blocks in the custom pages. Based on the structure of the blocks the number of items in the blue section could change.
const getLoopCounter = (blocks: Block[]): number => {
  if (!blocks || blocks.length < 2) return 2; // Default value if blocks array is not as expected

  const secondBlockComponent = blocks[1]?.["__component"];
  const thirdBlockComponent = blocks[2]?.["__component"];

  if (
    secondBlockComponent === "games.new-and-loved-slots" &&
    (thirdBlockComponent === "casinos.casino-list" ||
      thirdBlockComponent === "games.games-carousel")
  ) {
    return 3;
  }

  if (
    secondBlockComponent?.includes("shared") &&
    secondBlockComponent !== "shared.provider-list"
  ) {
    return 1;
  }

  return 2;
};

let loopCounter = getLoopCounter(customPage[0]?.attributes?.blocks);

// Get the index of the first occurrence of the FAQ
const faqIndex = customPage[0]?.attributes?.blocks.findIndex(
  (block: Block) => block.__component === "shared.faqs"
);

// Tell the browser to always check the freshness of the cache
Astro.response.headers.set(
  "Cache-Control",
  "public, max-age=0, must-revalidate"
);

// CDN Cache Control
Astro.response.headers.set(
  "Cache-Control",
  "public, max-age=300, s-maxage=3600, stale-while-revalidate=30"
);
---

<script define:vars={{ userCountry, clientIP, country, customPage }}>
  console.log("THIS IS A CUSTOM PAGE", customPage);
  console.log("user Country", userCountry);
</script>
<MainLayout seoData={seo} otherSchema={combinedSchema}>
  <Breadcrumbs breadcrumbs={customPage[0]?.attributes?.breadcrumbs} />

  <div class:list={["featured-background curve pb-[50px]"]}>
    {
      Components.map((Component, i) => {
        if (i < loopCounter) {
          if (mappedComponents[i].extension === "astro") {
            return (
              <div>
                <Component
                  data={customPage[0].attributes.blocks[i]}
                  timeDate={customPage[0]?.attributes?.updatedAt}
                  authorData={customPage[0]?.attributes?.author}
                  isDateEnabled={customPage[0]?.attributes?.showContentDate}
                  {...(customPage[0]?.attributes?.blocks[i]?.__component ===
                  "casinos.casino-list"
                    ? { isCustom: true, isTop: true }
                    : {})}
                  {translationStore}
                />
              </div>
            );
          } else {
            switch (mappedComponents[i].name) {
              case "casinoTable": {
                const casinoListBlock = customPage[0].attributes.blocks[
                  i
                ] as CasinoListBlock;
                return (
                  <div class="relative z-50">
                    <CasinoTable
                      casinoCountry={casinoCountry}
                      initialCasinos={casinoListBlock}
                      translations={translationStore ?? {}}
                      {slotProviders}
                      showCasinoTableHeader={
                        casinoListBlock?.showCasinoTableHeader
                      }
                      client:load
                    />
                  </div>
                );
              }
              case "gameListBlock": {
                return (
                  <div class="relative z-50">
                    <GameListBlock
                      data={
                        customPage[0].attributes.blocks[i] as TGameListBlock
                      }
                      {initialGames}
                      gameProviders={
                        gameProviders.attributes.filterProviders
                          ? gameProviders.attributes.filterProviders.data
                          : []
                      }
                      {slotCategories}
                      translations={translationStore}
                      {slotProviders}
                      client:load
                    />
                  </div>
                );
              }
              case "casinoLiveVideo": {
                return (
                  <div class="relative z-10">
                    <CasinoLiveVideo
                      translations={translationStore}
                      playbackUrl={
                        (
                          customPage[0]?.attributes?.blocks[
                            i
                          ] as TCasinoLiveVideo
                        ).playbackUrl
                      }
                      client:load
                    />
                  </div>
                );
              }
            }
          }
        }
      })
    }
    <div></div>
  </div>

  <div class="xl:container content-auto px-2 pt-5">
    <div class="flex flex-col md:flex-row gap-x-8">
      <div class="order-last md:order-first">
        {
          Components.map((Component, i) => {
            if (i >= loopCounter) {
              if (mappedComponents[i].extension === "astro") {
                return (
                  <Component
                    data={customPage[0].attributes.blocks[i]}
                    timeDate={customPage[0]?.attributes?.updatedAt}
                    authorData={customPage[0]?.attributes?.author}
                    {...(customPage[0]?.attributes?.blocks[i]?.__component ===
                    "shared.quicklinks"
                      ? { block: customPage[0].attributes.blocks }
                      : {})}
                    {...(i === faqIndex ? { firstFaq: true } : {})}
                    {...(customPage[0]?.attributes?.blocks[i]?.__component ===
                      "casinos.casino-list" ||
                    customPage[0]?.attributes?.blocks[i]?.__component ===
                      "casinos.casinos-comparison"
                      ? { isCustom: true }
                      : {})}
                    {translationStore}
                  />
                );
              } else {
                switch (mappedComponents[i].name) {
                  case "casinoTable": {
                    const casinoListBlock = customPage[0].attributes.blocks[
                      i
                    ] as CasinoListBlock;
                    return (
                      <CasinoTable
                        casinoCountry={casinoCountry}
                        initialCasinos={casinoListBlock}
                        translations={translationStore ?? {}}
                        {slotProviders}
                        showCasinoTableHeader={
                          casinoListBlock?.showCasinoTableHeader
                        }
                        client:load
                      />
                    );
                  }
                  case "gameListBlock": {
                    return (
                      <GameListBlock
                        data={
                          customPage[0].attributes.blocks[i] as TGameListBlock
                        }
                        {initialGames}
                        gameProviders={
                          gameProviders.attributes.filterProviders
                            ? gameProviders.attributes.filterProviders.data
                            : []
                        }
                        {slotCategories}
                        translations={translationStore}
                        {slotProviders}
                        client:load
                      />
                    );
                  }
                  case "casinoLiveVideo": {
                    return (
                      <CasinoLiveVideo
                        translations={translationStore}
                        playbackUrl={
                          (
                            customPage[0]?.attributes?.blocks[
                              i
                            ] as TCasinoLiveVideo
                          ).playbackUrl
                        }
                        client:load
                      />
                    );
                  }
                }
              }
            }
          })
        }

        <AuthorCard data={customPage[0].attributes.author} {translationStore} />
      </div>
      <div class="basis-[315px] shrink-0 order-first mb-5 order-last">
        {
          !customPage[0].attributes.sideBarToShow ||
          customPage[0].attributes.sideBarToShow === "casino" ? (
            <CasinoSidebar
              casinoCountry={casinoCountry}
              translationStore={translationStore}
            />
          ) : (
            <SportSidebar translationStore={translationStore} />
          )
        }
      </div>
    </div>
  </div>
</MainLayout>
