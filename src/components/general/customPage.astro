---


// Helpers
import {
  loadComponents,
  mapBlocksToDynamicComponents,
} from "../../../lib/loadBlockComponents";

// Query Strings


//types and typeguards
import type {
  Block,
  CasinoListBlock,
  TCasinoLiveVideo,
  TGameListBlock
} from "../../../interfaces/common/types.ts";
import type { GameAttributes } from "../../../interfaces/games.ts";

// Import Svelte Components
import GameListBlock from "../blocks/gameListBlock.svelte";
import CasinoTable from "../casino/casinoTable.svelte";
import CasinoLiveVideo from "../general/casinoLiveVideo.svelte";

import LiveStatsBlock from "../blocks/liveStatsBlock.svelte";

// Astro Layouts & Components
import type { TQuickLinks } from "../../../interfaces/common/types.ts";
import CasinoSidebar from "../casino/casinoSidebar.astro";
import Quicklinks from "../helpers/quicklinks.svelte";
import SportSidebar from "../sport/sportSidebar.astro";
import AuthorCard from "./authorCard.astro";
import MainLayout from "../../layouts/MainLayout.astro";
import Breadcrumbs from "../layout/breadcrumbs.astro";

const { seoData, otherSchema, breadcrumbs, customPage, translationStore, slotProviders, casinoCountry, localisation, gameProviders, slotCategories, initialGames } = Astro.props;

// First mapping components so I can check them against the svelte extentsion
const mappedComponents = mapBlocksToDynamicComponents(
  customPage.attributes.blocks
);

// Dynamically importing the components
const Components = await loadComponents(mappedComponents);

// Function to determins how to structure the blocks in the custom pages. Based on the structure of the blocks the number of items in the blue section could change.
const getLoopCounter = (blocks: Block[]): number => {
  if (!blocks || blocks.length < 2) return 2;

  const secondBlockComponent = blocks[1]?.["__component"];
  const thirdBlockComponent = blocks[2]?.["__component"];

  if (
    secondBlockComponent === "games.new-and-loved-slots" &&
    (thirdBlockComponent === "casinos.casino-list" ||
      thirdBlockComponent === "games.games-carousel")
  ) {
    return 3;
  }

  if (
    (secondBlockComponent?.includes("shared") ||
      secondBlockComponent?.includes("tournaments")) &&
    secondBlockComponent !== "shared.provider-list"
  ) {
    return 1;
  }

  return 2;
};

let loopCounter = getLoopCounter(customPage?.attributes?.blocks);

// Get the index of the first occurrence of the FAQ
const faqIndex = customPage?.attributes?.blocks.findIndex(
  (block: Block) => block.__component === "shared.faqs"
);

---
<MainLayout {seoData} {otherSchema}>
  <Breadcrumbs {breadcrumbs} />
  <div class:list={["featured-background curve pb-[50px]"]}>
    {
      Components.map((Component, i) => {
        if (i < loopCounter) {
          if (mappedComponents[i].extension === "astro") {
            return (
              <div>
                <Component
                  data={customPage.attributes.blocks[i]}
                  timeDate={customPage?.attributes?.updatedAt}
                  authorData={customPage?.attributes?.author}
                  isDateEnabled={customPage?.attributes?.showContentDate}
                  {...(customPage?.attributes?.blocks[i]?.__component ===
                  "casinos.casino-list"
                    ? { isCustom: true, isTop: true }
                    : {})}
                  {translationStore}
                />
              </div>
            );
          } else {
            switch (mappedComponents[i].name) {
              case "casinoTable": {
                const casinoListBlock = customPage.attributes.blocks[
                  i
                ] as CasinoListBlock;
                return (
                  <div class="relative z-50">
                    <CasinoTable
                      casinoCountry={casinoCountry}
                      localisation={localisation}
                      initialCasinos={casinoListBlock}
                      translations={translationStore ?? {}}
                      {slotProviders}
                      showCasinoTableHeader={
                        casinoListBlock?.showCasinoTableHeader
                      }
                      client:load
                    />
                  </div>
                );
              }
              case "gameListBlock": {
                return (
                  <div class="relative z-50">
                    <GameListBlock
                      data={
                        customPage.attributes.blocks[i] as TGameListBlock
                      }
                      {initialGames}
                      gameProviders={
                        gameProviders.attributes.filterProviders
                          ? gameProviders.attributes.filterProviders.data
                          : []
                      }
                      {slotCategories}
                      translations={translationStore}
                      {slotProviders}
                      client:load
                    />
                  </div>
                );
              }
              case "casinoLiveVideo": {
                return (
                  <div class="relative z-10">
                    <CasinoLiveVideo
                      translations={translationStore}
                      playbackUrl={
                        (
                          customPage?.attributes?.blocks[
                            i
                          ] as TCasinoLiveVideo
                        ).playbackUrl
                      }
                      client:load
                    />
                  </div>
                );
              }
              case "quicklinks": {
                return (
                  (customPage.attributes.blocks[i] as TQuickLinks).showQuickLinks ?
                  <div class="relative z-50">
                    <Quicklinks
                      data={customPage.attributes.blocks[i]}
                      block={customPage.attributes.blocks}
                      {translationStore}
                      client:load
                    />
                  </div>
                 : <></>);
              }
            }
          }
        }
      })
    }
    <div></div>
  </div>

  <div class="xl:container content-auto px-2 pt-5">
    <div class="flex flex-col md:flex-row gap-x-8">
      <div class="order-last md:order-first">
        {
          Components.map((Component, i) => {
            if (i >= loopCounter) {
              if (mappedComponents[i].extension === "astro") {
                return (
                  <Component
                    data={customPage.attributes.blocks[i]}
                    timeDate={customPage?.attributes?.updatedAt}
                    authorData={customPage?.attributes?.author}
                    {...(customPage?.attributes?.blocks[i]?.__component ===
                    "shared.quicklinks"
                      ? { block: customPage.attributes.blocks }
                      : {})}
                    {...(i === faqIndex ? { firstFaq: true } : {})}
                    {...(customPage?.attributes?.blocks[i]?.__component ===
                      "casinos.casino-list" ||
                    customPage?.attributes?.blocks[i]?.__component ===
                      "casinos.casinos-comparison"
                      ? { isCustom: true }
                      : {})}
                    {translationStore}
                  />
                );
              } else {
                switch (mappedComponents[i].name) {
                  case "liveStats": {
                    return (
                      <LiveStatsBlock
                        data={
                          customPage.attributes.blocks[i] }
                        client:load
                      />
                    );
                  }
                  case "casinoTable": {
                    const casinoListBlock = customPage.attributes.blocks[
                      i
                    ] as CasinoListBlock;
                    return (
                      <CasinoTable
                        casinoCountry={casinoCountry}
                        localisation={localisation}
                        initialCasinos={casinoListBlock}
                        translations={translationStore ?? {}}
                        {slotProviders}
                        showCasinoTableHeader={
                          casinoListBlock?.showCasinoTableHeader
                        }
                        client:load
                      />
                    );
                  }
                  case "gameListBlock": {
                    return (
                      <GameListBlock
                        data={
                          customPage.attributes.blocks[i] as TGameListBlock
                        }
                        {initialGames}
                        gameProviders={
                          gameProviders.attributes.filterProviders
                            ? gameProviders.attributes.filterProviders.data
                            : []
                        }
                        {slotCategories}
                        translations={translationStore}
                        {slotProviders}
                        client:load
                      />
                    );
                  }
                  case "casinoLiveVideo": {
                    return (
                      <CasinoLiveVideo
                        translations={translationStore}
                        playbackUrl={
                          (
                            customPage?.attributes?.blocks[
                              i
                            ] as TCasinoLiveVideo
                          ).playbackUrl
                        }
                        client:load
                      />
                    );
                  }
                  case "quicklinks": {
                    return (
                      (customPage.attributes.blocks[i] as TQuickLinks).showQuickLinks ?
                      <div class="relative z-50">
                        <Quicklinks
                          data={customPage.attributes.blocks[i]}
                          block={customPage.attributes.blocks}
                          {translationStore}
                          client:load
                        />
                      </div>
                    : <></>);
                  }
                  case "casinoLiveVideo": {
                    return (
                      <CasinoLiveVideo
                        translations={translationStore}
                        playbackUrl={
                          (
                            customPage?.attributes?.blocks[
                              i
                            ] as TCasinoLiveVideo
                          ).playbackUrl
                        }
                        client:load
                      />
                    );
                  }
                }
              }
            }
          })
        }
        <AuthorCard data={customPage.attributes.author} {translationStore} />
      </div>
      {
        !customPage.attributes.sideBarToShow ? (
          <div class="basis-[315px] shrink-0 order-first mb-5 order-last">
            <CasinoSidebar
              {casinoCountry}
              translationStore={translationStore}
            />
          </div>
        ) : customPage.attributes.sideBarToShow === "casino" ? (
          <div class="basis-[315px] shrink-0 order-first mb-5 order-last">
            <CasinoSidebar
              {casinoCountry}
              translationStore={translationStore}
            />
          </div>
        ) : customPage.attributes.sideBarToShow === "sport" ? (
          <div class="basis-[315px] shrink-0 order-first mb-5 order-last">
            <SportSidebar translationStore={translationStore} />
          </div>
        ) : null
      }
    </div>
  </div>
</MainLayou>
