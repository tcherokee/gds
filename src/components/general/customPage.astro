---
import qs from "qs";

import { sortOptions } from "../../../stores/sortFilters";

// Helpers
import {
  loadComponents,
  mapBlocksToDynamicComponents,
} from "../../../lib/loadBlockComponents";
import fetchApi from "../../../lib/strapi";

// Query Strings
import { customPageQs } from "../../../qs/customPages";
import { gamesQs } from "../../../qs/games.ts";

import {
  getLocalisation,
  slotCategories as slotCategoriesResponse,
  slotProviders as slotProvidersResponse,
  getTranslations as translationResponse,
} from "../../../utils/api-requests";

//types and typeguards
import type {
  Block,
  BreadcrumbData,
  CasinoListBlock,
  CustomGameList,
  Faqs,
  GameFilters,
  HowToGroup,
  TCasinoLiveVideo,
  TGameListBlock,
  TProviderAttributesOnly,
  UserCountry,
} from "../../../interfaces/common/types.ts";
import type { CustomPageItem } from "../../../interfaces/custom-pages";

// Import Svelte Components
import GameListBlock from "../blocks/gameListBlock.svelte";
import CasinoTable from "../casino/casinoTable.svelte";
import CasinoLiveVideo from "../general/casinoLiveVideo.svelte";

import LiveStatsBlock from "../blocks/liveStatsBlock.svelte";

// Astro Layouts & Components
import type { TUserGame } from "../../../interfaces/games";
import MainLayout from "../../layouts/MainLayout.astro";
import CasinoSidebar from "../casino/casinoSidebar.astro";
import Breadcrumbs from "../layout/breadcrumbs.astro";
import AuthorCard from "./authorCard.astro";
import SportSidebar from "../sport/sportSidebar.astro";
import type { TQuickLinks } from "../../../interfaces/common/types.ts";
import Quicklinks from "../helpers/quicklinks.svelte";
import {
   getUserCountry,
  userCountryHandler,
} from "../../../utils/ip-request";

const localisation = await getLocalisation();
const userCountry = await  getUserCountry();
const country =
  userCountry !== null
    ? await userCountryHandler(
        userCountry?.location?.country.toLowerCase() || ""
      )
    : null;

const casinoCountry = country !== null ? country?.sc || "" : "";

// const path = Astro.params.path as string;
const { path } = Astro.props;

// Constructing SiteURL
const siteURL: string = `${import.meta.env.FULL_URL}/${path}`;

const translationStore = await translationResponse();
const slotProviders = await slotProvidersResponse();
const slotCategories = await slotCategoriesResponse();

// Fetch Game Providers Filter
const gameProviders = await fetchApi<{
  id: number;
  attributes: {
    filterProviders: {
      data: TProviderAttributesOnly[];
    };
  };
}>({
  endpoint: "layout",
  wrappedByKey: "data",
  query: `?fields[0]=id&populate[filterProviders][fields][0]=slug&populate[filterProviders][populate][images][fields][0]=url`,
});

const query = qs.stringify(customPageQs(path, casinoCountry, localisation), {
  encodeValuesOnly: true,
});

let gamesQueryObj: GameFilters = {
  limit: 18,
  sort: "views:desc",
  page: 1,
  providers: [],
  categories: [],
  author: "",
};

// Request to the Fetch Function to get the custom page slugs from the API
const customPage = await fetchApi<CustomPageItem[]>({
  endpoint: "custom-pages",
  wrappedByKey: "data",
  query: `?${query}`,
});

const gameQuery = customPage[0]?.attributes?.blocks?.find(
  (block) => block.__component === "games.games-carousel"
) as CustomGameList;

let initialGames: TUserGame[] = [];

if (gameQuery) {
  gamesQueryObj = {
    ...gamesQueryObj,
    limit: gameQuery.numberOfGames,
    sort: sortOptions.get()[gameQuery.sortBy],
  };

  const gamesQuery = qs.stringify(gamesQs(gamesQueryObj), {
    encodeValuesOnly: true,
  });

  const customPageGames = await fetchApi<any[]>({
    endpoint: "games",
    wrappedByKey: "data",
    query: `?${gamesQuery}`,
  });

  initialGames = customPageGames.map((elem) => {
    return {
      id: elem.id,
      ...elem.attributes,
      images: {
        url: elem.attributes.images.data.attributes.url,
      },
      categories: elem.attributes.categories.data,
      provider: {
        slug: elem.attributes.provider.data?.attributes.slug,
        title: elem.attributes.provider.data?.attributes.title,
      },
    };
  });
}

let combinedSchema = [];

// FAQs Schema
const allFAQs = customPage[0]?.attributes?.blocks.filter(
  (block: Block) => block.__component === "shared.faqs"
) as Faqs[];

if (allFAQs && allFAQs.length > 0) {
  const faqSchema = {
    "@context": "https://schema.org",
    "@type": "FAQPage",
    mainEntityOfPage: {
      "@type": "WebPage",
      url: `${siteURL}`,
      "@id": `${siteURL}`,
    },
    mainEntity: allFAQs?.map(({ answer, question }) => {
      return {
        "@type": "Question",
        name: `${question}`,
        acceptedAnswer: {
          "@type": "Answer",
          text: `${answer}`,
        },
      };
    }),
  };
  combinedSchema.push(faqSchema);
}

const allHowTos = customPage[0]?.attributes?.blocks.filter(
  (block: Block) => block.__component === "shared.how-to-group"
) as unknown as HowToGroup[];

if (allHowTos && allHowTos.length > 0) {
  const howToSchema = allHowTos?.map(({ title, howToGroup }) => {
    return {
      "@context": "https://schema.org",
      "@type": "HowTo",
      mainEntityOfPage: {
        "@type": "WebPage",
        url: `${siteURL}`,
        "@id": `${siteURL}`,
      },
      name: `${title}`,
      totalTime: "PT15M",
      description: `${title}`,
      tool: [
        {
          "@type": "HowToTool",
          name: "smartphone, PC, tablet, metodo di pagamento",
        },
      ],
      step: howToGroup?.map(({ heading, copy, image }, i: number) => {
        return {
          "@type": "HowToStep",
          url: `${customPage[0]?.attributes?.urlPath}#step0${i + 1}`,
          name: heading,
          itemListElement: {
            "@type": "HowToDirection",
            text: copy,
          },
          ...(image?.data?.attributes && {
            image: {
              "@type": "ImageObject",
              url: image?.data?.attributes.url,
            },
          }),
        };
      }),
    };
  });

  combinedSchema.push(...howToSchema);
}

// Breadcrumb Schema
const breadSchema = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
    mainEntityOfPage: {
      "@type": "WebPage",
      url: `${siteURL}`,
      "@id": `${siteURL}`,
    },
  itemListElement: (
    [...customPage[0]?.attributes?.breadcrumbs] as BreadcrumbData[]
  )
    .filter((elem) => elem.breadCrumbText.toLowerCase() !== "home")
    .map((bread, i) => {
      return {
        "@type": "ListItem",
        position: i + 1,
        name: bread?.breadCrumbText,
        ...(bread?.breadCrumbUrl && { item: bread?.breadCrumbUrl }),
      };
    }),
};
combinedSchema.push(breadSchema);

// SEO Object
const seo = {
  pageTitle: customPage[0].attributes?.seo?.metaTitle,
  metaDescription: customPage[0].attributes?.seo?.metaDescription,
  url: `${import.meta.env.FULL_URL}/${path}`,
};

// First mapping components so I can check them against the svelte extentsion
const mappedComponents = mapBlocksToDynamicComponents(
  customPage[0].attributes.blocks
);

// Dynamically importing the components
const Components = await loadComponents(mappedComponents);

// Function to determins how to structure the blocks in the custom pages. Based on the structure of the blocks the number of items in the blue section could change.
const getLoopCounter = (blocks: Block[]): number => {
  if (!blocks || blocks.length < 2) return 2;

  const secondBlockComponent = blocks[1]?.["__component"];
  const thirdBlockComponent = blocks[2]?.["__component"];

  if (
    secondBlockComponent === "games.new-and-loved-slots" &&
    (thirdBlockComponent === "casinos.casino-list" ||
      thirdBlockComponent === "games.games-carousel")
  ) {
    return 3;
  }

  if (
    (secondBlockComponent?.includes("shared") ||
      secondBlockComponent?.includes("tournaments")) &&
    secondBlockComponent !== "shared.provider-list"
  ) {
    return 1;
  }

  return 2;
};

let loopCounter = getLoopCounter(customPage[0]?.attributes?.blocks);

// Get the index of the first occurrence of the FAQ
const faqIndex = customPage[0]?.attributes?.blocks.findIndex(
  (block: Block) => block.__component === "shared.faqs"
);

// Caching System
// Add this code at the bottom of your page, just before the JSX/HTML portion
// Replace the existing cache control headers

// Set up cache tags (using Surrogate-Key as per your previous code)
const surrogateKeys = [];

// Page-specific tag
surrogateKeys.push(`page:custom`);
surrogateKeys.push(`page:${path}`);

// Content-type tags
surrogateKeys.push('type:custompage');

// Add content-specific tags
if (initialGames && initialGames.length > 0) {
  surrogateKeys.push('content:games');
  
  // Add provider-specific tags if relevant
  const gameProviderSlugs = [...new Set(initialGames.map(game => game.provider?.slug).filter(Boolean))];
  if (gameProviderSlugs.length > 0) {
    gameProviderSlugs.forEach(provider => {
      if (provider) {
        surrogateKeys.push(`provider:${provider}`);
      }
    });
  }
}

// Add tag for custom page specific content types
const componentTypes = customPage[0]?.attributes?.blocks.map(block => block.__component.split('.')[0]);
const uniqueComponentTypes = [...new Set(componentTypes)];
uniqueComponentTypes.forEach(type => {
  if (type) {
    surrogateKeys.push(`componentType:${type}`);
  }
});

// Add FAQ tag if page has FAQs
if (allFAQs && allFAQs.length > 0) {
  surrogateKeys.push('content:faqs');
}

// Add HowTo tag if page has HowTos
if (allHowTos && allHowTos.length > 0) {
  surrogateKeys.push('content:howtos');
}

// Add country-specific tag if applicable
if (casinoCountry) {
  surrogateKeys.push(`country:${casinoCountry}`);
}

// Add version or timestamp tag to allow for complete cache refresh when needed
const contentTimestamp = customPage[0]?.attributes?.updatedAt || Date.now();
surrogateKeys.push(`version:${contentTimestamp}`);

// Set Surrogate-Key header for GCP CDN cache invalidation
Astro.response.headers.set('Surrogate-Key', surrogateKeys.join(' ')); // Space-separated list

// Generate a proper ETag based on content
// Create a content signature from key data that would trigger a cache refresh when changed
const contentSignature = JSON.stringify({
  // Include critical content identifiers that should trigger cache invalidation
  path: path,
  updatedAt: contentTimestamp,
  gameIds: initialGames?.map(game => game.id)?.slice(0, 10), // Limit to avoid overly large ETags
  blocksLength: customPage[0]?.attributes?.blocks?.length,
  countryCode: casinoCountry || 'default',
  seo: {
    title: customPage[0]?.attributes?.seo?.metaTitle,
    description: customPage[0]?.attributes?.seo?.metaDescription
  }
});

// Generate a hash of the content signature for the ETag
// In a production environment, you might want to use a more sophisticated hashing function
const contentHash = Array.from(
  new Uint8Array(
    new TextEncoder().encode(contentSignature)
  )
).reduce((hash, byte) => (((hash << 5) - hash) + byte) | 0, 0).toString(36);

// Create and set a proper ETag (weak validator with W/ prefix is appropriate for HTML content)
const etagValue = `W/"${contentHash}"`;
Astro.response.headers.set("ETag", etagValue);

// Check for If-None-Match header to enable 304 responses
const ifNoneMatch = Astro.request.headers.get("If-None-Match");
if (ifNoneMatch === etagValue) {
  return new Response(null, {
    status: 304,
    headers: {
      "ETag": etagValue,
      "Cache-Control": "public, max-age=86400, s-maxage=604800, stale-while-revalidate=3600, stale-if-error=259200",
      "Surrogate-Key": surrogateKeys.join(' '),
      "Surrogate-Control": "max-age=604800",
      "Last-Modified": new Date(contentTimestamp).toUTCString()
    }
  });
}

// Set aggressive caching
// Browser cache: 1 day
// CDN cache: 7 days (via s-maxage)
// Stale-while-revalidate: 1 hour
// Stale-if-error: 3 days
Astro.response.headers.set(
  "Cache-Control",
  "public, max-age=86400, s-maxage=604800, stale-while-revalidate=3600, stale-if-error=259200"
);

// Optional: Add Surrogate-Control header (might be useful for other CDNs)
Astro.response.headers.set("Surrogate-Control", "max-age=604800");

// Optional: Set cache validation headers
const lastModifiedDate = new Date(contentTimestamp).toUTCString();
Astro.response.headers.set("Last-Modified", lastModifiedDate);

---

<MainLayout seoData={seo} otherSchema={combinedSchema}>
  <Breadcrumbs breadcrumbs={customPage[0]?.attributes?.breadcrumbs} />

  <div class:list={["featured-background curve pb-[50px]"]}>
    {
      Components.map((Component, i) => {
        if (i < loopCounter) {
          if (mappedComponents[i].extension === "astro") {
            return (
              <div>
                <Component
                  data={customPage[0].attributes.blocks[i]}
                  timeDate={customPage[0]?.attributes?.updatedAt}
                  authorData={customPage[0]?.attributes?.author}
                  isDateEnabled={customPage[0]?.attributes?.showContentDate}
                  {...(customPage[0]?.attributes?.blocks[i]?.__component ===
                  "casinos.casino-list"
                    ? { isCustom: true, isTop: true }
                    : {})}
                  {translationStore}
                />
              </div>
            );
          } else {
            switch (mappedComponents[i].name) {
              case "casinoTable": {
                const casinoListBlock = customPage[0].attributes.blocks[
                  i
                ] as CasinoListBlock;
                return (
                  <div class="relative z-50">
                    <CasinoTable
                      casinoCountry={casinoCountry}
                      localisation={localisation}
                      initialCasinos={casinoListBlock}
                      translations={translationStore ?? {}}
                      {slotProviders}
                      showCasinoTableHeader={
                        casinoListBlock?.showCasinoTableHeader
                      }
                      client:load
                    />
                  </div>
                );
              }
              case "gameListBlock": {
                return (
                  <div class="relative z-50">
                    <GameListBlock
                      data={
                        customPage[0].attributes.blocks[i] as TGameListBlock
                      }
                      {initialGames}
                      gameProviders={
                        gameProviders.attributes.filterProviders
                          ? gameProviders.attributes.filterProviders.data
                          : []
                      }
                      {slotCategories}
                      translations={translationStore}
                      {slotProviders}
                      client:load
                    />
                  </div>
                );
              }
              case "casinoLiveVideo": {
                return (
                  <div class="relative z-10">
                    <CasinoLiveVideo
                      translations={translationStore}
                      playbackUrl={
                        (
                          customPage[0]?.attributes?.blocks[
                            i
                          ] as TCasinoLiveVideo
                        ).playbackUrl
                      }
                      client:load
                    />
                  </div>
                );
              }
              case "quicklinks": {
                return (
                  (customPage[0].attributes.blocks[i] as TQuickLinks).showQuickLinks ?
                  <div class="relative z-50">
                    <Quicklinks
                      data={customPage[0].attributes.blocks[i]}
                      block={customPage[0].attributes.blocks}
                      {translationStore}
                      client:load
                    />
                  </div>
                 : <></>);
              }
            }
          }
        }
      })
    }
    <div></div>
  </div>

  <div class="xl:container content-auto px-2 pt-5">
    <div class="flex flex-col md:flex-row gap-x-8">
      <div class="order-last md:order-first">
        {
          Components.map((Component, i) => {
            if (i >= loopCounter) {
              if (mappedComponents[i].extension === "astro") {
                return (
                  <Component
                    data={customPage[0].attributes.blocks[i]}
                    timeDate={customPage[0]?.attributes?.updatedAt}
                    authorData={customPage[0]?.attributes?.author}
                    {...(customPage[0]?.attributes?.blocks[i]?.__component ===
                    "shared.quicklinks"
                      ? { block: customPage[0].attributes.blocks }
                      : {})}
                    {...(i === faqIndex ? { firstFaq: true } : {})}
                    {...(customPage[0]?.attributes?.blocks[i]?.__component ===
                      "casinos.casino-list" ||
                    customPage[0]?.attributes?.blocks[i]?.__component ===
                      "casinos.casinos-comparison"
                      ? { isCustom: true }
                      : {})}
                    {translationStore}
                  />
                );
              } else {
                switch (mappedComponents[i].name) {
                  case "liveStats": {
                    return (
                      <LiveStatsBlock
                        data={
                          customPage[0].attributes.blocks[i] }
                        client:load
                      />
                    );
                  }
                  case "casinoTable": {
                    const casinoListBlock = customPage[0].attributes.blocks[
                      i
                    ] as CasinoListBlock;
                    return (
                      <CasinoTable
                        casinoCountry={casinoCountry}
                        localisation={localisation}
                        initialCasinos={casinoListBlock}
                        translations={translationStore ?? {}}
                        {slotProviders}
                        showCasinoTableHeader={
                          casinoListBlock?.showCasinoTableHeader
                        }
                        client:load
                      />
                    );
                  }
                  case "gameListBlock": {
                    return (
                      <GameListBlock
                        data={
                          customPage[0].attributes.blocks[i] as TGameListBlock
                        }
                        {initialGames}
                        gameProviders={
                          gameProviders.attributes.filterProviders
                            ? gameProviders.attributes.filterProviders.data
                            : []
                        }
                        {slotCategories}
                        translations={translationStore}
                        {slotProviders}
                        client:load
                      />
                    );
                  }
                  case "casinoLiveVideo": {
                    return (
                      <CasinoLiveVideo
                        translations={translationStore}
                        playbackUrl={
                          (
                            customPage[0]?.attributes?.blocks[
                              i
                            ] as TCasinoLiveVideo
                          ).playbackUrl
                        }
                        client:load
                      />
                    );
                  }
                  case "quicklinks": {
                    return (
                      (customPage[0].attributes.blocks[i] as TQuickLinks).showQuickLinks ?
                      <div class="relative z-50">
                        <Quicklinks
                          data={customPage[0].attributes.blocks[i]}
                          block={customPage[0].attributes.blocks}
                          {translationStore}
                          client:load
                        />
                      </div>
                    : <></>);
                  }
                  case "casinoLiveVideo": {
                    return (
                      <CasinoLiveVideo
                        translations={translationStore}
                        playbackUrl={
                          (
                            customPage[0]?.attributes?.blocks[
                              i
                            ] as TCasinoLiveVideo
                          ).playbackUrl
                        }
                        client:load
                      />
                    );
                  }
                }
              }
            }
          })
        }
        <AuthorCard data={customPage[0].attributes.author} {translationStore} />
      </div>
      {
        !customPage[0].attributes.sideBarToShow ? (
          <div class="basis-[315px] shrink-0 order-first mb-5 order-last">
            <CasinoSidebar
              {casinoCountry}
              translationStore={translationStore}
            />
          </div>
        ) : customPage[0].attributes.sideBarToShow === "casino" ? (
          <div class="basis-[315px] shrink-0 order-first mb-5 order-last">
            <CasinoSidebar
              {casinoCountry}
              translationStore={translationStore}
            />
          </div>
        ) : customPage[0].attributes.sideBarToShow === "sport" ? (
          <div class="basis-[315px] shrink-0 order-first mb-5 order-last">
            <SportSidebar translationStore={translationStore} />
          </div>
        ) : null
      }
    </div>
  </div>


</MainLayout>
