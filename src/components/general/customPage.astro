---


// Helpers
import {
  loadComponents,
  mapBlocksToDynamicComponents,
} from "../../../lib/loadBlockComponents";

// Query Strings


//types and typeguards
import type {
  Block,
  CasinoListBlock,
  TCasinoLiveVideo,
  TGameListBlock
} from "../../../interfaces/common/types.ts";
import type { GameAttributes } from "../../../interfaces/games.ts";

// Import Svelte Components
import GameListBlock from "../blocks/gameListBlock.svelte";
import CasinoTable from "../casino/casinoTable.svelte";
import CasinoLiveVideo from "../general/casinoLiveVideo.svelte";

import LiveStatsBlock from "../blocks/liveStatsBlock.svelte";

// Astro Layouts & Components
import type { TQuickLinks } from "../../../interfaces/common/types.ts";
import CasinoSidebar from "../casino/casinoSidebar.astro";
import Quicklinks from "../helpers/quicklinks.svelte";
import SportSidebar from "../sport/sportSidebar.astro";
import AuthorCard from "./authorCard.astro";
import MainLayout from "../../layouts/MainLayout.astro";
import Breadcrumbs from "../layout/breadcrumbs.astro";

const { seoData, otherSchema, breadcrumbs, customPage, translationStore, slotProviders, casinoCountry, localisation, gameProviders, slotCategories, initialGames } = Astro.props;

// First mapping components so I can check them against the svelte extentsion
const mappedComponents = mapBlocksToDynamicComponents(
  customPage.attributes.blocks
);

// Dynamically importing the components
const Components = await loadComponents(mappedComponents);

// Function to determins how to structure the blocks in the custom pages. Based on the structure of the blocks the number of items in the blue section could change.
const getLoopCounter = (blocks: Block[]): number => {
  if (!blocks || blocks.length < 2) return 2;

  const secondBlockComponent = blocks[1]?.["__component"];
  const thirdBlockComponent = blocks[2]?.["__component"];

  if (
    secondBlockComponent === "games.new-and-loved-slots" &&
    (thirdBlockComponent === "casinos.casino-list" ||
      thirdBlockComponent === "games.games-carousel")
  ) {
    return 3;
  }

  if (
    (secondBlockComponent?.includes("shared") ||
      secondBlockComponent?.includes("tournaments")) &&
    secondBlockComponent !== "shared.provider-list"
  ) {
    return 1;
  }

  return 2;
};

let loopCounter = getLoopCounter(customPage?.attributes?.blocks);

// Get the index of the first occurrence of the FAQ
const faqIndex = customPage?.attributes?.blocks.findIndex(
  (block: Block) => block.__component === "shared.faqs"
);

// ============= CACHE IMPLEMENTATION START =============
// Set up cache tags (using Surrogate-Key)
const surrogateKeys: string[] = [];

// --- Core Page & Content Type Tags ---
// Path-based tag (Likely the most reliable key for Strapi to invalidate)
if (customPage?.attributes?.urlPath) {
  surrogateKeys.push(`path:${customPage.attributes.urlPath}`);
}

// Content-type tag (Useful for invalidating all pages of this type)
surrogateKeys.push('type:custompage');

// --- Related Entity Tags (Keep if these entities can be invalidated separately from Strapi) ---
// Add country-specific tag if applicable and if country settings can trigger specific invalidation
if (casinoCountry) {
  surrogateKeys.push(`country:${casinoCountry}`);
}

// --- Versioning Tag ---
// Add version or timestamp tag based on the main entry's update time
const contentTimestamp = customPage?.attributes?.updatedAt || Date.now();
surrogateKeys.push(`version:${contentTimestamp}`);


// --- Set Headers ---
// Set Surrogate-Key header for CDN cache invalidation (e.g., GCP CDN)
// Space-separated list
Astro.response.headers.set('Surrogate-Key', surrogateKeys.join(' '));


// --- ETag Generation (Essential for Conditional Requests / 304 Responses) ---
// Create a content signature from key data that would trigger cache invalidation when changed.
const contentSignature = JSON.stringify({
  urlPath: customPage?.attributes?.urlPath,
  updatedAt: contentTimestamp,
  blocks: customPage?.attributes?.blocks.map((block: any) => ({
    component: block.__component,
    id: block.id // Note: Strapi v5 component IDs might be unstable across updates [1, 2, 3]
                 // Consider using other stable identifiers within blocks if available,
                 // or rely primarily on updatedAt and block.__component changes.
  })),
  countryCode: casinoCountry || null,
  seo: {
    title: seoData?.pageTitle,
    description: seoData?.metaDescription
  }
});

// --- Generate SHA-256 hash for ETag using Web Crypto API ---
const encoder = new TextEncoder();
const data = encoder.encode(contentSignature);
// Hash the data using SHA-256 (ensure this code runs in an async context)
const hashBuffer = await crypto.subtle.digest('SHA-256', data);
// Convert the ArrayBuffer to a hex string
const hashArray = Array.from(new Uint8Array(hashBuffer));
const contentHash = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
// --- End SHA-256 Hashing ---

// Create and set a proper ETag (weak validator W/ prefix is appropriate for HTML content)
const etagValue = `W/"${contentHash}"`; // Using the SHA-256 hash
Astro.response.headers.set("ETag", etagValue);


// --- Conditional Request Handling (304 Not Modified) ---
// Check for If-None-Match header to enable 304 responses
const ifNoneMatch = Astro.request.headers.get("If-None-Match");
if (ifNoneMatch === etagValue) {
  // Content hasn't changed, send back 304 Not Modified
  return new Response(null, {
    status: 304,
    headers: {
      "ETag": etagValue,
      "Cache-Control": "public, max-age=86400, s-maxage=604800, stale-while-revalidate=3600, stale-if-error=259200",
      "Surrogate-Key": surrogateKeys.join(' '), // Resend keys for intermediate caches
      "Surrogate-Control": "max-age=604800",
      "Last-Modified": new Date(contentTimestamp).toUTCString()
    }
  });
}


// --- Caching Directives for New Responses (200 OK) ---
// Set aggressive caching directives
// Browser cache: 1 day (max-age)
// CDN cache: 7 days (s-maxage)
// Stale-while-revalidate: 1 hour (allow serving stale while revalidating)
// Stale-if-error: 3 days (allow serving stale if origin error)
Astro.response.headers.set(
  "Cache-Control",
  "public, max-age=86400, s-maxage=604800, stale-while-revalidate=3600, stale-if-error=259200"
);

// Optional: Add Surrogate-Control header (might be useful for other CDNs like Fastly)
Astro.response.headers.set("Surrogate-Control", "max-age=604800");

// Set cache validation headers
const lastModifiedDate = new Date(contentTimestamp).toUTCString();
Astro.response.headers.set("Last-Modified", lastModifiedDate);

// ============= CACHE IMPLEMENTATION END =============

---
<MainLayout {seoData} {otherSchema}>
  <Breadcrumbs {breadcrumbs} />
  <div class:list={["featured-background curve pb-[50px]"]}>
    {
      Components.map((Component, i) => {
        if (i < loopCounter) {
          if (mappedComponents[i].extension === "astro") {
            return (
              <div>
                <Component
                  data={customPage.attributes.blocks[i]}
                  timeDate={customPage?.attributes?.updatedAt}
                  authorData={customPage?.attributes?.author}
                  isDateEnabled={customPage?.attributes?.showContentDate}
                  {...(customPage?.attributes?.blocks[i]?.__component ===
                  "casinos.casino-list"
                    ? { isCustom: true, isTop: true }
                    : {})}
                  {translationStore}
                />
              </div>
            );
          } else {
            switch (mappedComponents[i].name) {
              case "casinoTable": {
                const casinoListBlock = customPage.attributes.blocks[
                  i
                ] as CasinoListBlock;
                return (
                  <div class="relative z-50">
                    <CasinoTable
                      casinoCountry={casinoCountry}
                      localisation={localisation}
                      initialCasinos={casinoListBlock}
                      translations={translationStore ?? {}}
                      {slotProviders}
                      showCasinoTableHeader={
                        casinoListBlock?.showCasinoTableHeader
                      }
                      client:load
                    />
                  </div>
                );
              }
              case "gameListBlock": {
                return (
                  <div class="relative z-50">
                    <GameListBlock
                      data={
                        customPage.attributes.blocks[i] as TGameListBlock
                      }
                      {initialGames}
                      gameProviders={
                        gameProviders.attributes.filterProviders
                          ? gameProviders.attributes.filterProviders.data
                          : []
                      }
                      {slotCategories}
                      translations={translationStore}
                      {slotProviders}
                      client:load
                    />
                  </div>
                );
              }
              case "casinoLiveVideo": {
                return (
                  <div class="relative z-10">
                    <CasinoLiveVideo
                      translations={translationStore}
                      playbackUrl={
                        (
                          customPage?.attributes?.blocks[
                            i
                          ] as TCasinoLiveVideo
                        ).playbackUrl
                      }
                      client:load
                    />
                  </div>
                );
              }
              case "quicklinks": {
                return (
                  (customPage.attributes.blocks[i] as TQuickLinks).showQuickLinks ?
                  <div class="relative z-50">
                    <Quicklinks
                      data={customPage.attributes.blocks[i]}
                      block={customPage.attributes.blocks}
                      {translationStore}
                      client:load
                    />
                  </div>
                 : <></>);
              }
            }
          }
        }
      })
    }
    <div></div>
  </div>

  <div class="xl:container content-auto px-2 pt-5">
    <div class="flex flex-col md:flex-row gap-x-8">
      <div class="order-last md:order-first">
        {
          Components.map((Component, i) => {
            if (i >= loopCounter) {
              if (mappedComponents[i].extension === "astro") {
                return (
                  <Component
                    data={customPage.attributes.blocks[i]}
                    timeDate={customPage?.attributes?.updatedAt}
                    authorData={customPage?.attributes?.author}
                    {...(customPage?.attributes?.blocks[i]?.__component ===
                    "shared.quicklinks"
                      ? { block: customPage.attributes.blocks }
                      : {})}
                    {...(i === faqIndex ? { firstFaq: true } : {})}
                    {...(customPage?.attributes?.blocks[i]?.__component ===
                      "casinos.casino-list" ||
                    customPage?.attributes?.blocks[i]?.__component ===
                      "casinos.casinos-comparison"
                      ? { isCustom: true }
                      : {})}
                    {translationStore}
                  />
                );
              } else {
                switch (mappedComponents[i].name) {
                  case "liveStats": {
                    return (
                      <LiveStatsBlock
                        data={
                          customPage.attributes.blocks[i] }
                        client:load
                      />
                    );
                  }
                  case "casinoTable": {
                    const casinoListBlock = customPage.attributes.blocks[
                      i
                    ] as CasinoListBlock;
                    return (
                      <CasinoTable
                        casinoCountry={casinoCountry}
                        localisation={localisation}
                        initialCasinos={casinoListBlock}
                        translations={translationStore ?? {}}
                        {slotProviders}
                        showCasinoTableHeader={
                          casinoListBlock?.showCasinoTableHeader
                        }
                        client:load
                      />
                    );
                  }
                  case "gameListBlock": {
                    return (
                      <GameListBlock
                        data={
                          customPage.attributes.blocks[i] as TGameListBlock
                        }
                        {initialGames}
                        gameProviders={
                          gameProviders.attributes.filterProviders
                            ? gameProviders.attributes.filterProviders.data
                            : []
                        }
                        {slotCategories}
                        translations={translationStore}
                        {slotProviders}
                        client:load
                      />
                    );
                  }
                  case "casinoLiveVideo": {
                    return (
                      <CasinoLiveVideo
                        translations={translationStore}
                        playbackUrl={
                          (
                            customPage?.attributes?.blocks[
                              i
                            ] as TCasinoLiveVideo
                          ).playbackUrl
                        }
                        client:load
                      />
                    );
                  }
                  case "quicklinks": {
                    return (
                      (customPage.attributes.blocks[i] as TQuickLinks).showQuickLinks ?
                      <div class="relative z-50">
                        <Quicklinks
                          data={customPage.attributes.blocks[i]}
                          block={customPage.attributes.blocks}
                          {translationStore}
                          client:load
                        />
                      </div>
                    : <></>);
                  }
                  case "casinoLiveVideo": {
                    return (
                      <CasinoLiveVideo
                        translations={translationStore}
                        playbackUrl={
                          (
                            customPage?.attributes?.blocks[
                              i
                            ] as TCasinoLiveVideo
                          ).playbackUrl
                        }
                        client:load
                      />
                    );
                  }
                }
              }
            }
          })
        }
        <AuthorCard data={customPage.attributes.author} {translationStore} />
      </div>
      {
        !customPage.attributes.sideBarToShow ? (
          <div class="basis-[315px] shrink-0 order-first mb-5 order-last">
            <CasinoSidebar
              {casinoCountry}
              translationStore={translationStore}
            />
          </div>
        ) : customPage.attributes.sideBarToShow === "casino" ? (
          <div class="basis-[315px] shrink-0 order-first mb-5 order-last">
            <CasinoSidebar
              {casinoCountry}
              translationStore={translationStore}
            />
          </div>
        ) : customPage.attributes.sideBarToShow === "sport" ? (
          <div class="basis-[315px] shrink-0 order-first mb-5 order-last">
            <SportSidebar translationStore={translationStore} />
          </div>
        ) : null
      }
    </div>
  </div>
</MainLayou>
