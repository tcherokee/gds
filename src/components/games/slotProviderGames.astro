---
import qs from "qs";
import { urlTranslate } from "../../../utils/data-store.util";
import fetchApi from "../../../lib/strapi";
import { gamesQs } from "../../../qs/ssm-games";
import GameListBlock from "../../components/blocks/gameListBlock.svelte";
import Pagination from "../../components/helpers/pagination.astro";
import type { TUserGame } from "../../../interfaces/games";
import type { TProviderAttributesOnly } from "../../../interfaces/common/types";

const { slug } = Astro.props;
const newSlug = slug.includes("/") ? slug.split("/")[0] : slug;
const page = slug.includes("/") ? slug.split("/")[1].split("p")[1] : 1;

const gameProviders = await fetchApi<{
  id: number;
  attributes: {
    filterProviders: {
      data: TProviderAttributesOnly[];
    };
  };
}>({
  endpoint: "layout",
  wrappedByKey: "data",
  query: `?fields[0]=id&populate[filterProviders][fields][0]=slug&populate[filterProviders][populate][images][fields][0]=url`,
});

const query = qs.stringify(gamesQs(newSlug, "views:desc", page), {
  encodeValuesOnly: true,
});
const games = await fetchApi<any>({
  endpoint: "games",
  isPaginated: true,
  query: `?${query}`,
});
let initialGames: TUserGame[] = [];

if (games) {
  initialGames = games.data.map((elem: any) => {
    return {
      id: elem.id,
      ...elem.attributes,
      images: {
        url: elem.attributes.images.data?.attributes.url ?? "",
      },
      provider: {
        slug: elem.attributes.provider.data.attributes.slug,
        title: elem.attributes.provider.data.attributes.title,
      },
    };
  });
}

let siteID = import.meta.env.SITE_ID;

const gameBlock = {
  numberOfGames: 18,
  sortBy: "Most Popular",
  showGameFilterPanel: true,
  showGameMoreButton: false,
  gameCategories: [],
  gameProviders: [
    {
      slotProvider: {
        data: {
          attributes: {
            slug: newSlug,
          },
        },
      },
    },
  ],
};
---

<GameListBlock
  data={gameBlock}
  {page}
  {initialGames}
  gameProviders={gameProviders.attributes.filterProviders
    ? gameProviders.attributes.filterProviders.data
    : []}
  client:load
/>

<Pagination
  currPage={games?.meta?.pagination?.page}
  pageCount={games?.meta?.pagination?.pageCount}
  path=`${urlTranslate[siteID as keyof typeof urlTranslate]['provider-pages']}/${newSlug}`
/>
