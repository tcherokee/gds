---
import qs from "qs";
import fetchApi from "../../../lib/strapi";
import { providerGamesQs } from "../../../qs/provider-games";
import type { Gamepage } from "../../../interfaces/game-page";
import CasinoTable from "../../components/casino/casinoTable.astro";
import {
  getUserCountryByIP,
  userCountryHandler,
} from "../../../utils/ip-request";
import type { UserCountry } from "../../../interfaces/common/types";

let userCountry: UserCountry | undefined;
let country: { sc: string } | undefined;
let casinoCountry: string | undefined;

const clientIP =
  Astro.request.headers.get("x-forwarded-for") || "102.216.183.41";

if (clientIP === "102.216.183.41") {
  userCountry = await getUserCountryByIP(clientIP);

  country = await userCountryHandler(
    userCountry?.location?.country.toLowerCase() || ""
  );

  casinoCountry = country?.sc || "";
} else {
  casinoCountry = "rod";
}

const { slug, translationStore } = Astro.props;

const query = qs.stringify(providerGamesQs(slug, casinoCountry), {
  encodeValuesOnly: true,
});

const gamePage = await fetchApi<Gamepage[]>({
  endpoint: "games",
  wrappedByKey: "data",
  query: `?${query}`,
});
---

<CasinoTable
  casinos={gamePage[0].attributes?.provider?.data?.attributes?.relatedCasinos
    ?.data}
  customPage={true}
  {translationStore}
/>
