---
// First and Third Party Plugins
import { Link } from "astro-link";

const { currPage = 1, pageCount, path, translationStore } = Astro.props;

let arrPages = [];

const buildArr = (c: any, n: any) => {
  if (n <= 7) {
    return [...Array(n)].map((_, i) => i + 1);
  } else {
    if (c < 3 || c > n - 3) {
      return [1, 2, 3, "...", n - 2, n - 1, n];
    } else {
      return [1, 2, "...", c - 1, c, c + 1, "...", n];
    }
  }
};

const generatePagination = (currentPage: number, totalPageCount: number) => {
  const maxVisiblePages = 6; // Maximum number of pages to show
  const pagination = [];

  if (totalPageCount <= maxVisiblePages) {
    // If total pages are less than or equal to maxVisiblePages, return all pages
    for (let i = 1; i <= totalPageCount; i++) {
      pagination.push(i);
    }
  } else {
    // Always show the first page
    pagination.push(1);

    let startPage, endPage;

    // Determine the start and end of the range of visible pages
    if (currentPage <= 3) {
      startPage = 2;
      endPage = 4;
    } else if (currentPage >= totalPageCount - 2) {
      startPage = totalPageCount - 3;
      endPage = totalPageCount - 1;
    } else {
      startPage = currentPage - 1;
      endPage = currentPage + 1;
    }

    if (startPage > 2) {
      pagination.push("...");
    }

    for (let i = startPage; i <= endPage; i++) {
      pagination.push(i);
    }

    if (endPage < totalPageCount - 1) {
      pagination.push("...");
    }

    // Always show the last page
    pagination.push(totalPageCount);
  }

  return pagination;
};

arrPages = generatePagination(currPage, pageCount);
---

{
  pageCount > 1 && (
    <nav aria-label="page navigation" class="pagination-wrapper mt-3">
      <ul class="flex pagination justify-center">
        {currPage !== 1 && (
          <li class="page-item hidden sm:flex">
            <Link
              class="page-link"
              href={`${path}${currPage === 2 ? "" : "/p" + (currPage - 1)}/`}
            >
              {translationStore?.paginationFirst}
            </Link>
          </li>
        )}
        {arrPages.map((i) => (
          <li
            class={`page-item ${(currPage === i || i === "...") && "disabled"} ${
              i !== "..." && "default"
            }`}
          >
            <Link
              class="page-link"
              href={i === "..." ? "#" : `${path}${i === 1 ? "" : "/p" + i}/`}
            >
              {i}
            </Link>
          </li>
        ))}
        {currPage !== pageCount && (
          <li class="page-item hidden sm:flex">
            <Link class="page-link" href={`${path}/p${currPage + 1}/`}>
              {translationStore?.paginationLast}
            </Link>
          </li>
        )}
      </ul>
    </nav>
  )
}

<style lang="postcss">
	.pagination-wrapper {
		width: 100%;
		.pagination {
			.page-item {
				&:first-child {
					:global(.page-link) {
						@apply rounded-tl-[6px] rounded-bl-[6px];
					}
				}
				&:last-child {
					:global(.page-link) {
						@apply rounded-tr-[6px] rounded-br-[6px];
					}
				}
				&.disabled {
					:global(.page-link) {
						@apply text-pagination-disabled-color pointer-events-none;
					}
				}
				&.disabled.default {
					:global(.page-link) {
						@apply bg-pagination-disabled-bg;
					}
				}
				:global(.page-link) {
					@apply relative uppercase block px-3 py-[6px] text-link-color bg-pagination-bg-color border border-pagination-border-color hover:text-link-hover-color hover:bg-pagination-hover-bg;
					transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out,
						border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
				}
				&:not(:first-child) {
					:global(.page-link) {
						@apply -ml-[1px];
					}
				}
			}
		}
	}
</style>
