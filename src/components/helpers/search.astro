<div class="search-container">
  <div id="searchIcon" class="search-icon top-3.5 right-2">
    <input
      type="text"
      class="no-animation border-white"
      id="searchInput"
      placeholder=""
      aria-describedby="searchInput"
    />
    <button>
      <span id="closeIcon" class="close-icon no-animation"></span>
    </button>
  </div>
</div>
<div
  id="searchResultsContainer"
  class="search-results-container ps-3 pe-3 pb-3 z-40"
>
  <div class="row d-flex align-items-start justify-content-center">
    <div class="col-md-9 col-sm-12 col-12 col-xl-9 col-xxl-9">
      <div class="search-results xl:container" id="hits"></div>
    </div>
  </div>
</div>

<script>
  const searchIcon = document.querySelector("#searchIcon") as HTMLElement;
  const closeIcon = document.querySelector("#closeIcon") as HTMLElement;
  const searchInput = document.querySelector(
    "#searchIcon input",
  ) as HTMLElement;
  const searchContainer = document.querySelector(
    ".search-results-container",
  ) as HTMLElement;
  let searchInputValue;

  const handleSearchInput = (event) => {
    event.preventDefault();
    event.stopPropagation();
  };

  let toggleTimeout: number | undefined; // Define outside to clear previous timeouts if needed

  const toggleOpenClass = () => {
    searchInput?.classList.remove("no-animation");
    closeIcon?.classList.remove("no-animation");
    searchIcon?.classList.toggle("open");
    searchContainer?.classList.toggle("open");

    if (searchIcon?.classList.contains("open")) {
      // Clear any existing timeout to avoid multiple triggers
      clearTimeout(toggleTimeout);
      toggleTimeout = setTimeout(() => {
        searchInput.focus();
        searchInput.placeholder = "test";
      }, 1000);
    } else {
      searchInput.placeholder = "";
    }
  };

  const updateSearchInputValue = () => {
    searchInputValue = searchInput.value;
    search.helper.setQuery(searchInputValue);
    search.helper.search();
  };

  searchIcon.addEventListener("click", toggleOpenClass);
  searchInput.addEventListener("click", handleSearchInput);
  searchInput.addEventListener("keyup", updateSearchInputValue);

  //Implementing MeiliSearch
  const search = instantsearch({
    indexName: "prod_giochidislots",
    searchClient: instantMeiliSearch(
      "https://search.kenshomedia.com",
      "PVM2UtxV8kq3wBtpRbb57yvGN9u9P33j",
      {
        placeholderSearch: false,
      },
    ).searchClient,
  });
  search.addWidgets([
    instantsearch.widgets.searchBox({
      container: "#searchInput",
      cssClasses: {
        root: "relative",
        input: ["hidden"],
      },
      showSubmit: false,
      showLoadingIndicator: false,
      showReset: false,
    }),
    instantsearch.widgets.configure({
      hitsPerPage: 8,
    }),
    instantsearch.widgets.hits({
      container: "#hits",
      cssClasses: {
        list: ["mt-3", "grid", "grid-cols-1", "gap-2", "lg:grid-cols-2"],
      },
      templates: {
        // Template literals could be extracted to a function to avoid redundancy
        item(hit, { html, components }) {
          return html`<a class="col-span-1 flex rounded-md shadow-sm" href=https://www.giochidislots.com/it/slot-machine/${
            hit.slug
          } data-sveltekit-reload>
                                <div class="flex justify-items-start overflow-hidden w-16 flex-shrink-0 items-center justify-center rounded-l-md border-grey-300 border-l border-t border-b">
                                    <img src=${hit.logo} class=""/>
                                </div>
                                <div class="flex flex-1 items-center justify-between truncate rounded-r-md border-t text-black border-r border-b border-grey-300 bg-white">
                                    <div class="flex flex-1 flex-col truncate px-4 py-1 text-sm leading-tight">
                                        <div class="font-medium uppercase text-left text-xs">
                                            ${components.Highlight({
                                              hit,
                                              attribute: "title",
                                            })}
                                            </div>
                                            <div class="text-left text-[8px] m-0 mt-px">
                                                <span class="uppercase mr-2">Categorie</span>
                                                ${components.Snippet({
                                                  hit,
                                                  attribute: "categoryTitle",
                                                })}
                                            </div>
                                            <div class="text-left text-[8px] m-0 mt-px">
                                                <span class="uppercase mr-2">software</span>${components.Snippet(
                                                  {
                                                    hit,
                                                    attribute: "providerTitle",
                                                  },
                                                )}
                                            </div>
                                            <div class="text-left text-[8px] m-0 mt-px">
                                                <span class="uppercase mr-2">rating</span>${components.Snippet(
                                                  {
                                                    hit,
                                                    attribute: "avgRating",
                                                  },
                                                )}/5
                                            </div>
                                        </div>
                                    </div>
                                </a>
                            `;
        }, // Assuming 'itemTemplate' is a function that returns the template literal
        empty(results, { html }) {
          // Guard against noResults being undefined or not a function
          return html`Nessun Risultato`;
        },
      },
    }),
  ]);
  search.start();
</script>

<style lang="postcss">
	:global(.ais-Hits-list) {
		list-style: none none;
	}

	.search-results-container {
		position: fixed;
		display: block;
		color: #fff;
		z-index: 0;
		overflow-y: scroll;
		opacity: 0;
		width: 0px;
		height: 0px;
		/* transform: scale(0); */
		animation: opacityFadeOut 750ms 500ms forwards;

		&.open {
			padding-top: 120px;
			background-color: #000;
			width: 100vw;
			height: 100vh;
			left: 0;
			right: 0;
			top: 0;
			z-index: 30;
			animation: opacityFadeIn 750ms 500ms forwards;
		}

		.search-results {
			height: auto;
			pointer-events: fill;
		}
	}

	.search-container {
		z-index: 31;

		&:before {
			content: '';
			display: block;
			width: 40px;
			height: 40px;
		}

		.search-icon {
			position: absolute;
			display: inline-flex;
			width: 100%;

			input {
				position: absolute;
				background: transparent;
				right: 0;
				width: 30px;
				height: 30px;
				border-radius: 100%;
				padding: 0px;
				border-width: 4px;
				color: white;
				animation: inputEnd 750ms 500ms backwards;

				&.no-animation {
					animation: none;
				}
			}

			button {
				position: absolute;
				height: 40px;
				width: 30px;
				right: 0;

				span {
					&.no-animation {
						&:before,
						&:after {
							animation: none;
						}
					}

					&:before {
						position: absolute;
						content: '';
						display: block;
						background: white;
						height: 10px;
						width: 4px;
						transform: rotate(-45deg);
						top: 25px;
						right: 0px;
						animation: xSpanEnd 750ms 500ms backwards;
					}

					&:after {
						position: absolute;
						right: 60%;
						top: 13%;
						content: '';
						opacity: 0;
						display: block;
						background: white;
						height: 30px;
						width: 4px;
						transform: rotate(45deg);
						animation: xSpanAftEnd 750ms 500ms backwards;
					}
				}
			}

			&.open {
				width: 100%;

				input {
					padding: 5px;
					animation: inputStart 750ms 500ms forwards;
				}

                button {
                    span {
                        &:before {
                            animation: xSpanStart 750ms 500ms forwards;
                        }
                        &:after {
                            animation: xSpanAftStart 750ms 500ms forwards;
                        }
                    }
                }
			}
		}
	}

	@keyframes opacityFadeIn {
		0% {
			scale: 0;
			opacity: 0;
		}
		5% {
			scale: 1;
			opacity: 0;
		}
		100% {
			scale: 1;
			opacity: 0.9;
		}
	}

	@keyframes opacityFadeOut {
		0% {
			scale: 1;
			opacity: 0.9;
		}
		95% {
			scale: 1;
			opacity: 0;
		}
		100% {
			scale: 0;
			opacity: 0;
		}
	}

	@keyframes inputStart {
		0% {
			border-radius: 100%;
			height: 30px;
			width: 30px;
			transform-origin: left;
		}
		25% {
			border-radius: 8px;
			height: 40px;
			width: 30px;
			transform-origin: left;
		}
		100% {
			border-radius: 8px;
			height: 40px;
			width: calc(100% - 10px);
			transform-origin: left;
		}
	}

	@keyframes inputEnd {
		0% {
			border-radius: 8px;
			height: 40px;
			width: calc(100% - 10px);
			transform-origin: left;
		}
		75% {
			border-radius: 8px;
			height: 40px;
			width: 30px;
			transform-origin: left;
		}
		100% {
			border-radius: 100%;
			height: 30px;
			width: 30px;
			transform-origin: left;
		}
	}

	@keyframes xSpanStart {
		0% {
			opacity: 1;
			scale: 1;
			top: 25px;
			right: 0px;
			height: 10px;
		}
		15% {
			opacity: 0;
			scale: 1;
			top: 25px;
			right: 0px;
			height: 10px;
		}
		20% {
			opacity: 0;
			scale: 0;
			top: 13%;
			right: 60%;
			top: 13%;
			height: 30px;
		}
		50% {
			scale: 0;
			opacity: 1;
			top: 13%;
			right: 60%;
			height: 20px;
		}
		80% {
			scale: 1.2;
			opacity: 1;
			top: 13%;
			right: 60%;
			height: 30px;
		}
		100% {
			scale: 1;
			opacity: 1;
			top: 13%;
			right: 60%;
			height: 30px;
		}
	}

	@keyframes xSpanEnd {
		0% {
			scale: 1;
			opacity: 1;
			top: 13%;
			right: 60%;
			height: 30px;
		}
		20% {
			scale: 1.2;
			opacity: 1;
			top: 13%;
			right: 60%;
			height: 30px;
		}
		50% {
			scale: 0;
			opacity: 1;
			top: 13%;
			right: 60%;
			height: 20px;
		}
		80% {
			opacity: 0;
			scale: 0;
			top: 13%;
			right: 60%;
			top: 13%;
			height: 30px;
		}
		85% {
			opacity: 0;
			scale: 1;
			top: 25px;
			right: 0px;
			height: 10px;
		}
		100% {
			opacity: 1;
			scale: 1;
			top: 25px;
			right: 0px;
			height: 10px;
		}
	}

	@keyframes xSpanAftStart {
		0% {
			opacity: 0;
			scale: 0;
		}
		50% {
			opacity: 1;
			scale: 0;
		}
		80% {
			opacity: 1;
			scale: 1.2;
		}
		100% {
			opacity: 1;
			scale: 1;
		}
	}

	@keyframes xSpanAftEnd {
		0% {
			opacity: 1;
			scale: 1;
		}
		20% {
			opacity: 1;
			scale: 1.2;
		}
		50% {
			opacity: 1;
			scale: 0;
		}
		100% {
			opacity: 0;
			scale: 0;
		}
	}
</style>
