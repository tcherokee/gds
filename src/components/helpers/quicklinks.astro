---

// Types and TypeGuards
import type { Block, TranslationData, quicklinksObj } from "../../../interfaces/common/types.ts"
import { isSingleContentBlock, isFaqBlockType, isHowToBlockType } from "../../../interfaces/common/typeguards"

// Helpers
import { getTranslations } from "../../../stores/addTranslations.ts"
import { sanitizeAndHyphenate } from '../../../lib/sanitizeAndHyphenate'

//Components
import Collapse from './collapse.astro'

const { data, block } = Astro.props

const translationStore: TranslationData = getTranslations.get()

console.log('component', block)
//Function to Extract H2 Headings from Content Blocks
const extractH2Text = (components: Block[]): quicklinksObj[] => {
    // Regex to target H2 Headings
    const h2Regex = /<h2>(.*?)<\/h2>/g;
    
    // Boolean toggle to determine when one FAQ has been processed.
    let faqProcessed: Boolean = false


    return components.flatMap((component): quicklinksObj[] => {
        if (isSingleContentBlock(component)) {
            const matches = [...component.content.matchAll(h2Regex)];
            return matches.map(match => ({
                text: match[1],
                id: sanitizeAndHyphenate(match[1]),
            }));
        } else if (isHowToBlockType(component)) {
            return [{
                text: component.title,
                id: sanitizeAndHyphenate(component.title),
            }];
        } else if (isFaqBlockType(component) && !faqProcessed) {
            // Set FAQ Processed to true to ensure only One heading gets created for the FAQs.
            faqProcessed = true
            return [{
                text: translationStore.faq,
                id: sanitizeAndHyphenate(translationStore.faq),
            }];
        } else {
            return [];
        }
    });
};

const quickLinks = extractH2Text(block)
---

{
    data?.showQuickLinks ?
    <Collapse id="quickLinks" label={translationStore.quickLinks} containerClass="mb-5" labelClass="text-base md:text-xl font-medium bg-quicklinks-btn-bkg text-white p-3" collapseClass="bg-white rounded-b-md">
        <div class="flex">
            <ul class="grid capitalize m-0 p-0 pr-4 md:grid-cols-2 w-full gap-2">
                {
                    quickLinks.map(link => (
                        <li class="py-0.5 px-0 m-0">
                            <a class="underline underline-offset-4" href={`#${link.id}`}>{link.text}</a>
                        </li>
                    ))
                }
            </ul>
        </div>
    </Collapse>
    : <></>
}