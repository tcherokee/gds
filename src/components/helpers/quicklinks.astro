---
// First and Third Party Plugins
import { Link } from 'astro-link'

// Types and TypeGuards
import type { Block, TranslationData, quicklinksObj } from "../../../interfaces/common/types.ts"
import { isSingleContentBlock, isFaqBlockType, isHowToBlockType, isProsAndConsType, isImageWithParagraphType, isIntroductionWithImageBlock } from "../../../interfaces/common/typeguards"

// Helpers
import { getTranslations } from "../../../stores/addTranslations.ts"
import { sanitizeAndHyphenate } from '../../../lib/sanitizeAndHyphenate'

//Components
import Collapse from './collapse.astro'

const { data, block, isGamePage = false } = Astro.props

const translationStore: TranslationData = getTranslations.get()

// Regex to target H2 Headings
const h2Regex = /<h2>(.*?)<\/h2>/g;

//Function to Extract H2 Headings from Content Blocks
const extractH2TextBlock = (components: Block[]): quicklinksObj[] => {
    
    // Boolean toggle to determine when one FAQ has been processed.
    let faqProcessed: Boolean = false


    return components.flatMap((component): quicklinksObj[] => {
        if (isSingleContentBlock(component)) {
            const matches = [...component.content.matchAll(h2Regex)];
            return matches.map(match => ({
                text: match[1],
                id: sanitizeAndHyphenate(match[1]) || '',
            }));
        } else if (isHowToBlockType(component)) {
            return [{
                text: component.title,
                id: sanitizeAndHyphenate(component.title) || '',
            }];
        } else if (isFaqBlockType(component) && !faqProcessed) {
            // Set FAQ Processed to true to ensure only One heading gets created for the FAQs.
            faqProcessed = true
            return [{
                text: translationStore.faq,
                id: sanitizeAndHyphenate(translationStore.faq) || '',
            }];
        } else if (isProsAndConsType(component)) {
            return [{
                text: component.heading,
                id: sanitizeAndHyphenate(component.heading) || ''
            }]
        } else if (isImageWithParagraphType(component)) {
            return [{
                text: component.title,
                id: sanitizeAndHyphenate(component.title) || ''
            }]
        } else if (isIntroductionWithImageBlock(component)) {
            return [{
                text: component.heading,
                id: sanitizeAndHyphenate(component.heading) || ''
            }]
        } else {
            return [];
        }
    });
};

const extractH2Text = (element: any) => {

    const quickLinkKeys = [
        "heading",
        "introduction",
        "content1",
        "content2",
        "content3",
        "content4",
        "howTo",
        'proscons',
        "faqs",
        "gameInfoTable",
    ]
    
    const qlArray = []
    
    for (const key in element) {
        if (quickLinkKeys.includes(key) && element[key]) {
            switch (key) {
                case 'howTo':
                    qlArray.push({
                        text: element[key].title,
                        id: sanitizeAndHyphenate(element[key].title)
                    })
                    break
                case 'content1':
                case 'content2':
                case 'content3':
                case 'content4':
                case 'introduction':
                    const matches = [...element[key].matchAll(h2Regex)];
                    qlArray.push(...matches.map(match => ({
                        text: match[1],
                        id: sanitizeAndHyphenate(match[1]),
                    })));
                    break;
                case 'proscons':
                    qlArray.push({
                        text: element[key].heading,
                        id: sanitizeAndHyphenate(element[key].heading)
                    })
                    break;
                case 'heading':
                    if (isGamePage) {
                        qlArray.push({
                            text: element[key].heading,
                            id: sanitizeAndHyphenate(element[key].heading)
                        })
                    }
                    break
                case 'gameInfoTable':
                    qlArray.push({
                        text: translationStore.gameInfoTableH2,
                        id: sanitizeAndHyphenate(translationStore.gameInfoTableH2)
                    })
                    break
                case 'faqs':
                    if (element[key].length > 0) {
                        qlArray.push({
                            text: translationStore.faq,
                            id: sanitizeAndHyphenate(translationStore.faq)
                        })
                    }
                    break
                default:
                    break;
            }
        }
    }

    return qlArray

}

const quickLinks = block ? extractH2TextBlock(block) : extractH2Text(data.attributes)

---

    <Collapse id="quickLinks" label={translationStore.quickLinks} containerClass="mb-5" labelClass="text-base md:text-xl font-medium bg-quicklinks-btn-bkg text-white p-3" collapseClass="bg-white rounded-b-md">
        <div slot="content" class="flex">
            <ul class="grid capitalize m-0 p-0 pr-4 md:grid-cols-2 w-full gap-2">
                {
                    quickLinks.map(link => (
                        <li class="py-0.5 px-0 m-0">
                            <Link class="underline underline-offset-4" href={`#${link.id}/`}>{link.text}</Link>
                        </li>
                    ))
                }
            </ul>
        </div>
    </Collapse>